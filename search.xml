<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于学习</title>
      <link href="/2022/06/26/think/about-learning/"/>
      <url>/2022/06/26/think/about-learning/</url>
      
        <content type="html"><![CDATA[<h1 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h1><h2 id="基础认知"><a href="#基础认知" class="headerlink" title="基础认知"></a>基础认知</h2><p>在我的认知中，学习的根本目的是为了改变行为，这里的行为包括内在行为和外在行为。同时，我理解学习的方式主要分成两种：其一，从他人的经验中学习；其二，从自己的经验中学习。</p><p>在过去很长一段时间里，我对不同人学习效果有或大或小的差别这件事非常好奇，我理解这是因为内外在行为的统一程度不同。</p><p>绝大部分情况下，这两种行为并不会同时获得成长，往往有一个走在前头。当你从他人的经验中学习时，最开始是内在行为的改变，这时你往往来不及在行为上做出改变；同理，当从自己的经验中学习时，首先改变的是外在行为，因为大部分情况下你还不能很好地在内在层面上做出反思。但为了追求自身长久的成长，需要尽可能地保持这两种行为同频进步。</p><p><img src="https://sherlockblaze.com/resources/img/dailyrethink/about-learning/think.jpg" alt="Think"></p><h2 id="从内到外"><a href="#从内到外" class="headerlink" title="从内到外"></a>从内到外</h2><p>从内到外的优化要多实践。</p><p>一般来说，从他人的经验中学习首先改变的是内在行为。常见的学习方式有读书、听课程以及参加讲座等等。在读完一本书或者听了几次课程之后，我们往往会先在内在上有所感觉。</p><p>我在 2019 年读了一本心理学相关的著作，书中把人的心智成长分成了四个主要阶段：以我为尊、规范为主、自主导向和内观自变。前两个和后两个阶段的不同主要在于自身评价的来源，前两个阶段的评价来源主要是外部环境，后两个阶段则更多来源于自身。</p><p>在学习到这个知识之后很长的一段时间，我会选择使用它来作为一个分类标准，来判断遇到的人以及评判自身。当时我认为自己处在自主导向向内观自变转化的一个阶段，但具体去说，却并没有办法描述行为上有何不同，更多地在于内在状态的变化。</p><p>这种状态持续了很长一段时间，也就是外在行为的进步并没有跟上内在行为，一直到不断反思自己这些年的行为之后才有所突破。</p><p>从外在行为的层面来说，我在早先年更倾向于做自己认为正确的事情，比如，我认为有些事情应该由我自己去经历，拒绝表哥给我提供建议，最后吃各种亏。再晚些时候，我开始倾向于去做别人认为正确的事情，这是因为在创业过程中做了很多自认为正确的尝试，最终碰得头碰血流，不得不去尝试迎合。到了现在，我开始尝试在这两种状态之间寻找一种平衡，项目推进时会做利益相关者分析，会先了解关键人物的想法。再往后，我认为我应该可以更好地判断在什么场景下应该选择什么样的状态，即在什么场景下我应该坚定去做自己认为正确的事，而在另外的场景选择做别人认为正确的事会更好一些，又或者是在某种场景下在这两者之间寻求平衡。</p><p>实际上，我所描述的四种外在行为状态和书中介绍的心智成长四个阶段是完全匹配的。通过不断地去探索、成长我才慢慢将内外在的行为匹配到一起。</p><p>这种从内到外的成长方式需要长期、大量的实践和探索，路径消耗很大。有时我们会感觉痛苦，因为外在表现没有跟上导致收益甚微，但一旦突破就有机会获得巨大的成长。就像当你刚学到一个市场分析框架时，仅仅是脑袋里有所概念，随着大量的练习、实战，才能想真正掌握并辅助优化自己的思维框架。</p><p><img src="https://sherlockblaze.com/resources/img/dailyrethink/about-learning/mindfulness.jpg" alt="Mindfulness"></p><h2 id="从外到内"><a href="#从外到内" class="headerlink" title="从外到内"></a>从外到内</h2><p>从外到内的成长靠复盘。</p><p>前段时间读了一本书 —— 《能力陷阱》，书中提出了一个观点 —— 在持续性的个人发展过程中，外在表现比内在认知更为重要，作者强调“先行动，再思考”。</p><p>这跟我所理解的第二种学习方式 —— 从自己的经验中学习 —— 如出一辙。从自己的经验中学习跟前一种学习方式是对向关系，它往往是从外在行为开始的。</p><p>假设一个场景，你是一家产业互联网企业的项目经理，随着市场环境的变化，公司现在有一个重点业务需要追寻转型。在完成项目第一版本的设计后，你需要做一个利益相关者分析，来判断这次业务转型可能会动到哪些人的蛋糕。现在已经确定接下来的项目落地会很大程度上影响销售部门的工作方式，你需要先和销售总监进行一次深入沟通。你提前准备好了说辞，并制作了十几页的 PPT，希望能在第二天的交流中成功说服销售总监加入队伍。谁知道第二天销售总监只听了五分钟就否决了你的计划 —— “这根本不行，我手下的人怎么吃饭？”，你使尽浑身解数想去征服这位总监，但连续几天结果都不理想。眼看距离向上汇报最终方案的日子越来越近，你也越来越苦恼、焦躁，不知道要怎样才能顺利通关。</p><p>这个时候你为了寻求突破点，只能对自己过去几天的努力进行复盘，看看到底哪里出现了问题。你想起了销售总监的那句话：“这根本不行，我手下的人怎么吃饭？”，原来你的这个方案在推进过程中会严重影响销售部门各员工的绩效，如果项目推进出现问题，有可能销售人员一个月只能拿到不到原来一半的薪水。最后你想出了解决方案 —— 提高销售底薪，配合销售总监设计新的绩效计算方案，保证业务转型过程中各销售员工薪水不低于之前的 80%。终于，销售总监成功被你说服，你可以顺利进入下一个阶段，向上汇报这一阶段的成果。（当然，现实工作场景中往往不会这么顺利，甚至你的销售总监不会给你这么多说服他的机会。）</p><p>完成了这次的工作以后，你仍然是要做一次复盘的。在下一次有类似的工作出现时，你会更加合理地分配这其中可能涉及到的利益。并且你也更加确信，说服别人要靠利益不能靠讲道理。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写到这里，突然发现我写的内容存在一些矛盾，或者说分类的结果不够干净，无论是内外还是外内，都存在一定的关联性。事实上也是如此，我在从内到外的例子里其实复盘了我过去的行为，从外到内的例子里其实也用到了从其他地方学习到的知识。</p><p>我思来想去，发现本该如此。你本身就不会所有的事情都自己探索，这样又慢收效又低；你更加不会什么都听别人的，这样会慢慢丧失独立思考的能力。我们本身就是在不断地循环，或增长或降低。当你积累的量到达一定程度以后就会引来质变，而当质上升了一个层级，你就需要积累新的量。真正的重点在于，无论从哪一边开始，我们都要持续不断地去推动这个回路运转起来，这样它才有可能成为一个增强回路，帮助我们实现长期的成长。</p><p>突然想到这个话题可以从系统动力学的角度来细细展开，但这里就不过多发散了。</p><p>共勉。</p><p><img src="https://sherlockblaze.com/resources/img/dailyrethink/about-learning/dontstop.jpg" alt="Don&#39;t Stop"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Daily Rethink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于工作</title>
      <link href="/2022/06/25/think/about-work/"/>
      <url>/2022/06/25/think/about-work/</url>
      
        <content type="html"><![CDATA[<h1 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h1><h2 id="工作的分类"><a href="#工作的分类" class="headerlink" title="工作的分类"></a>工作的分类</h2><p>在我的理解里，日常工作主要分成三个类别：</p><p>其一，是可以通过细致分析解决的工作，这个类别的工作对个人专业能力和过往经验的要求较高；其二，除了细节上的把控，还需要具备更全局的视角、时机上的把控以及开创精神，此类工作对个人的综合素养要求更高；还剩下一类，这类工作大多是不值得消耗精力去做的，要么是当前的情况下不适合去做，没法落地，要么是根本没有做的价值。</p><p>这三个类别的工作大抵上遵循正态分布：第一类工作占比最多，大概 50% - 70%；第二类工作大概占比 10% - 20%，第三类占比 20% - 30%。也就是说，十个工作里面，可能有 5 到 7 个工作是可以通过细致分析解决的，只要你足够耐心、踏实；再有 1 到 2 个工作，可能需要你更加有创造力，更加大胆、敢于挑战；剩下 2 到 3 个工作则暂时不要去做。</p><p>到了这里，我会去思考为什么要给工作做这样的分类？一方面，是为了更好地管理我们的时间和精力，另一方面，更是为了指导我们的行为，帮助我们管理职业生涯不同阶段的目标。</p><p><img src="https://sherlockblaze.com/resources/img/dailyrethink/about-work/classify.jpg" alt="Classify"></p><h2 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h2><p>在职业生涯的第一阶段，我理解重点是锻炼自己落地的能力。要学会分辨哪些工作可以做，而哪些暂时不适合去做。这个阶段的个人往往富有想法，有非常非常多的 idea 想去尝试。但想要保证这个阶段的工作质量，踏实地让所分配到的工作落地是非常重要的。</p><p>举例来说，你负责一款产品的推广 —— 这是一家创业公司的新产品 —— 主要向在校大学生提供服务，最好的情况是能跟学校建立合作，这样可以保证不断有学生进入新的生命周期。这时候你有两个选择：一是自下而上，从学生开始突破，积累一定的学生用户以后，再和校方建立联系；二是自上而下，从学校开始突破，直接和校方联系，投入资源进行谈判，成功建立合作以后，再向下推展工作。</p><p>第二种方法简单粗暴，如果成功有可能短时间内获得大量的目标用户，然后升职加薪走向人生巅峰。但是，我们要注意的是，这一家初创企业的新产品。这款产品在其生命周期的初期，这个阶段的产品更需要不断提升其品质，做好口碑和种子用户的 BD 工作，争取获得自增长能力。另外，拿着新产品去和校方谈合作，这对一家初创企业来说所需的资源一定是不低的。因此，相对来说，第一种方案可能更加可行一些，并且有方法可以更加具体地向下执行。哪种方案更加经济、可行并能获得具备长期价值的结果，需要根据实际的情况来进行判断。</p><p>所以，我理解，在职业生涯的第一阶段，主要目标应该是尽可能多地将事情做成，去不断地探索落地。当你把一个目标拆分成几个具体的工作时，应该能非常敏锐地判断出哪些工作是当下应该去做的，而哪些不是。</p><p>随着两到三年或者三到五年的努力和沉淀，我们已经具备了分辨重点工作的能力，这时候我们的全部精力都是放在前两个类别的工作上。但有趣的事情发生了，相对于第一类工作，我们都能感觉到第二类的工作带给人的满足感更强、更加有趣，回报也更丰盛。可是，第一类的那 5 - 7 个工作就会占用日常精力的 70% - 80%，你几乎没有足够精力去挑战那 1 - 2 个有趣的工作，何况它们所需的精力甚至远远超过那 5 - 7 个工作。</p><p><img src="https://sherlockblaze.com/resources/img/dailyrethink/about-work/detail.jpg" alt="detail"></p><h2 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h2><p>为了让我们更加有能力去挑战第二类工作，我认为职业生涯第二阶段的主要目标，应该是努力提高我们在第一类工作上的掌控力。因为这样才能帮助我们节省更多的精力去面对更大的挑战。</p><p>我们在之前的分类中也提到，第一类工作往往通过细致的分析、对细节的把控就可以很好地完成。因此，想要提高对这类工作的掌控力，我们需要足够细节。但怎样才能说是足够细节呢？</p><p>假设这样一个情境：有一家平台企业，向客户提供所需的咨询服务。你是这家公司的客服人员，日常工作就是接听电话，将潜在的客户向后转化。但非常可惜的是，有一些客户对平台有天然的抵触心理，在你刚开口介绍完我们是一家平台 —— “您好，我们是 XX 服务平台，请问有什么问题可以帮您” 时 —— 客户就果断挂掉了电话。</p><p>类似的情况在客户有能力直接获取处于供应链上游的服务时更为常见。这个时候，你要怎样做到：1. 客户清楚平台的存在；2. 客户愿意进一步沟通。但当缺乏细节层面的掌控力时，你只能选择碰运气，等一个愿意听你把话讲下去的友好客户。但这必然会消耗你越来越多的精力，因为你需要不断地跟客户介绍平台的作用，而非去了解客户实际的需求。真正的工作目标 —— 向后转化 —— 会消耗更多才有可能完成，这导致你完全没有机会去挑战第二类工作，比如：优化客户的整条转化路径。</p><p>实际上，你可以利用客户的从众心理。比如，你可以在接听时加上一小段话介绍这家公司的业务情况：“您好，我们是 XX 服务平台。我们有 XXX 个服务供应商，已经有 XXX 位客户选择了从我们平台获取服务，其中，有 XX% 的客户给出了满分好评”。</p><p>这个方法在奥巴马竞选拉票时也使用过，“Jason，你知道吗？已经有 XXXXX 位 Jason（同名） 已经投票选择奥巴马作为下一届总统了”。最后的结果我们可以在历史课堂上学习到，奥巴马利用这种方式来让自己的竞选更具掌控性。</p><p>通过细节上的把控，你能在第一类工作中获得更多的掌控力，可以明确某个行为可能引发什么样的反应。当不再需要去赌运气的时候，就会减少很多意外情况，会有越来越多的精力被节省出来。这时，我们也会更有机会去挑战那高难度的第二类工作。甚至未来某一天，可以把全部的精力放在处理这种类别的工作上，即升职了。</p><p>按照我现阶段的理解，我正处于第二阶段的沉淀中。希望未来的 3 - 5 年里，我可以在第一类工作上具备更强的掌控力，以此来帮助我做好进入职业生涯第三阶段的准备。</p><h2 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h2><p>这里也简单提一下我对第三阶段的理解：这一阶段既要能自上而下从宏观角度规划我们的工作，也要能自下而上从微观角度设计我们的执行路径。</p><p>共勉。</p><p><img src="https://sherlockblaze.com/resources/img/dailyrethink/about-work/future.jpg" alt="future"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Daily Rethink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Getting Started with System Programming</title>
      <link href="/2020/04/26/c++/system-programming-p1/"/>
      <url>/2020/04/26/c++/system-programming-p1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>All the summaries are from the book named <a href="https://www.amazon.com/System-Programming-Cookbook-system-level-programming/dp/1838646558" target="_blank" rel="noopener">C++ System Programming Cookbook</a>.</p></blockquote><ul><li>Learning the Linux fundamentals<ul><li>architecture</li><li>shell</li><li>users</li><li>processes and threads</li></ul></li><li>Using a makefile to compile and link a program</li><li>Using the <strong>GNU Project Debugger (GDB)</strong> to debug a program</li><li>Handling a Linux bash error</li><li>Handling Linux code error</li></ul><h2 id="Technical-Requirements"><a href="#Technical-Requirements" class="headerlink" title="Technical Requirements"></a>Technical Requirements</h2><ul><li>Install <a href="www.docker.com">docker</a>.</li><li>Pull the image from Docker Hub: <code>docker pull kasperondocker/system_programming_cook:latest</code></li><li>Run the Docker image with an interactive shell, with the help of the following command: <code>docker run -it --cap-add sys_ptrace kasperondocker/system_programming_cookbook:latest /bin/bash</code></li><li><code>cd /BOOK</code></li></ul><h2 id="Learning-the-Linux-fundamentals-architecture"><a href="#Learning-the-Linux-fundamentals-architecture" class="headerlink" title="Learning the Linux fundamentals - architecture"></a>Learning the Linux fundamentals - architecture</h2><p>Linux is a clone of the Unix operating system, it’s a multiuser, multitasking operating system that runs on a wide variety of platforms. The Linux kernel has a monolithic architecture for performance reasons. This means <strong>that it is self-contained in one binary, and all its services run in kernel space.</strong></p><p>The following diagram shows the main Linux building blocks:</p><p><img src="https://sherlockblaze.com/resources/img/c++/linux-building-blocks.png" alt=""></p><ul><li>On the top layer, there are user applications, processes, compilers, and tools. This layer (which runs in a user space) communicates with the Linux kernel (which runs in kernel space) through system calls.</li><li><strong>System libraries</strong>: These are a set of functions through which an application can interact with the kernel.</li><li><strong>Kernel</strong>: This component contains the core of the Linux system. Among other things, it has the scheduler, networking, memory management, and filesystems.</li><li><strong>Kernel modules</strong>: These contain pieces of kernel code that still run in kernel space but are fully dynamic (in the sense that they can be loaded and unloaded with the running system). They typically contain device drivers, kernel code that is specific to a particular hardware module implementing a protocol, and so on. One huge advantage of the kernel modules it that users can load them without rebuilding the kernel.</li></ul><p><strong>GNU</strong> is an operating system that is free software. Indeed, GNU used alone is meant to represent a full set of tools, software, and kernel parts that an operating system needs. The GUN operating system kernel is called the <strong>Hurd.</strong> As the Hurd was not production-ready, GNU typically uses the Linux kernel, and this combination is called the <strong>GNU/Linux operating system.</strong></p><p>So, what are the GNU components on a GNU/Linux operating system? Packages* such as the <strong>GNU Compiler Collection(GCC)</strong>, the <strong>GNU C library</strong>, GDB, the GNU Bash shell, and the <strong>GNU Network Object Model Environment(GNOME)</strong> desktop environment, to mention just a few.</p><p>Richard Stallman and the <strong>Free Software Foundation(FSF)</strong> – of which Stallman is the founder – authored the <strong>free software definition</strong> to help respect users’ freedom. <em>Free software</em> is considered any package that grants users the following for types of freedoms (so-called <strong>essential freedoms</strong>: <a href="https://isocpp.org/std/the-standard" target="_blank" rel="noopener">https://isocpp.org/std/the-standard</a>):</p><ul><li>The freedom to run the program as you wish, for any purpose (Freedom 0)</li><li>The freedom to study how the program works and to change it, so it does your computing as you wish (Freedom 1). Access to the source code is a precondition for this.</li><li>The freedom to redistribute copies so that you can help others (Freedom 2)</li><li>The freedom to distribute copies of your modified versions to other (Freedom 3). By doing this, you can give the whole community a chance to benefit from your changes. Access to the source code is a precondition for this.</li></ul><p>The concrete instantiation of these principles is in the GNU/GPL license, which FSF authored. All of the GNU packages are released under the GNU/GPL license.</p>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 常用命令及技巧</title>
      <link href="/2020/04/19/linux/linux-in/shell-in-linux/"/>
      <url>/2020/04/19/linux/linux-in/shell-in-linux/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-shell"><a href="#什么是-shell" class="headerlink" title="什么是 shell"></a>什么是 shell</h2><p>Shell 在 Linux 中的作用就是围绕在 Linux 内核之外的一个“壳” 程序用户在操作系统上完成的所有任务都是通过 Shell 与 Linux 的交互来实现的。</p><p><strong>shell 既是一种命令解释程序，又是一种功能强大的解释型程序设计语言。</strong></p><p>作为<strong>命令解释程序</strong>， shell 解释用户输入的命令，然后提交到内核处理，最后把结果返回给用户。</p><p>为了加速命令的运行，同时更有效地定制 shell 程序，shell 中定义了一些内置命令，<strong>一般把 shell 自身解释执行的命令称为内置命令</strong>。</p><blockquote><p>当用户登录系统后，shell 以及内置命令就被系统载入到内存，并且一直运行，直到用户退出系统为止。”#” 表示登录的用户是超级用户， “$” 表示登录到系统的是普通用户。</p></blockquote><blockquote><p><strong>shell 执行命令解释的具体过程为:</strong> 用户在命令行输入命令并提交后，shell 程序<strong>首先检测它是否为内置命令</strong>，如果是，就通过 shell 内部的解释器将命令解释为系统调用，然后提交给内核执行；如果不是 shell 内置的命令，那么 shell 会按照用户给出的路径或者根据系统环境变量的配置信息在硬盘寻找对应的命令，然后将其调入内存中，最后再将其解释为系统调用，提交给内核执行。</p></blockquote><p>而作为<strong>解释型程序设计语言</strong>，它定义了各种选项和变量，几乎支持高级程序语言的所有程序结构，如变量、函数、表达式和循环等。利用 shell 可以编写 shell 脚本。</p><h2 id="Shell-命令的语法分析"><a href="#Shell-命令的语法分析" class="headerlink" title="Shell 命令的语法分析"></a>Shell 命令的语法分析</h2><p>shell 语法分析是指 shell 对<strong>命令的扫描处理过程，</strong>也就是，把命令或者用户输入的内容分解成要处理的各个部分的操作。在 Linux 系统下，shell 语法分析包含很多内容，如重定向、文件扩展名和管道等。</p><h3 id="shell-的命令格式"><a href="#shell-的命令格式" class="headerlink" title="shell 的命令格式"></a>shell 的命令格式</h3><p><strong>shell 遵循一定的语法格式将用户输入的命令进行分析解释并传递给系统内核。</strong></p><p>shell 命令的一般格式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> [options] [arguments]</span><br></pre></td></tr></table></figure><ul><li>command: 表示命令的名称</li><li>options: 表示命令的选项</li><li>arguments: 表示命令的参数</li></ul><h3 id="shell-的通配符"><a href="#shell-的通配符" class="headerlink" title="shell 的通配符"></a>shell 的通配符</h3><h3 id="shell-的重定向"><a href="#shell-的重定向" class="headerlink" title="shell 的重定向"></a>shell 的重定向</h3><h3 id="shell-的管道"><a href="#shell-的管道" class="headerlink" title="shell 的管道"></a>shell 的管道</h3><h3 id="shell-的自动补全命令行"><a href="#shell-的自动补全命令行" class="headerlink" title="shell 的自动补全命令行"></a>shell 的自动补全命令行</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>委屈成就伟大-商界精英给年轻人的12个忠告</title>
      <link href="/2020/02/14/books/%E5%A7%94%E5%B1%88%E6%88%90%E5%B0%B1%E4%BC%9F%E5%A4%A7-%E5%95%86%E7%95%8C%E7%B2%BE%E8%8B%B1%E7%BB%99%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%8412%E4%B8%AA%E5%BF%A0%E5%91%8A/"/>
      <url>/2020/02/14/books/%E5%A7%94%E5%B1%88%E6%88%90%E5%B0%B1%E4%BC%9F%E5%A4%A7-%E5%95%86%E7%95%8C%E7%B2%BE%E8%8B%B1%E7%BB%99%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%8412%E4%B8%AA%E5%BF%A0%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>口水书，目录比正文精彩。<a href="https://sherlockblaze.com/resources/file/books/委屈成就伟大：商界精英给年轻人的12个忠告.pdf">PDF</a>。</p><blockquote><p>联想集团创始人柳传志: <strong>一个人越是成功，遭受的委屈也越多。要使自己的生命获得价值，就不能太在乎委屈，不能让它揪紧你的心灵。</strong><br>华为总裁任正非: <strong>(干部)一定要有天降大任于斯人的胸怀，要受得了委屈，特别是做了好事还受冤枉的委屈。</strong><br>万通董事长冯仑: <strong>痛苦是男人的营养，经历得越多，这个男人就变得越睿智、宽容、幽默、坚强。经历过生死、爱恨、委屈、是非的男人，定会成长为一个真正的男人。</strong><br>微软 CEO 比尔盖茨: <strong>社会充满了不公平现象，你不要想去改造它，只能先适应它。世界不会在意你的自尊，人们看到的只是你的成就。在你没有作出成就之前，切勿过分强调自尊，被委屈是生命的一种常态。</strong><br>马云: <strong>人的胸怀是委屈撑大的，同样，人的成功更是委屈成就的。如果你没有成功，只说明一点：被委屈的不够。因此，你要感谢曾经和正在经受的委屈。</strong></p></blockquote><h2 id="成功者的胸怀是委屈撑大的"><a href="#成功者的胸怀是委屈撑大的" class="headerlink" title="成功者的胸怀是委屈撑大的"></a>成功者的胸怀是委屈撑大的</h2><p>世人皆有委屈，看得开才能活得痛快，如果一受委屈就放弃自己努力已久的事情，那就永远不可能有成功的一天。成功者的胸怀都是委屈撑大的，在他们光鲜亮丽的背后总有鲜为人知的辛酸故事。当你受到委屈时，应该像那些强者一样去和命运抗争，把心变豁达，把所有的不平淡看淡。</p><h2 id="人生在世，不幸的人不止你一个"><a href="#人生在世，不幸的人不止你一个" class="headerlink" title="人生在世，不幸的人不止你一个"></a>人生在世，不幸的人不止你一个</h2><p>人世无常，谁都会遇到一些不幸的事，不幸是最残酷的委屈，但它不会一直折磨我们。想要摆脱不幸，就不能轻易向命运低头，要像 “沙漠玫瑰” 一样坚强地生存着，并且要懂得，天助自救者，无论是谁，都不能把希望全部寄托在别人身上，要靠自己的双手来开创美好的未来。</p><h2 id="你若不勇敢，没人能替你坚强"><a href="#你若不勇敢，没人能替你坚强" class="headerlink" title="你若不勇敢，没人能替你坚强"></a>你若不勇敢，没人能替你坚强</h2><p>人生来就要受苦，在痛苦中煎熬的人会不时地被委屈包围。不过，忍受煎熬并不全然都是坏事，只有在经历煎熬后才能化茧为蝶。痛苦虽然难熬，但只要我们不放弃希望，始终坚强，就一定能看到胜利的曙光。如果你被痛苦折磨得无法再忍受，就这样鼓励自己: “黑夜给了我黑色的眼睛，我要用它寻找光明”。</p><h2 id="没有过不去的坎，没有到不了的明天"><a href="#没有过不去的坎，没有到不了的明天" class="headerlink" title="没有过不去的坎，没有到不了的明天"></a>没有过不去的坎，没有到不了的明天</h2><p>人生百年，没有谁能一条平路走到底，挫折总会藏在一个地方等着我们。遭遇挫折会让人感到委屈和无助，但也隐藏着成功的种子，只要我们拥有勇往直前的决心，坎坷就会成为我们成功路上的帮手。要相信，世上没有过不去的坎儿，挫折不会一直存在，有时候，只要我们再往前走一步，就会和成功握手。</p><h2 id="别拿别人的过错折磨自己"><a href="#别拿别人的过错折磨自己" class="headerlink" title="别拿别人的过错折磨自己"></a>别拿别人的过错折磨自己</h2><p>人生不如意之事十有八九，没有谁能够一直平平顺顺，当遭遇不顺时，我们应该让自己保持心平气和，而不是怒火中烧。要知道，愤怒具有超强的杀伤力，它能让我们的生活变得一团糟。如果我们能平静面对不顺，用机智代替愤怒，我们不仅能让糟糕的事情有所好转，还能让因不顺而产生的委屈随风飘散。</p><h2 id="有时候，沉默是最有力的回应"><a href="#有时候，沉默是最有力的回应" class="headerlink" title="有时候，沉默是最有力的回应"></a>有时候，沉默是最有力的回应</h2><p>被讥讽的滋味不好受，但不能因为这样就抓狂失态，一旦我们这么做了，我们就可能遭受更猛烈的讥讽。其实，讥讽不可怕，可怕的是我们沉溺在讥讽给我们带来的委屈中出不来。当你被委屈包围时，就这样提醒自己：无需在意他人的言语，用沉默代替争辩，只要我们能够做出成绩，生活自会给讥讽者以讽刺。</p><h2 id="不要因他人的轻视而停止前进的步伐"><a href="#不要因他人的轻视而停止前进的步伐" class="headerlink" title="不要因他人的轻视而停止前进的步伐"></a>不要因他人的轻视而停止前进的步伐</h2><p>很多人会为别人的轻视而感到委屈，并且在受到轻视后一直怀疑自己。实际上，被轻视并不表示你就是差劲的人，就算在某方面真的技不如人，只要心怀必胜的决心就一定能将卑微碾碎。很多成功人士就是因为拥有坚定的决心以及乐观的心态，才从不起眼的小人物成长为众人瞩目的焦点的。</p><h2 id="举世誉之而不加劝，举世非之而不加沮"><a href="#举世誉之而不加劝，举世非之而不加沮" class="headerlink" title="举世誉之而不加劝，举世非之而不加沮"></a>举世誉之而不加劝，举世非之而不加沮</h2><p>遭到指责后，很多人会反复纠结并委屈不已。有些人为了让自己免受指责，就会强迫自己去迎合别人的喜好，结果弄得自己疲惫不堪。想让自己获得进步，就不能害怕指责，毕竟谁都会犯错哦，错了就坦然接受并积极改正，没有什么难为情的。</p><h2 id="害怕走崎岖山路的人，只会永远留在山下"><a href="#害怕走崎岖山路的人，只会永远留在山下" class="headerlink" title="害怕走崎岖山路的人，只会永远留在山下"></a>害怕走崎岖山路的人，只会永远留在山下</h2><p>有些人稍有压力就会整日愁眉苦脸甚至委屈地想要大哭。其实，压力并不可怕，能够笑对压力的人，通常会有一个积极多彩的人生。不过，压力太大也不是好事，它会夺去人们一部分的幸福感。有些人身上的压力都是自己给自己加上去的，他们把什么事都往心里装，最后弄得自己疲惫不堪。想要恢复轻松，就要学会放下。</p><h2 id="宁可自己去原谅别人，莫让别人来原谅你"><a href="#宁可自己去原谅别人，莫让别人来原谅你" class="headerlink" title="宁可自己去原谅别人，莫让别人来原谅你"></a>宁可自己去原谅别人，莫让别人来原谅你</h2><p>世界越复杂，人和人之间的矛盾就越多。很多情况下，发生矛盾的双方都不是受益方，都会感到委屈，因为委屈，所以会心怀怨恨。心怀怨恨不是好事，它会催生悲剧的发生。想要让矛盾得到很好的解决，就要学会原谅、淡忘、道歉和忍让。忍一时风平浪静，主动去道歉能够化干戈为玉帛。</p><h2 id="吃亏是福，懂得付出才会收获幸福"><a href="#吃亏是福，懂得付出才会收获幸福" class="headerlink" title="吃亏是福，懂得付出才会收获幸福"></a>吃亏是福，懂得付出才会收获幸福</h2><p>生活中，我们经常会吃亏，大多数人在吃亏时都会感到委屈，觉得自己十分倒霉。其实，吃亏并不都是坏事，在某件事上吃了亏的人没必要一直耿耿于怀，也许今天的“亏”到了明天就会变成“果实”。另外，在和爱人、朋友相处时，不能过于计较自己是否受到了损失，懂得付出才能收获幸福。</p><h2 id="生活从不曾亏欠你，是你不肯放过自己"><a href="#生活从不曾亏欠你，是你不肯放过自己" class="headerlink" title="生活从不曾亏欠你，是你不肯放过自己"></a>生活从不曾亏欠你，是你不肯放过自己</h2><p>世界上没有十全十美的人，每个人的身上都存在缺憾，缺憾让一些人感到委屈并因此闷闷不乐。为缺憾而难过是没有必要的，因为就算我们再怎么伤心，缺憾也不会消失。与其为缺憾伤神，不如大方地承认自己的不完美。虽然我们不能改变美德，但我们能够靠自己的努力创造美好的未来。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang Concurrent</title>
      <link href="/2019/12/19/golang/golang-concurrent-intro/"/>
      <url>/2019/12/19/golang/golang-concurrent-intro/</url>
      
        <content type="html"><![CDATA[<h2 id="Concurrency-and-Parallelism"><a href="#Concurrency-and-Parallelism" class="headerlink" title="Concurrency and Parallelism"></a>Concurrency and Parallelism</h2><p>Computer and software programs are useful because they do a lot of laborious work very fast and can also do multiple things at once.</p><p>We want our programs to be able to do multiple things simultaneously, that is, multitask, and the success of a programming language can depend on how easy it’s to write and understand multitasking programs.</p><blockquote><p><a href="https://blog.golang.org/concurrency-is-not-parallelism" target="_blank" rel="noopener">concurrency is not paralleism</a></p></blockquote><ul><li><strong>Concurrency</strong>: <strong><em>Concurrency is about dealing with lots of things at once.</em></strong> This means that we manage to get multiple things done at once in a give period of time. However, we will only be doing a single thing at a time. This tends to happen in programs where one task is waiting and the program decides to run another task in the idle time. </li><li><strong>Parallelism</strong>: <strong><em>Parallelism is about doing lots of things at once.</em></strong> This means that even if we have two tasks, they are continuously working without any breaks in between them.</li></ul><p><img src="https://sherlockblaze.com/resources/img/daily/2019-12-04/concurrency-and-parallelism.png" alt="concurrency-and-parallelism"></p><p><strong>Let’s first take a look at how concurrency became such an important topic.</strong></p><h2 id="Moore’s-Law"><a href="#Moore’s-Law" class="headerlink" title="Moore’s Law"></a>Moore’s Law</h2><p><strong>The number of components on an integrated circuit would double every two years.</strong> This prediction more on less held true until just recently – around 2012.</p><p>Several companies foresaw this slowdown in the rate Moore’s law predicted and began to investigate alternative ways to increase computing power.</p><p><strong>Necessity is the mother of innovation.</strong></p><p>So, multicore processors were born.</p><h2 id="Amdahl’s-Law"><a href="#Amdahl’s-Law" class="headerlink" title="Amdahl’s Law"></a>Amdahl’s Law</h2><p>Amdahl’s law describes a way in which to model the potential performance gains from implementing the solution to a problem in a parallel manner.</p><p>Simply put, <strong>it states that the gains are bounded by how much of the program must be written in a sequential manner.</strong></p><blockquote><p>For example, imagine you were writing a program that was largely GUI based: a user is presented with an interface, clicks on some buttons, and stuff happens. This type of program is bounded by one very large sequential portion of the pipeline: human interaction. No matter how many cores you make available to this program, <strong>it will always be bounded by how quickly the user can interact with the interface.</strong></p></blockquote><blockquote><p>Now consider a different example, calculating digits of pi. Thanks to a class of algorithms called <a href="https://en.wikipedia.org/wiki/Spigot_algorithm" target="_blank" rel="noopener">spigot algorithms</a>, this problem is called <strong><em>embarrassingly parallel</em></strong>, which – despite sounding made up – is a technical term which means that it can easily be divided into parallel tasks. In this case, significant gains can be made by making more cores available to your program, and <strong>your new problem becomes how to combine and store the results.</strong></p></blockquote><p><strong>Amdahl’s law helps us understand the difference between there two problems, and can help us decide whether parallelization is the right way to address performance concerns in our system.</strong></p><h2 id="Why-is-Concurrency-Hard"><a href="#Why-is-Concurrency-Hard" class="headerlink" title="Why is Concurrency Hard?"></a>Why is Concurrency Hard?</h2><p><a href="http://www.gotw.ca/publications/concurrency-ddj.htm" target="_blank" rel="noopener">The free lunch is over: A fundamental turn toward concurrency in software</a></p><p><strong>“We desperately need a higher-level programming model for concurrency than languages offer today.”</strong></p><p>Concurrent code is notoriously difficult to get right. <strong>Fortunately everyone runs into the same issues when working with concurrent code.</strong> Because of this, computer scientists have been able to label the common issues, which allows us to discuss how they arise, why, and how to solve them.</p><h3 id="Race-Conditions"><a href="#Race-Conditions" class="headerlink" title="Race Conditions"></a>Race Conditions</h3><p><strong>A race condition occurs when two or more operations must execute in the correct order, but the program has not been written so that this order is guaranteed to be maintained.</strong></p><h3 id="Atomicity"><a href="#Atomicity" class="headerlink" title="Atomicity"></a>Atomicity</h3><p><strong>When something is considered atomic, or to have the property of atomicity, this means that within the context that it is operating, it’s indivisible, or uninterruptible.</strong></p><p><strong>Something may be atomic in one context, but not another.</strong></p><blockquote><p>Operations that are atomic within the context of your process may not be atomic in the context of the operating system; operations that are atomic within the context of the operating system may not be atomic within the context of your machine; and operations that are atomic within the context of your machine may not be atomic within the context of your application.</p></blockquote><p><strong>When thinking about atomicity, very often the first thing you need to do is to define the context, or scope, the operation will be considered to be atomic in.</strong></p><p>Let’s look at an example:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i++</span><br></pre></td></tr></table></figure><p>It may took atomic, but a brief analysis reveals several operations:</p><ul><li>Retrieve the value of i</li><li>Increment the value of i</li><li>Store the value of i</li></ul><h3 id="Memory-Access-Synchronization"><a href="#Memory-Access-Synchronization" class="headerlink" title="Memory Access Synchronization"></a>Memory Access Synchronization</h3><p>Two concurrent processes are attempting to access the same area of memory, and the way they are accessing the memory is not atomic.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data <span class="keyword">int</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;data++&#125;()</span><br><span class="line"><span class="keyword">if</span> data == <span class="number">0</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"the value is 0."</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"the value is %v.\n"</span>, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Deadlocks"><a href="#Deadlocks" class="headerlink" title="Deadlocks"></a>Deadlocks</h3><p><strong>A deadlocked program is one in which all concurrent processes are waiting on one another.</strong> In this state, the program will never recover without outside intervention.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> value <span class="keyword">struct</span> &#123;</span><br><span class="line">    mu    sync.Mutex</span><br><span class="line">    value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">printSum := <span class="function"><span class="keyword">func</span><span class="params">(v1, v2 *value)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line">    v1.mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> v1.mu.Unlock()</span><br><span class="line"></span><br><span class="line">    time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">    v2.mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> v2.mu.Unlock()</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"sum=%v\n"</span>, v1.value + v2.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a, b value</span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">go</span> printSum(&amp;a, &amp;b)</span><br><span class="line"><span class="keyword">go</span> printSum(&amp;b, &amp;a)</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br></pre></td></tr></table></figure><p>It turns out there are a few conditions that must be present for deadlocks to arise, Edgar Coffman enumerated there conditions in this paper:<a href="https://sherlockblaze.com/resources/file/golang/system-deadlock.pdf">System Deadlock</a>. The conditions are now known as the Coffman Conditions and are the basis for techniques that help detect, prevent, and correct deadlocks.</p><p>The Coffman Conditions are as follows:</p><ul><li><strong>Mutual Exclusion</strong>: A concurrent process holds exclusive rights to a resource at any one time.</li><li><strong>Wait For Condition</strong>: A concurrent process must simultaneously hold a resource and be waiting for an additional resource.</li><li><strong>No Preemption</strong>: A resource held by a concurrent process can only be released by that process, so it fulfills this condition.</li><li><strong>Circular Wait</strong>: A concurrent process(P1) must be waiting on a chain of other concurrent processes(P2), which are in turn waiting on it(P1), so it fulfills this final condition too.</li></ul><h3 id="LiveLock"><a href="#LiveLock" class="headerlink" title="LiveLock"></a>LiveLock</h3><p><strong>Livelocks are programs that are actively performing concurrent operations, but these operations do nothing to move the state of the program forward.</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">cadence := sync.NewCond(&amp;sync.Mutex&#123;&#125;)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">range</span> time.Tick(<span class="number">1</span> * time.Millisecond) &#123;</span><br><span class="line">        cadence.Broadcase()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">takeStep := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    cadence.L.Lock()</span><br><span class="line">    cadence.Wait()</span><br><span class="line">    cadence.L.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tryDir := <span class="function"><span class="keyword">func</span><span class="params">(dirName <span class="keyword">string</span>, dir *<span class="keyword">int32</span>, out *bytes.Buffer)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    fmt.Fprintf(out, <span class="string">" %v"</span>, dirName)</span><br><span class="line">    atomic.AddInt32(dir, <span class="number">1</span>)</span><br><span class="line">    takeStep()</span><br><span class="line">    <span class="keyword">if</span> atomic.LoadInt32(dir) == <span class="number">1</span> &#123;</span><br><span class="line">        fmt.Fprint(out, <span class="string">". Success!"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    takeStep()</span><br><span class="line">    atomic.AddInt32(dir, <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> left, right <span class="keyword">int32</span></span><br><span class="line">tryLeft := <span class="function"><span class="keyword">func</span><span class="params">(out *bytes.Buffer)</span> <span class="title">bool</span></span> &#123;<span class="keyword">return</span> tryDir(<span class="string">"left"</span>, &amp;left, out)&#125;</span><br><span class="line">tryRight := <span class="function"><span class="keyword">func</span><span class="params">(out *bytes.Buffer)</span> <span class="title">bool</span></span> &#123;<span class="keyword">return</span> tryDir(<span class="string">"right"</span>, &amp;right, out)&#125;</span><br><span class="line"></span><br><span class="line">walk := <span class="function"><span class="keyword">func</span><span class="params">(walking *sync.WaitGroup, name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> out bytes.Buffer</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;fmt.Println(out.String())&#125;()</span><br><span class="line">    <span class="keyword">defer</span> walking.Done()</span><br><span class="line">    fmt.Fprintf(&amp;out, <span class="string">"%v is trying to scoot:"</span>, name)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> tryLeft(&amp;out) || tryRight(&amp;out) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Fprintf(&amp;out, <span class="string">"\n%v tosses her hands up in exasperation!"</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> peopleInHallway sync.WaitGroup</span><br><span class="line">peopleInHallway.Add(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">go</span> walk(&amp;peopleInHallway, <span class="string">"Alice"</span>)</span><br><span class="line"><span class="keyword">go</span> walk(&amp;peopleInHallway, <span class="string">"Barbara"</span>)</span><br><span class="line">peopleInHallway.Wait()</span><br></pre></td></tr></table></figure><p>This example demonstrates a very common reason livelocks are written: two or more concurrent processes attempting to prevent a deadlock without coordination.</p><h3 id="Starvation"><a href="#Starvation" class="headerlink" title="Starvation"></a>Starvation</h3><p><strong>Starvation is any situation where a concurrent process cannot get all the resources it needs to perform work.</strong></p><p>In a livelock, all the concurrent processes are starved equally, and <strong>no work</strong> is accomplished. More broadly, starvation usually implies that there are one or more greedy concurrent process that are unfairly preventing one or more concurrent processes from accomplishing work as efficiently as possible, or maybe at all.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">var</span> sharedLock sync.Mutex</span><br><span class="line"><span class="keyword">const</span> runtime = <span class="number">1</span> * time.Second</span><br><span class="line"></span><br><span class="line">greedyWorker := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> count <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> begin := time.Now(); time.Since(begin) &lt;= runtime &#123;</span><br><span class="line">        sharedLock.Lock()</span><br><span class="line">        time.Sleep(<span class="number">3</span> * time.Nanosecond)</span><br><span class="line">        sharedLock.Unlock()</span><br><span class="line">        count++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"Greedy worker was able to execute %v work loops\n"</span>, count)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">politeWorker := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> count <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> begin := time.Now(); time.Since(begin) &lt;= runtime; &#123;</span><br><span class="line">        sharedLock.Lock()</span><br><span class="line">        time.Sleep(<span class="number">1</span> * time.Nanosecond)</span><br><span class="line">        sharedLock.Unlock()</span><br><span class="line"></span><br><span class="line">        sharedLock.Lock()</span><br><span class="line">        time.Sleep(<span class="number">1</span> * time.Nanosecond)</span><br><span class="line">        sharedLock.Unlock()</span><br><span class="line"></span><br><span class="line">        sharedLock.Lock()</span><br><span class="line">        time.Sleep(<span class="number">1</span> * time.Nanosecond)</span><br><span class="line">        sharedLock.Unlock()</span><br><span class="line"></span><br><span class="line">        count++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"Polite worker was able to execute %v work loops.\n"</span>, count)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">go</span> greedyWorker()</span><br><span class="line"><span class="keyword">go</span> politeWorker()</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br></pre></td></tr></table></figure><p>Note our technique here for identifying the starvation: a metric. Starvation makes for good argument for recording and sampling metrics. One of the ways you can detect and solve starvation is by logging when work is accomplished, and then determining if your rate of work is as high as you expect it.</p><p>If you utilize memory access synchronization, you’ll have to find a balance between preferring coarse-grained synchronization for performance, and fine-grained synchronization for fairness.</p><p><strong>When it comes time to performance tune your application, to start with, I highly recommend you constrain memory access synchronization only to critical sections; if the synchronization becomes a performance problem, you can always broaden the scope.</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang GC</title>
      <link href="/2019/12/13/golang/golang-gc/"/>
      <url>/2019/12/13/golang/golang-gc/</url>
      
        <content type="html"><![CDATA[<h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><p><strong>Garbage Collection is the process of freeing memory space that is not being used.</strong></p><blockquote><p>The garbage collector sees which objects are out of scope and can no longer be referenced, and it frees the memory space they consume.</p></blockquote><p><strong>This process happens in a concurrent manner while a Go program is running.</strong></p><p>The documentation of the Go garbage collector implementation states the following:</p><ul><li><strong>The GC runs concurrently with mutator threads, is type accurate(aka precise), allows multiple GC threads to run in parallel.</strong></li><li><strong>It is a concurrent mark and sweep that uses a write barrier.</strong></li><li><strong>It is non-generational and non-compacting.</strong></li><li><strong>Allocation is done using size segregated per P allocation areas to minimize fragmentation while eliminating locks in the common case.</strong></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"runtime"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printStats</span><span class="params">(mem runtime.MemStats)</span></span> &#123;</span><br><span class="line">    runtime.ReadMemStats(&amp;mem)</span><br><span class="line">    fmt.Println(<span class="string">"mem.Alloc:"</span>, mem.Alloc)</span><br><span class="line">    fmt.Println(<span class="string">"mem.TotalAlloc:"</span>, mem.TotalAlloc)</span><br><span class="line">    fmt.Println(<span class="string">"mem.HeapAlloc:"</span>, mem.HeapAlloc)</span><br><span class="line">    fmt.Println(<span class="string">"mem.NumGC:"</span>, mem.NumGC)</span><br><span class="line">    fmt.Println(<span class="string">"-------"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> mem runtime.MemStats</span><br><span class="line">    printStats(mem)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        s := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">50000000</span>)</span><br><span class="line">        <span class="keyword">if</span> s == <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"Operation failed!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printStats(mem)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        s := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">100000000</span>)</span><br><span class="line">        <span class="keyword">if</span> s == <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">"Operation failed!"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">    printStats(mem)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>There is a trick that allows you to get even more detailed output about the way the Go garbage collector operates, which is illustrated by the next command:</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ GODEBUG=gctrace=1 go run main.go</span><br></pre></td></tr></table></figure><h2 id="The-Tricolor-Algorithms"><a href="#The-Tricolor-Algorithms" class="headerlink" title="The Tricolor Algorithms"></a>The Tricolor Algorithms</h2><p>The operation of the Go garbage collector is based on the <strong>tricolor algorithm.</strong></p><blockquote><p>The tricolor algorithms is not unique to Go, and it can be used in other programming languages as well.</p></blockquote><p>The official name for the algorithms used in Go is the <strong>tricolor mark-and-sweep algorithm</strong>.</p><p>It can work concurrently with the program and uses a <strong>write barrier</strong>.</p><blockquote><p>This means that when a Go program runs, the Go scheduler is responsible for the scheduling of the application and the garbage collector as if the Go scheduler had to deal with a regular application with multiple <strong>goroutines!</strong></p></blockquote><p>The Primary principle behind the tricolor mark-and-sweep algorithm is that <strong>it divides the objects of the heap into three different sets according to their color, which is assigned by algorithm.</strong></p><ul><li>The objects of <strong>black set</strong> are guaranteed to have no pointers to any object of the white set.</li><li>An object in the <strong>white set</strong> can have a pointer to an object of the black, because this has no effect on the operation of the garbage collector</li><li>The objects of the <strong>grey set</strong> might have pointers to some objects of the white set.</li></ul><p><strong>The objects of the white set are candidates for garbage collection.</strong></p><ul><li><strong>No object can go directly from the black set to the white set</strong>, which allows the algorithm to operate and be able to clear the objects in the white set.</li><li><strong>No object of the black set can directly point to an object of the white set.</strong></li></ul><p>Let’s go:</p><ol><li>When the garbage collection begins, <strong>all objects are white</strong> and the <strong>garbage collector visitor all of the root objects and colors them grey.</strong> The roots are the objects that can be directly accessed by the application, <strong>which includes global variables and other things on the stack.</strong></li><li>After this, the garbage collector <strong>picks a grey object</strong>, makes it black, and starts searching to determine if that object has pointers to other objects of the white set.</li><li>When a grey object is being scanned for pointers to other objects, it is colored black. <strong>If that scan discovers that this particular object has one or more pointers to a white object</strong>, it puts that white object in the grey set.</li></ol><p>This process keeps going for as long as objects exist in the grey set. <strong>After that, the objects in the white set are unreachable and their memory space can be reused.</strong></p><p>Therefore, at this point, the elements of the white set are said to be garbage collected.</p><blockquote><p>If an object of the grey set becomes unreachable at some point in a garbage collection cycle, it will not be collected in that garbage collection cycle but rather in the next one!</p></blockquote><p>During this process, the running application is called the <strong>mutator</strong>.</p><p>The mutator runs a small function named <strong>write barrier</strong> that is executed each time a pointer in the heap is modified.</p><p><strong>If the pointer of an object in the heap is modified, which means that this object is now reachable, the write barrier colors it grey and puts it in the grey set.</strong></p><blockquote><p>The mutator is responsible for the invariant that no element of the black set has a pointer to an element of the white set. This is accomplished with the help of the write barrier function. Failing to accomplish this invariant will ruin the garbage collection process, and it will most likely crash your program in an ugly and undesired way.</p></blockquote><p><img src="https://sherlockblaze.com/resources/img/golang/gc-cycle-mastering-go.png" alt="gc-cycle-mastering-go"></p><p>The Go garbage collection can also be applied to variables such as <strong>channel</strong>. When the garbage collector finds out that a channel is unreachable and that the channel variable can no longer be accessed, it will free its resources even if the channel has not closed.</p><blockquote><p>Go allows you to initiate a garbage collection manually by putting a <code>runtime.GC()</code> statement in your Go code.<br>Keep in mind that <code>runtime.GC()</code> will block the caller, and it might block the entire program, especially if you are running a very busy Go program with many objects. This happens mainly because you cannot perform garbage collections while everything else is rapidly changing, as this will not give the garbage collector the opportunity to identify clearly the members of the white, black, and grey sets!<br>This garbage collection status is also called the <strong>garbage collection safe-point.</strong></p></blockquote><h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p>The main concern of the Go garbage collector is <strong>low latency</strong>, which basically means short pauses in its operation in order to have real-time operation.</p><p>What a program does all the time is to create new objects and manipulate existing objects with pointers. This process can end up creating objects that cannot be accessed any longer because no pointers exist that point to these objects.</p><p><strong>Such objects are now garbage waiting for the garbage collector to clean them up and free their memory space.</strong></p><p>The way that the <strong>mark-and-sweep algorithm</strong> works is pretty simple:</p><ul><li>The algorithm stops the program execution(<strong>stop-the-world garbage collector</strong>) in order to visit all of the accessible objects of the heap of a program and marks them.</li><li>It sweeps the inaccessible objects. During the mark phase of the algorithm, each object is marked as white, grey or black.</li><li>The children of a grey object are colored grey, whereas the original grey object is now colored black.</li></ul><p>The sweep phase begins when there are no more grey objects to examine. This technique works because <strong>there are no pointers from the black set to the white set, which is a fundamental invariant of the algorithm.</strong></p><p>Go tries to lower that particular latency by running the garbage collector as a concurrent process and using the tricolor algorithm.</p><p>Other processes can move pointers or create new objects while the garbage collector runs concurrently. As a result, <strong>the principal point that allows the tricolor algorithm to run concurrently is to be able to maintain the fundamental invariant of the mark-and-sweep algorithm-no object of the black set can point to an object of the white set.</strong></p><p><strong>But new objects must go to grey set,</strong> because this way the fundamental invariant of the mark-and-sweep algorithm cannot be altered.</p><p>Additionally, when a pointer of the program is moved, color the object to which the pointer points as grey. Last, each time a pointer is moved, some Go code gets automatically executed, which is the <strong>write barrier</strong> that does some recoloring.</p><p><strong>The latency introduced by the execution of the write barrier code is the price we have to pay for being able to run the garbage collector concurrently.</strong></p><p><a href="https://sherlockblaze.com/resources/file/golang/on-the-fly-gc.pdf">On-the-fly Garbage Collection: An Exercise in Cooperation</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design Pattern in Go (Structural Pattern)</title>
      <link href="/2019/12/06/golang/design-pattern-in-go-structural/"/>
      <url>/2019/12/06/golang/design-pattern-in-go-structural/</url>
      
        <content type="html"><![CDATA[<h2 id="Composite-design-pattern"><a href="#Composite-design-pattern" class="headerlink" title="Composite design pattern"></a>Composite design pattern</h2><p><strong>The Composite design pattern favors composition over inheritance.</strong> All in all, Go doesn’t have inheritance because it doesn’t need it!</p><ul><li><strong>composite_test.go</strong></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> composition</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAthlete_Train</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    athlete := Athlete&#123;&#125;</span><br><span class="line">    athlete.Train()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSwimmer_Swim</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    localSwim := Swim</span><br><span class="line">    swimmer := CompositeSwimmerA&#123;</span><br><span class="line">        MySwim: &amp;localSwim,</span><br><span class="line">    &#125;</span><br><span class="line">    swimmer.MyAthlete.Train()</span><br><span class="line">    (*swimmer.MySwim)()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAnimal_Swim</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    fish := Shark&#123;</span><br><span class="line">        Swim: Swim,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fish.Eat()</span><br><span class="line">    fish.Swim()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSwimmer_Swim2</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    swimmer := CompositeSwimmerB&#123;</span><br><span class="line">        &amp;Athlete&#123;&#125;,</span><br><span class="line">        &amp;SwimmerImplementor&#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    swimmer.Train()</span><br><span class="line">    swimmer.Swim()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTree</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    root := Tree&#123;</span><br><span class="line">        LeafValue: <span class="number">0</span>,</span><br><span class="line">        Right: &amp;Tree&#123;</span><br><span class="line">            LeafValue: <span class="number">5</span>,</span><br><span class="line">            Right:     &amp;Tree&#123;<span class="number">6</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        Left: &amp;Tree&#123;<span class="number">4</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println</span>(root.Right.Right.LeafValue)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSon_GetParentField</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    son := Son&#123;&#125;</span><br><span class="line">    GetParentField(son.P)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>composite.go</strong></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> composition</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Athlete <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Athlete)</span> <span class="title">Train</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"Training"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Swim</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"Swimming!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CompositeSwimmerA <span class="keyword">struct</span> &#123;</span><br><span class="line">    MyAthlete Athlete</span><br><span class="line">    MySwim    *<span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">Trainer</span> <span class="title">interface</span></span> &#123;</span><br><span class="line">    Train()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Swimmer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Swim()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SwimmerImplementor <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SwimmerImplementor)</span> <span class="title">Swim</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"Swimming"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CompositeSwimmerB <span class="keyword">struct</span> &#123;</span><br><span class="line">    Trainer</span><br><span class="line">    Swimmer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Animal)</span> <span class="title">Eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"Eating"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shark <span class="keyword">struct</span> &#123;</span><br><span class="line">    Animal</span><br><span class="line">    Swim <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">Tree</span> <span class="title">struct</span></span> &#123;</span><br><span class="line">    LeafValue <span class="keyword">int</span></span><br><span class="line">    Right     *Tree</span><br><span class="line">    Left      *Tree</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Parent <span class="keyword">struct</span> &#123;</span><br><span class="line">    SomeField <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Son <span class="keyword">struct</span> &#123;</span><br><span class="line">    P Parent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetParentField</span><span class="params">(p Parent)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p.SomeField</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>At this point, you should be really comfortable using the Composite design pattern. It’s very idiomatic Go feature. The Composite design pattern makes our structures predictable but also allows us to create most of the design patterns.</p><h2 id="Adapter-design-pattern"><a href="#Adapter-design-pattern" class="headerlink" title="Adapter design pattern"></a>Adapter design pattern</h2><p><strong>In Go, an adapter will allow us to use something that wasn’t built for a specific task at the beginning.</strong></p><p>The Adapter pattern is very useful when, for example, an interface gets outdated and it’s not possible to replace it easily or fast. Instead, you create a new interface to deal with the current needs of your application, which, under the hood, uses implementations of the old interface.</p><blockquote><p>Just keep in mind that extensibility in code is only possible through the use of design patterns and interface-oriented programming.</p></blockquote><h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><p>The Adapter design pattern will help you fit the needs of two parts of the code that are incompatible at first.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> structural</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LegacyPrinter <span class="keyword">interface</span> &#123;</span><br><span class="line">    Print(s <span class="keyword">string</span>) <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyLegacyPrinter <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *MyLegacyPrinter)</span> <span class="title">Print</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(newMsg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    newMsg = fmt.Sprintf(<span class="string">"Legacy Printer: %s\n"</span>, s)</span><br><span class="line">    <span class="built_in">println</span>(newMsg)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NewPrinter <span class="keyword">interface</span> &#123;</span><br><span class="line">    PrintStored() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PrinterAdapter <span class="keyword">struct</span> &#123;</span><br><span class="line">    oldPrinter LegacyPrinter</span><br><span class="line">    Msg        <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *PrinterAdapter)</span> <span class="title">PrintStored</span><span class="params">()</span> <span class="params">(newMsg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> p.OldPrinter != <span class="literal">nil</span> &#123;</span><br><span class="line">        newMsg = fmt.Sprintf(<span class="string">"Adapter: %s"</span>, p.Msg)</span><br><span class="line">        newMsg = p.OldPrinter.Print(newMsg)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newMsg = p.Msg</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bridge-design-pattern"><a href="#Bridge-design-pattern" class="headerlink" title="Bridge design pattern"></a>Bridge design pattern</h2><p>The Bridge pattern is a design with a slightly cryptic definition from the original Gang of Four book. <strong>It decouples an abstraction from its implementation so that the two can vary independently.</strong> The cryptic explanation just means that you could even decouple the most basic form of functionality: <strong>decouple an object from what it does.</strong></p><p>The Bridge pattern tries to decouple things as usual with design patterns. It decouples abstraction (an object) from its implementation (the thing that the object does). This way, we can change what an object does as much as we want. It also allows us to change the abstracted object while reusing the same implementation.</p><p>The objective of the Bride pattern is to bring flexibility to a struct that change often. Knowing the inputs and outputs of a method, it allows us to change code without knowing too much about it and leaving the freedom for both sides to be modified more easily.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> structural</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PrinterAPI <span class="keyword">interface</span> &#123;</span><br><span class="line">    PrintMessage(<span class="keyword">string</span>) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PrinterAPI1 <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *PrinterAPI1)</span> <span class="title">PrintMessage</span><span class="params">(msg <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s\n"</span>, msg)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PrinterAPI2 <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *PrinterAPI2)</span> <span class="title">PrintMessage</span><span class="params">(msg <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> d.Writer == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.New(<span class="string">"You need to pass an io.Writer to PrinterAPI2"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(d.Writer, <span class="string">"%s"</span>, msg)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PrinterAbstraction <span class="keyword">interface</span> &#123;</span><br><span class="line">    Print() error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NormalPrinter <span class="keyword">struct</span> &#123;</span><br><span class="line">    Msg     <span class="keyword">string</span></span><br><span class="line">    Printer PrinterAPI</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *NormalPrinter)</span> <span class="title">Print</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    c.Printer.PrintMessage(c.Msg)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PacktPrinter <span class="keyword">struct</span> &#123;</span><br><span class="line">    Msg     <span class="keyword">string</span></span><br><span class="line">    Printer PrinterAPI</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *PacktPrinter)</span> <span class="title">Print</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    c.Printer.PrintMessage(fmt.Sprintf(<span class="string">"Message from Packt: %s"</span>, c.Msg))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Proxy-Design-Pattern"><a href="#Proxy-Design-Pattern" class="headerlink" title="Proxy Design Pattern"></a>Proxy Design Pattern</h2><p>The Proxy Pattern usually wraps an object to hide some of its characteristic. These characteristics could be the fact that it is a remote object(remote proxy), a very heavy object such as a very big image or the dump of a terabyte database(virtual proxy), or a restricted access object(protection proxy).</p><h3 id="Objectives-1"><a href="#Objectives-1" class="headerlink" title="Objectives"></a>Objectives</h3><p>The possibilities of the Proxy pattern are many, but in general, they all try to provide the same following functionalities:</p><ul><li>Hide an object behind the proxy so the features can be hidden, restricted, and so on</li><li>Provide a new abstraction layer that is easy to work with, and can be changed easily</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID <span class="keyword">int32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserFinder <span class="keyword">interface</span> &#123;</span><br><span class="line">    FindUser(id <span class="keyword">string</span>) (User, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserList []User</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *UserList)</span> <span class="title">FindUser</span><span class="params">(id <span class="keyword">int32</span>)</span> <span class="params">(User, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(*t); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> (*t)[i].ID) == id &#123;</span><br><span class="line">            <span class="keyword">return</span> (*t)[i], <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> User&#123;&#125;, fmt.Errorf(<span class="string">"User %s could not be found\n"</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *UserList)</span> <span class="title">addUser</span><span class="params">(newUser User)</span></span> &#123;</span><br><span class="line">    *t = <span class="built_in">append</span>(*t, newUser)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserListProxy <span class="keyword">struct</span> &#123;</span><br><span class="line">    MockedDatabase      *UserList</span><br><span class="line">    StackCache          UserList</span><br><span class="line">    StatckSize          <span class="keyword">int</span></span><br><span class="line">    LastSearchUsedCache <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserListProxy)</span> <span class="title">addUserToStack</span><span class="params">(user User)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(u.StackCache) &gt;= u.StatckSize &#123;</span><br><span class="line">        u.StackCache = <span class="built_in">append</span>(u.StackCache[<span class="number">1</span>:], user)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        u.StackCache.addUser(user)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserListProxy)</span> <span class="title">FindUser</span><span class="params">(id <span class="keyword">int32</span>)</span> <span class="params">(User, error)</span></span> &#123;</span><br><span class="line">    user, err := u.StackCache.FindUser(id)</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Returning user from cache"</span>)</span><br><span class="line">        u.LastSearchUsedCache = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> user, <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    user, err = u.MockedDatabase.FindUser(id)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> User&#123;&#125;, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u.addUserToStack(user)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"Returning user from database"</span>)</span><br><span class="line">    u.LastSearchUsedCache = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> user, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Decorator-Design-Pattern"><a href="#Decorator-Design-Pattern" class="headerlink" title="Decorator Design Pattern"></a>Decorator Design Pattern</h2><p><strong>The Decorator design pattern allows you to decorate an already existing type with more functional features without actually touching it.</strong> It uses an approach similar to <strong><em>matryoshka dolls</em></strong>, where you have a small doll that you can put inside a doll of the same shape but bigger, and so on and so forth.</p><p>The Decorator type implements the same interface of the type it decorates, and stores an instance of that type in its members.</p><p>This way, you can stack as many decorators (dolls) as you want by simply storing the old decorator in a field of the new one.</p><h3 id="Objectives-2"><a href="#Objectives-2" class="headerlink" title="Objectives"></a>Objectives</h3><p>When you think about extending legacy code without the risk of breaking something, you should think of the Decorator pattern first.</p><p>So, precisely when are we going to use the Decorator pattern?</p><ul><li>When you need to add functionality to some code that you don’t have access to, or you don’t want to modify to avoid a negative effect on the code, and follow the open/colse principle (like legacy code)</li><li><p>When you want the functionality of an object to be created or altered dynamically, and the number of features is unknown and could grow fast</p></li><li><p><strong>pizza_decorator.go</strong></p></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IngredientAdder <span class="keyword">interface</span> &#123;</span><br><span class="line">    AddIngredient() (<span class="keyword">string</span>, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PizzaDecorator <span class="keyword">struct</span> &#123;</span><br><span class="line">    Ingredient IngredientAdder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *PizzaDecorator)</span> <span class="title">AddIngredient</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Pizza with the following ingredients:"</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Meat <span class="keyword">struct</span> &#123;</span><br><span class="line">    Ingredient IngredientAdder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Meat)</span> <span class="title">AddIngredient</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> m.Ingredient == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>, errors.New(<span class="string">"An IngredientAdder is needed on the Ingredient field of the Meat"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s, err := m.Ingredient.AddIngredient()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%s %s,"</span>, s, <span class="string">"meat"</span>), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Onion <span class="keyword">struct</span> &#123;</span><br><span class="line">    Ingredient IngredientAdder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Onion)</span> <span class="title">AddIngredient</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> o.Ingredient == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>, errors.New(<span class="string">"An ingredientAdder is needed on the Ingredient field of the Onion"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    s, err := o.Ingredient.AddIngredient()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%s %s,"</span>, s, <span class="string">"onion"</span>), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>server_decorator.go</strong></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyServer <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MyServer)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintln(w, <span class="string">"Hello Decorator!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LoggerMiddleware <span class="keyword">struct</span> &#123;</span><br><span class="line">    Handler   http.Handler</span><br><span class="line">    LogWriter io.Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LoggerMiddleware)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintf(l.LogWriter, <span class="string">"Request URI: %s\n"</span>, r.RequestURI)</span><br><span class="line">    fmt.Fprintf(l.LogWriter, <span class="string">"Host: %s\n"</span>, r.Host)</span><br><span class="line">    fmt.Fprintf(l.LogWirter, <span class="string">"Content Length: %d\n"</span>, r.ContentLength)</span><br><span class="line">    fmt.Fprintf(l.LogWriter, <span class="string">"Method: %s\n"</span>, r.Method)</span><br><span class="line">    fmt.Fprintf(l.LogWriter, <span class="string">"--------------------\n"</span>)</span><br><span class="line">    l.Handler.ServeHttp(w, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SimpleAuthMiddleware <span class="keyword">struct</span> &#123;</span><br><span class="line">    Handler  http.Handler</span><br><span class="line">    User     <span class="keyword">string</span></span><br><span class="line">    Password <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SimpleAuthMiddleware)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    user, pass, ok := r.BasicAuth()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ok &#123;</span><br><span class="line">        <span class="keyword">if</span> user == s.User &amp;&amp; pass == s.Password &#123;</span><br><span class="line">            s.Handler.ServeHTTP(w, r)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fmt.Fprintf(w, <span class="string">"User or Password incorrect\n"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Fprintln(w, <span class="string">"Error trying to retrieve data from Basic auth"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Enter the type number of server you want to launch from the"</span> + <span class="string">" following:"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"1.- Plain server"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"2.- Server with logging"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"3.- Server with logging and authentication"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> selection <span class="keyword">int</span></span><br><span class="line">    fmt.Fscanf(os.Stdin, <span class="string">"%d"</span>, &amp;selection)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mySuperServer http.Handler</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> selection &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        mySuperServer = <span class="built_in">new</span>(MyServer)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        mySuperServer = &amp;LoggerMiddleware&#123;</span><br><span class="line">            Handler:   <span class="built_in">new</span>(MyServer),</span><br><span class="line">            LogWriter: os.Stdout,</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">var</span> user, password <span class="keyword">string</span></span><br><span class="line">        fmt.Println(<span class="string">"Enter user and password separated by a space"</span>)</span><br><span class="line">        fmt.Fscanf(os.Stdin, <span class="string">"%s %s"</span>, &amp;user, &amp;password)</span><br><span class="line"></span><br><span class="line">        mySuperServer = &amp;LoggerMiddleware&#123;</span><br><span class="line">            Handler: &amp;SimpleAuthMiddleware&#123;</span><br><span class="line">                Handler:  <span class="built_in">new</span>(MyServer),</span><br><span class="line">                User:     user,</span><br><span class="line">                Password: password,</span><br><span class="line">            &#125;,</span><br><span class="line">            LogWriter: os.Stdout,</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        mySuperServer = <span class="built_in">new</span>(MyServer)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    http.Handle(<span class="string">"/"</span>, mySuperServer)</span><br><span class="line"></span><br><span class="line">    log.Fatal(http.ListenAndServe(:<span class="number">8080</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the Decorator pattern, we decorate a type dynamically. This means that the decoration may or may not be there, or it may be composed of one or many types. If you remember, the Proxy pattern wraps a type in a similar fashion, but it does so at compile time and it’s more like a way to access some type.</p><p>At the same time, a decorator might implement the entire interface that the type it decorates also implements or not. So you can have an interface with 10 methods and a decorator that just implements one of them and it will still be valid. This is a very powerful feature but also very prone to undesired behaviors at runtime if you forget to implement any interface method.</p><p>In this aspect, you may think that the Proxy pattern is less flexible, and it is. But the Decorator pattern is weaker, as you could have errors at runtime, which you can avoid at compile time by using the Proxy pattern. <strong>Just keep in mind that the Decorator is commonly used when you want to add functionality to an object at runtime, like in our web server.</strong> It’s a compromise between what you need and what you want to sacrifice to achieve it.</p><h2 id="Facade-Design-Pattern"><a href="#Facade-Design-Pattern" class="headerlink" title="Facade Design Pattern"></a>Facade Design Pattern</h2><p><strong>Proxy pattern was a way to wrap an type to hide some of its features of complexity from the user.</strong></p><p><strong>Imagine that we group many proxies in a single point such as a file or a library.</strong> This could be Facade patter.</p><p>A facade, in architectural terms, is the front wall that hides the rooms and corridors of a building. It protects its inhabitants from code and rain, and provides them privacy. It orders and divides the dwellings.</p><p>The Facade design pattern shields the code from unwanted access, orders some calls, and hides the complexity scope from the user.</p><h3 id="Objectives-3"><a href="#Objectives-3" class="headerlink" title="Objectives"></a>Objectives</h3><p>You use Facade when you want to hide the complexity of some tasks, especially when most of them share utilities(such as authentication in an API). A library is a form of facade, where someone has to provide some methods for a developer to do certain things in a friendly way. This way, if a developer needs to use your library, he doesn’t need to know all the inner tasks to retrieve the result he/she wants.</p><ul><li>When you want to decrease the complexity of some parts of our code. You hide that complexity behind the facade by providing a more easy-to-use method.</li><li>When you want to group actions that are cross-related in a single place.</li><li>When you want to build a library so that others can use your products without worrying about how it all works.</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> openWeatherMap</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">    <span class="string">"io/ioutil"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CurrentWeatherDataRetriever <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetByGeoCoordinates(lat, lon <span class="keyword">float32</span>) (*Weather, error)</span><br><span class="line">    GetByCityAndCountryCode(city, countryCode <span class="keyword">string</span>) (*Weather, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CurrentWeatherData <span class="keyword">struct</span> &#123;</span><br><span class="line">    APIkey <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Weather <span class="keyword">struct</span> &#123;</span><br><span class="line">    Coord <span class="keyword">struct</span> &#123;</span><br><span class="line">        Lon <span class="keyword">float32</span> <span class="string">`json:"lon"`</span></span><br><span class="line">        Lat <span class="keyword">float32</span> <span class="string">`json:"lat"`</span></span><br><span class="line">    &#125; <span class="string">`json:"coord"`</span></span><br><span class="line">    Weather []<span class="keyword">struct</span> &#123;</span><br><span class="line">        Id          <span class="keyword">int</span>    <span class="string">`json:"id"`</span></span><br><span class="line">        Main        <span class="keyword">string</span> <span class="string">`json:"main"`</span></span><br><span class="line">        Description <span class="keyword">string</span> <span class="string">`json:"description"`</span></span><br><span class="line">        Icon        <span class="keyword">string</span> <span class="string">`json:"icon"`</span></span><br><span class="line">    &#125; <span class="string">`json:"weather"`</span></span><br><span class="line">    Base <span class="keyword">string</span> <span class="string">`json:"base"`</span></span><br><span class="line">    Main <span class="keyword">struct</span> &#123;</span><br><span class="line">        Temp     <span class="keyword">float32</span> <span class="string">`json:"temp"`</span></span><br><span class="line">        Pressure <span class="keyword">float32</span> <span class="string">`json:"pressure"`</span></span><br><span class="line">        Humidity <span class="keyword">float32</span> <span class="string">`json:"humidity"`</span></span><br><span class="line">        TempMin  <span class="keyword">float32</span> <span class="string">`json:"temp_min"`</span></span><br><span class="line">        TempMax  <span class="keyword">float32</span> <span class="string">`json:"temp_max"`</span></span><br><span class="line">    &#125; <span class="string">`json:"main"`</span></span><br><span class="line">    Wind <span class="keyword">struct</span> &#123;</span><br><span class="line">        Speed <span class="keyword">float32</span> <span class="string">`json:"speed"`</span></span><br><span class="line">        Deg   <span class="keyword">float32</span> <span class="string">`json:"deg"`</span></span><br><span class="line">    &#125; <span class="string">`json:"wind"`</span></span><br><span class="line">    Clouds <span class="keyword">struct</span> &#123;</span><br><span class="line">        All <span class="keyword">int</span> <span class="string">`json:"all"`</span></span><br><span class="line">    &#125; <span class="string">`json:"clouds"`</span></span><br><span class="line">    Rain <span class="keyword">struct</span> &#123;</span><br><span class="line">        ThreeHours <span class="keyword">float32</span> <span class="string">`json:"3h"`</span></span><br><span class="line">    &#125; <span class="string">`json:"rain"`</span></span><br><span class="line">    Dt  <span class="keyword">uint32</span> <span class="string">`json:"dt"`</span></span><br><span class="line">    Sys <span class="keyword">struct</span> &#123;</span><br><span class="line">        Type    <span class="keyword">int</span>     <span class="string">`json:"type"`</span></span><br><span class="line">        ID      <span class="keyword">int</span>     <span class="string">`json:"id"`</span></span><br><span class="line">        Message <span class="keyword">float32</span> <span class="string">`json:"message"`</span></span><br><span class="line">        Country <span class="keyword">string</span>  <span class="string">`json:"country"`</span></span><br><span class="line">        Sunrise <span class="keyword">int</span>     <span class="string">`json:"sunrise"`</span></span><br><span class="line">        Sunset  <span class="keyword">int</span>     <span class="string">`json:"sunset"`</span></span><br><span class="line">    &#125; <span class="string">`json:"sys"`</span></span><br><span class="line">    ID   <span class="keyword">int</span>    <span class="string">`json:"id"`</span></span><br><span class="line">    Name <span class="keyword">string</span> <span class="string">`json:"name"`</span></span><br><span class="line">    Cod  <span class="keyword">int</span>    <span class="string">`json:"cod"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    commonRequestPrefix = <span class="string">"http://api.openweathermap.org/data/2.5/"</span></span><br><span class="line">    weatherByCityName = commonRequestPrefix + <span class="string">"weather?q=%s,%s&amp;APPID=%s"</span></span><br><span class="line">    weatherByGeographicalCoordinates = commonRequestPrefix + <span class="string">"weather?lat=%f&amp;lon=%f&amp;APPID=%s"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CurrentWeatherData)</span> <span class="title">GetByGeoCoordinates</span><span class="params">(lat, lon <span class="keyword">float32</span>)</span> <span class="params">(weather *Weather, err error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.doRequest(fmt.Sprintf(weatherByGeographicalCoordinates, lat, lon, c.APIkey))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CurrentWeatherData)</span> <span class="title">GetByCityAndCountryCode</span><span class="params">(city, countryCode <span class="keyword">string</span>)</span> <span class="params">(weather *Weather, err error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.doRequest(fmt.Sprintf(weatherByCityName, city, countryCode, c.APIkey))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CurrentWeatherData)</span> <span class="title">responseParser</span><span class="params">(body io.Reader)</span> <span class="params">(*Weather, error)</span></span> &#123;</span><br><span class="line">    w := <span class="built_in">new</span>(Weather)</span><br><span class="line">    err := json.NewDecoder(body).Decode(w)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> w, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *CurrentWeatherData)</span> <span class="title">doRequest</span><span class="params">(uri <span class="keyword">string</span>)</span> <span class="params">(weather *Weather, err error)</span></span> &#123;</span><br><span class="line">    client := &amp;http.Client&#123;&#125;</span><br><span class="line">    req, err := http.NewRequest(<span class="string">"GET"</span>, uri, <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    req.Header.Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line"></span><br><span class="line">    resp, err := client.Do(req)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> resp.StatusCode != <span class="number">200</span> &#123;</span><br><span class="line">        byt, errMsg := ioutil.ReadAll(resp.Body)</span><br><span class="line">        <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">        <span class="keyword">if</span> errMsg == <span class="literal">nil</span> &#123;</span><br><span class="line">            errMsg = fmt.Errorf(<span class="string">"%s"</span>, <span class="keyword">string</span>(byt))</span><br><span class="line">        &#125;</span><br><span class="line">        err = fmt.Errorf(<span class="string">"Status code was %d, aborting. Error message was:\n%s\n"</span>, resp.StatusCode, errMsg)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    weather, err = o.responseParser(resp.Body)</span><br><span class="line">    resp.Body.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Flyweight-Design-Pattern"><a href="#Flyweight-Design-Pattern" class="headerlink" title="Flyweight Design Pattern"></a>Flyweight Design Pattern</h2><p>Flyweight design pattern is very commonly used in computer graphics and the video game industry, but not so much in enterprise applications.</p><p><strong>Flyweight is a pattern which allows sharing the state of a heavy object between many instance of some type.</strong></p><p>Imagine that you have to create and store too many objects of some heavy type that are fundamentally equal. You’ll run out of memory pretty quickly.</p><p>This problem can be easily solved with the Flyweight pattern, <strong>with additional help of the Factory pattern.</strong></p><h3 id="Objectives-4"><a href="#Objectives-4" class="headerlink" title="Objectives"></a>Objectives</h3><p>Thanks to the Flyweight pattern, we can share all possible states of objects in a single common object, and thus minimize object creation by using pointers to already created objects.</p><blockquote><p>To give an example, we are going to simulate something that you find on betting webpages. Imagine the final match of the European championship, which is viewed by millions of people across the continent.<br>Now imagine that we own a betting webpage, where we provide historical information about every team in Europe. This is plenty of information, which is usually stored in some distributed database, and each team has, literally, megabytes of information about their players, matches, championships, and so on.<br>If a million users access information about a team and a new instance of the information is created for each user querying for historical data, we will run out of memory in the blink of an eye. With the Proxy solution, we could make a cache of the <strong><em>n</em></strong> most recent searches to speed up queries, but if we return a clone for every team, we will still get short on memory(but faster thanks to our cache).<br>Instead, we will store each team’s information just once, and we will deliver references to them to the users. So, if we face a million users trying to access information about a match, we will actually just have two teams in memory with a million pointers to the same memory direction.</p></blockquote><ul><li><strong>flyweight.go</strong></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> flyweight</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    TEAM_A = <span class="literal">iota</span></span><br><span class="line">    TEAM_B</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Player <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name         <span class="keyword">string</span></span><br><span class="line">    Surname      <span class="keyword">string</span></span><br><span class="line">    PreviousTeam <span class="keyword">uint64</span></span><br><span class="line">    Photo        []<span class="keyword">byte</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HistoricalData <span class="keyword">struct</span> &#123;</span><br><span class="line">    Year          <span class="keyword">uint8</span></span><br><span class="line">    LeagueResults []Match</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Team <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID             <span class="keyword">uint64</span></span><br><span class="line">    Name           <span class="keyword">string</span></span><br><span class="line">    Shield         []<span class="keyword">byte</span></span><br><span class="line">    Players        []Player</span><br><span class="line">    HistoricalData []HistoricalData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Match <span class="keyword">struct</span> &#123;</span><br><span class="line">    Date          time.Time</span><br><span class="line">    VisitorID     <span class="keyword">uint64</span></span><br><span class="line">    LocalID       <span class="keyword">uint64</span></span><br><span class="line">    LocalScore    <span class="keyword">byte</span></span><br><span class="line">    VisitorScore  <span class="keyword">byte</span></span><br><span class="line">    LocalShoots   <span class="keyword">uint16</span></span><br><span class="line">    VisitorShoots <span class="keyword">uint16</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getTeamFactory</span><span class="params">(team <span class="keyword">int</span>)</span> <span class="title">Team</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> team &#123;</span><br><span class="line">    <span class="keyword">case</span> TEAM_B:</span><br><span class="line">        <span class="keyword">return</span> TEAM&#123;</span><br><span class="line">            ID:   <span class="number">2</span>,</span><br><span class="line">            Name: <span class="string">"TEAM_B"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> Team&#123;</span><br><span class="line">            ID:   <span class="number">1</span>,</span><br><span class="line">            Name: <span class="string">"TEAM_A"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTeamFactory</span><span class="params">()</span> <span class="title">teamFlyweightFactory</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> teamFlyweightFactory&#123;</span><br><span class="line">        createdTeams: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]*Team, <span class="number">0</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> teamFlyweightFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">    createdTeams <span class="keyword">map</span>[<span class="keyword">int</span>]*Team</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *teamFlyweightFactory)</span> <span class="title">GetTeam</span><span class="params">(teamName <span class="keyword">int</span>)</span> *<span class="title">Team</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> t.createdTeams[teamName] != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t.createdTeams[teamName]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    team := getTeamFactory(teamName)</span><br><span class="line">    t.createdTeams[teamName] = &amp;team</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> t.createdTeams[teamName]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *teamFlyweightFactory)</span> <span class="title">GetNumberOfObjects</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(t.createdTeams)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>flyweight_test.go</strong></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> flyweight</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTeamFlyweightFactory_GetTeam</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    factory := NewTeamFactory()</span><br><span class="line"></span><br><span class="line">    teamA1 := factory.GetTeam(TEAM_A)</span><br><span class="line">    <span class="keyword">if</span> teamA1 == <span class="literal">nil</span> &#123;</span><br><span class="line">        t.Error(<span class="string">"The pointer to the TEAM_A was nil"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    teamA2 := factory.GetTeam(TEAM_A)</span><br><span class="line">    <span class="keyword">if</span> teamA2 == <span class="literal">nil</span> &#123;</span><br><span class="line">        t.Error(<span class="string">"The pointer to the TEAM_A was nil"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> teamA1 != teamA2 &#123;</span><br><span class="line">        t.Error(<span class="string">"TEAM_A objects weren't the same"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> factory.GetNumberOfObjects() != <span class="number">1</span> &#123;</span><br><span class="line">        t.Errorf(<span class="string">"The number of objects created was not 1: %d\n"</span>, factory.GetNumberOfObjects())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_HighVolume</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    factory := NewTeamFactory()</span><br><span class="line"></span><br><span class="line">    teams := <span class="built_in">make</span>([]*Team, <span class="number">500000</span>*<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++ &#123;</span><br><span class="line">        teams[i] = factory.GetTeam(TEAM_A)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">500000</span>; i &lt; <span class="number">2</span>*<span class="number">500000</span>; i++ &#123;</span><br><span class="line">        teams[i] = factory.GetTeam(TEAM_B)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> factory.GetNumberOfObjects() != <span class="number">2</span> &#123;</span><br><span class="line">        t.Errorf(<span class="string">"The number of objects created was not 2: %d\n"</span>, factory.GetNumberOfObjects())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"Pointer %d points to %p and is located in %p\n"</span>, i, teams[i], &amp;teams[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="What’s-the-difference-between-Singleton-and-Flyweight"><a href="#What’s-the-difference-between-Singleton-and-Flyweight" class="headerlink" title="What’s the difference between Singleton and Flyweight?"></a>What’s the difference between Singleton and Flyweight?</h3><p>With the Singleton pattern, we ensure that the same type is created only once. Also, the Singleton pattern is a Creational pattern. With Flyweight, which is a Structural pattern, <strong>we aren’t worried about how the objects are created, but about how to structure a type to contain heavy information in a light way.</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design Pattern in Go (Behavioral Pattern)</title>
      <link href="/2019/12/06/golang/design-pattern-in-go-behavioral/"/>
      <url>/2019/12/06/golang/design-pattern-in-go-behavioral/</url>
      
        <content type="html"><![CDATA[<h2 id="Strategy-Design-Pattern"><a href="#Strategy-Design-Pattern" class="headerlink" title="Strategy Design Pattern"></a>Strategy Design Pattern</h2><p><strong>The Strategy Pattern uses different algorithms to achieve some specific functionality.</strong> These algorithms are hidden behind an interface and, of course, they must be interchangeable.</p><h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><p>The pattern should do the following:</p><ul><li><strong>Provide a few algorithms to achieve some specific functionality.</strong></li><li><p><strong>All types achieve the same functionality in a different way but the client of the strategy isn’t affected.</strong></p></li><li><p><strong>example-1</strong></p></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"flag"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"image"</span></span><br><span class="line">    <span class="string">"image/color"</span></span><br><span class="line">    <span class="string">"image/draw"</span></span><br><span class="line">    <span class="string">"image/jpeg"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OutputStrategy <span class="keyword">interface</span> &#123;</span><br><span class="line">    Draw() error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TextSquare <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *TextSquare)</span> <span class="title">Draw</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">"Circle"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ImageSquare <span class="keyword">struct</span> &#123;</span><br><span class="line">    DestinationFilePath <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t ImageSquare)</span> <span class="title">Draw</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    width := <span class="number">800</span></span><br><span class="line">    height := <span class="number">600</span></span><br><span class="line"></span><br><span class="line">    bgColor := image.Uniform&#123;color.RGBA&#123;R: <span class="number">70</span>, G: <span class="number">70</span>, B: <span class="number">70</span>, A: <span class="number">0</span>&#125;&#125;</span><br><span class="line">    origin := image.Point&#123;<span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">    quality := &amp;jpeg.Options&#123;Quality: <span class="number">75</span>&#125;</span><br><span class="line"></span><br><span class="line">    bgRectangle := image.NewRGBA(image.Rectangle&#123;</span><br><span class="line">        Min: origin,</span><br><span class="line">        Max: image.Point&#123;X: width, Y: height&#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    draw.Draw(bgRectangle, bgRectangle.Bounds(), &amp;bgColor, origin, draw.Src)</span><br><span class="line"></span><br><span class="line">    squareWidth := <span class="number">200</span></span><br><span class="line">    squareHeight := <span class="number">200</span></span><br><span class="line">    squareColor := image.Uniform&#123;color.RGBA&#123;R: <span class="number">255</span>, G: <span class="number">0</span>, B: <span class="number">0</span>, A: <span class="number">1</span>&#125;&#125;</span><br><span class="line">    square := image.Rect(<span class="number">0</span>, <span class="number">0</span>, squareWidth, squareHeight)</span><br><span class="line">    square = square.Add(image.Point&#123;</span><br><span class="line">        X: (width / <span class="number">2</span>) - (squareWidth / <span class="number">2</span>),</span><br><span class="line">        Y: (width / <span class="number">2</span>) - (squareHeight / <span class="number">2</span>),</span><br><span class="line">    &#125;)</span><br><span class="line">    squareImg := image.NewRGBA(square)</span><br><span class="line"></span><br><span class="line">    draw.Draw(bgRectangle, squareImg.Bounds(), &amp;squareColor, origin, draw.Src)</span><br><span class="line"></span><br><span class="line">    w, err := os.Create(t.DestinationFilePath)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"Error opening image"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> w.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err = jpeg.Encode(w, bgRectangle, quality); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"Error writing image to disk"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> output = flag.String(<span class="string">"output"</span>, <span class="string">"console"</span>, <span class="string">"The output to use between 'console' and 'image' file"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    flag.Parse()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> activeStrategy OutputStrategy</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> *output &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"console"</span>:</span><br><span class="line">        activeStrategy = &amp;TextSquare&#123;&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"image"</span>:</span><br><span class="line">        activeStrategy = &amp;ImageSquare&#123;<span class="string">"/tmp/image.jpg"</span>&#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        activeStrategy = &amp;TextSquare&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err := activeStrategy.Draw()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design Pattern in Go (Creational Pattern)</title>
      <link href="/2019/12/06/golang/design-pattern-in-go-creational/"/>
      <url>/2019/12/06/golang/design-pattern-in-go-creational/</url>
      
        <content type="html"><![CDATA[<h2 id="The-Singleton-Pattern"><a href="#The-Singleton-Pattern" class="headerlink" title="The Singleton Pattern"></a>The Singleton Pattern</h2><p>It will provide you with a single instance of an object, and guarantee that there are no duplicates.</p><p>At the first call to use the instance, it’s created and then reused between all the parts in the application that need to use that particular behavior.</p><p>You’ll use the Singleton pattern in many different situations. For example:</p><ul><li>When you want to use the same connection to a database to make every query</li><li>When you open a <strong>Secure Shell(SSh)</strong> connection to a server to do a few tasks, and don’t want to reopen the connection for each task</li><li>If you need to limit the access to some variable or space, you use a Singleton as the door to this variable</li><li>If you need to limit the number of calls to some places, you create a Singleton instance to make the calls in the accepted window</li></ul><p>The possibilities are endless, and we have just mentioned some of them.</p><h3 id="Objectives"><a href="#Objectives" class="headerlink" title="Objectives"></a>Objectives</h3><p>As a general guide, we consider using the Singleton pattern when the following rule applies:</p><ul><li>We need a single, shared value, of some particular type.</li><li>We need to restrict object creation of some type to a single unit along the entire program.</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> creational</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> singleton <span class="keyword">struct</span> &#123;</span><br><span class="line">    count <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance *singleton</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span> *<span class="title">singleton</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> install == <span class="literal">nil</span> &#123;</span><br><span class="line">        instance = <span class="built_in">new</span>(singleton)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *singleton)</span> <span class="title">AddOne</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    s.count++</span><br><span class="line">    <span class="keyword">return</span> s.count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *singleton)</span> <span class="title">GetCount</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Just keep in mind that the Singleton pattern will give you the power to have a unique instance of some struct in your application and that no package can create any clone of this struct.<br>With Singleton, you are also hiding the complexity of creating the object, in case it requires some computation, and the pitfall of creating it every time you need an instance of it if all of them are similar. All this code writing, checking if the variable already exists, and storage, are encapsulated in the singleton in the singleton and you won’t need to repeat it everywhere if you use a global variable.<br><strong>The implementation up there is not thread safe</strong></p></blockquote><h2 id="The-Builder-Design-Pattern"><a href="#The-Builder-Design-Pattern" class="headerlink" title="The Builder Design Pattern"></a>The Builder Design Pattern</h2><p><strong>Reusing an algorithm to create many implementations of an interface.</strong></p><p>The Builder Pattern helps us construct complex objects without directly instantiating their struct, or writing the logic they require. Imagine an object that could have dozens of fields that are more complex structs themselves. Now Imagine that you have many objects with these characteristics, and you could have more. We don’t want to write the logic to create all these objects in the package that just needs to use the objects.</p><p>You could also have an object that is composed of many objects, something that’s really idiomatic in Go, as it doesn’t support inheritance.</p><p>At the same time, you could be using the same technique to create many types of objects. For example, you’ll use almost the same technique to build a car as you would build a bus, except that they’ll be different sizes and number of seats, so <strong>why don’t we reuse the construction process?</strong></p><h3 id="Objectives-1"><a href="#Objectives-1" class="headerlink" title="Objectives"></a>Objectives</h3><p>A Builder design pattern tries to:</p><ul><li>Abstract complex creations so that object creation is separated from the object user</li><li>Create an object step by step by filling its fields and creating the embedded objects</li><li>Reuse the object creation algorithm between many objects</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> creational</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> BuildProcess <span class="keyword">interface</span> &#123;</span><br><span class="line">    SetWheels() BuildProcess</span><br><span class="line">    SetSeats() BuildProcess</span><br><span class="line">    SetStructure() BuildProcess</span><br><span class="line">    GetVehicle() VehicleProduct</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Director</span></span><br><span class="line"><span class="keyword">type</span> MenufacturingDirector <span class="keyword">struct</span> &#123;</span><br><span class="line">    builder BuildProcess</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *ManufacturingDirector)</span> <span class="title">Construct</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f.builder.SetSeats().SetStructure().SetWheels()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *ManufacturingDirector)</span> <span class="title">SetBuilder</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f.builder = b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Product</span></span><br><span class="line"><span class="keyword">type</span> VehicleProduct <span class="keyword">struct</span> &#123;</span><br><span class="line">    Wheels    <span class="keyword">int</span></span><br><span class="line">    Seats     <span class="keyword">int</span></span><br><span class="line">    Structure <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A Builder of type car</span></span><br><span class="line"><span class="keyword">type</span> CarBuilder <span class="keyword">struct</span> &#123;</span><br><span class="line">    v VehicleProduct</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CarBuilder)</span> <span class="title">SetWheels</span><span class="params">()</span> <span class="title">BuildProcess</span></span> &#123;</span><br><span class="line">    c.v.Wheels = <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CarBuilder)</span> <span class="title">SetSeats</span><span class="params">()</span> <span class="title">BuildProcess</span></span> &#123;</span><br><span class="line">    c.v.Seats = <span class="number">5</span></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CarBuilder)</span> <span class="title">SetStructure</span><span class="params">()</span> <span class="title">BuildProcess</span></span> &#123;</span><br><span class="line">    c.v.Structure = <span class="string">"Car"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CarBuilder)</span> <span class="title">GetVehicle</span><span class="params">()</span> <span class="title">VehicleProduct</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A builder of type motorbike</span></span><br><span class="line"><span class="keyword">type</span> BikeBuilder <span class="keyword">struct</span> &#123;</span><br><span class="line">    v VehicleProduct</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *BikeBuilder)</span> <span class="title">SetWheels</span><span class="params">()</span> <span class="title">BuildProcess</span></span> &#123;</span><br><span class="line">    b.v.Wheels = <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *BikeBuilder)</span> <span class="title">SetSeats</span><span class="params">()</span> <span class="title">BuildProcess</span></span> &#123;</span><br><span class="line">    b.v.Seats = <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *BikeBuilder)</span> <span class="title">SetStructure</span><span class="params">()</span> <span class="title">BuildProcess</span></span> &#123;</span><br><span class="line">    b.v.Structure = <span class="string">"motorbike"</span></span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *BikeBuilder)</span> <span class="title">GetVehicle</span><span class="params">()</span> <span class="title">VehicleProduct</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b.v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A builder of type bus</span></span><br><span class="line"><span class="keyword">type</span> BusBuilder <span class="keyword">struct</span> &#123;</span><br><span class="line">    v VehicleProduct</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *BusBuilder)</span> <span class="title">SetWheels</span><span class="params">()</span> <span class="title">BuildProcess</span></span> &#123;</span><br><span class="line">    b.v.Wheels = <span class="number">8</span></span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *BusBuilder)</span> <span class="title">SetSeats</span><span class="params">()</span> <span class="title">BuildProcess</span></span> &#123;</span><br><span class="line">    b.v.Seats = <span class="number">30</span></span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *BusBuilder)</span> <span class="title">SetStructure</span><span class="params">()</span> <span class="title">BuildProcess</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *BusBuilder)</span> <span class="title">GetVehicle</span><span class="params">()</span> <span class="title">VehicleProduct</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b.v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Wrapping-up-the-Builder-design-pattern"><a href="#Wrapping-up-the-Builder-design-pattern" class="headerlink" title="Wrapping up the Builder design pattern"></a>Wrapping up the Builder design pattern</h3><p>The Builder design pattern helps us maintain an unpredictable number of products by using a common construction algorithm that is used by the director. The construction process is always abstracted from the user of the product.</p><p>At the same time, having a defined construction pattern helps when a newcomer to our source code needs to add a new product to the pipeline.</p><h2 id="Factory-method"><a href="#Factory-method" class="headerlink" title="Factory method"></a>Factory method</h2><p><strong>delegating the creation of different types of payment</strong></p><p>Its purpose is to abstract the user from the knowledge of the struct he needs to achieve for a specific purpose, such as retrieving some value, maybe from a web service or database.<br>The user only needs an interface that provides him this value. By delegating this decision to a Factory, this Factory can provide an interface that fits the user needs.</p><p>When using the Factory method design pattern, we gain an extra layer of encapsulation so that our program can grow in a controlled environment. With the Factory method, we delegate the creation of families of objects to a different package or object to abstract us from the knowledge of the pool of possible objects we could use.</p><h3 id="Objectives-2"><a href="#Objectives-2" class="headerlink" title="Objectives"></a>Objectives</h3><p>After the previous description, the following objectives of the Factory Method design pattern must be clear to you:</p><ul><li>Delegating the creation of new instances of structures to a different part of the program</li><li>Working at the interface level instead of with concrete implementations</li><li>Grouping families of objects to obtain a family object creator</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> creational</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PaymentMethod <span class="keyword">interface</span> &#123;</span><br><span class="line">    Pay(amount <span class="keyword">float32</span>) <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Cash      = <span class="number">1</span></span><br><span class="line">    DebitCard = <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetPaymentMethod</span><span class="params">(m <span class="keyword">int</span>)</span> <span class="params">(PaymentMethod, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> m &#123;</span><br><span class="line">    <span class="keyword">case</span> Cash:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(CashPM), <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> DebitCard:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(NewDebitCardPM), <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(fmt.Sprintf(<span class="string">"Payment method %d not recognized\n"</span>), m)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CashPM <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="keyword">type</span> DebitCardPM <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CashPM)</span> <span class="title">Pay</span><span class="params">(amount <span class="keyword">float32</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%0.2f payed using cash\n"</span>, amount)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *DebitCardPM)</span> <span class="title">Pay</span><span class="params">(amount <span class="keyword">float32</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%0.2f payed using debit card\n"</span>, amount)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NewDebitCardPM <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *NewDebitCardPM)</span> <span class="title">Pay</span><span class="params">(amount <span class="keyword">float32</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%0.2f payed using debit card(new)\n"</span>, amount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Abstract-Factory"><a href="#Abstract-Factory" class="headerlink" title="Abstract Factory"></a>Abstract Factory</h2><p><strong>A factory of factories.</strong></p><p>The Abstract Factory design pattern is a new layer of grouping to achieve a bigger(and more complex) composite object, which is used through its interfaces.<br>The idea behind grouping objects in families and grouping families is to have big factories that can be interchangeable and can grow more easily. <strong>In the early stages of development, it is also easier to work with factories and abstract factories than to wait until all concrete implementations are done to start your code.</strong></p><h3 id="Objectives-3"><a href="#Objectives-3" class="headerlink" title="Objectives"></a>Objectives</h3><p>Grouping related families of objects is very convenient when your object number is growing so much that creating a unique point to get them all seems the only way to gain the flexibility of the runtime object creation.</p><ul><li>Provide a new layer of encapsulation for Factory methods that return a common interface for all factories</li><li><p>Group common factories into a super Factory (also called a factory of factories)</p></li><li><p><strong>vehicle_factory.go</strong></p></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abstract_factory</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> VehicleFactory <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetVehicle(v <span class="keyword">int</span>) (Vehicle, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    CarFactoryType       = <span class="number">1</span></span><br><span class="line">    MotorbikeFactoryType = <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetVehicleFactory</span><span class="params">(f <span class="keyword">int</span>)</span> <span class="params">(VehicleFactory, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> f &#123;</span><br><span class="line">    <span class="keyword">case</span> CarFactoryType:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(CarFactoryType), <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> MotorbikeFactoryType:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(MotorbikeFactoryType), <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(fmt.Sprintf(<span class="string">"Factory with id %d not recognized\n"</span>, f))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>car_factory.go</strong></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abstract_factory</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    LuxuryCarType   = <span class="number">1</span></span><br><span class="line">    FamiliarCarType = <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CarFactory <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CarFactory)</span> <span class="title">GetVehicle</span><span class="params">(v <span class="keyword">int</span>)</span> <span class="params">(Vehicle, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> v &#123;</span><br><span class="line">    <span class="keyword">case</span> LuxuryCarType:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(LuxuryCar), <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> FamiliarCarType:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(FamiliarCar), <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(fmt.Sprintf(<span class="string">"Vehicle of type %d not recognized\n"</span>, v))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abstract_factory</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    SportMotorbikeType  = <span class="number">1</span></span><br><span class="line">    CruiseMotorbikeType = <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MotorbikeFactory <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MotorbikeFactory)</span> <span class="title">GetVehicle</span><span class="params">(v <span class="keyword">int</span>)</span> <span class="params">(Vehicle, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> v &#123;</span><br><span class="line">    <span class="keyword">case</span> SportMotorbikeType:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(SportMotorbike), <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> CruiseMotorbikeType:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span>(CruiseMotorbike), <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(fmt.Sprintf(<span class="string">"Vehicle of type %d not recognized\n"</span>, v))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>vehicle.go</strong></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abstract_factory</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vehicle <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetWheels() <span class="keyword">int</span></span><br><span class="line">    GetSeats() <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>car.go</strong></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abstract_factory</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Car <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetDoors() <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>familiar_car.go</strong></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abstract_factory</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FamiliarCar <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *FamiliarCar)</span> <span class="title">GetDoors</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *FamiliarCar)</span> <span class="title">GetWheels</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *FamiliarCar)</span> <span class="title">GetSeats</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>luxury_car.go</strong></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pacakge abstract_factory</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LuxuryCar <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LuxuryCar)</span> <span class="title">GetDoors</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LuxuryCar)</span> <span class="title">GetWheels</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LuxuryCar)</span> <span class="title">GetSeats</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>motorbike.go</strong></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abstract_factory</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Motorbike <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetType() <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>sport_motorbike.go</strong></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abstract_factory</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SportMotorbike <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SportMotorbike)</span> <span class="title">GetWheels</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SportMotorbike)</span> <span class="title">GetSeats</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SportMotorbike)</span> <span class="title">GetType</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> SportMotorbikeType</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>cruise_motorbike.go</strong></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> abstract_factory</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CruiseMotorbike <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CruiseMotorbike)</span> <span class="title">GetWheels</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CruiseMotorbike)</span> <span class="title">GetSeats</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CruiseMotorbike)</span> <span class="title">GetType</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> CruiseMotorbikeType</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The Abstract factory and Builder patterns can both resolve the same problem, but your particular needs will help you find the slight differences that should lead you to take one solution or the other.</p><h2 id="Prototype-design-pattern"><a href="#Prototype-design-pattern" class="headerlink" title="Prototype design pattern"></a>Prototype design pattern</h2><p>While with the Builder pattern, we are dealing with repetitive build algorithms and with the factories we are simplifying the creation of many types of objects;<br><strong>With the Prototype pattern, we will use an already created instance of some type to clone it and complete it with the particular needs of each context.</strong></p><p>The aim of the Prototype pattern is to have an object or a set of objects that is already created at compilation time, but which you can clone as many times as you want at runtime.</p><p><strong>The key difference between this and a Builder pattern is that objects are cloned for the user instead of building them at runtime.</strong></p><h3 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h3><p>The main objective for the Prototype design pattern is to avoid repetitive object creation.</p><ul><li><strong>Maintain a set of objects that will be cloned to create new instances</strong></li><li><strong>Provide a default value of some type to start working on top of it</strong></li><li><strong>Free CPU of complex object initialization to take more memory resources</strong></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> creational</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ShirtCloner <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetClone(m <span class="keyword">int</span>) (ItemInfoGetter, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    White = <span class="number">1</span></span><br><span class="line">    Black = <span class="number">2</span></span><br><span class="line">    Blue  = <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetShirtsCloner</span><span class="params">()</span> <span class="title">ShirtCloner</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ShirtsCache <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ShirtsCache)</span> <span class="title">GetClone</span><span class="params">(m <span class="keyword">int</span>)</span> <span class="params">(ItemInfoGetter, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> m &#123;</span><br><span class="line">    <span class="keyword">case</span> White:</span><br><span class="line">        newItem := *whitePrototype</span><br><span class="line">        <span class="keyword">return</span> &amp;newItem, <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> Black:</span><br><span class="line">        newItem := *blackPrototype</span><br><span class="line">        <span class="keyword">return</span> &amp;newItem, <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">case</span> Blue:</span><br><span class="line">        newItem := *bluePrototype</span><br><span class="line">        <span class="keyword">return</span> &amp;newItem, <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Shirt model not recognized"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ItemInfoGetter <span class="keyword">interface</span> &#123;</span><br><span class="line">    GetInfo() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ShirtColor <span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shirt <span class="keyword">struct</span> &#123;</span><br><span class="line">    Price <span class="keyword">float32</span></span><br><span class="line">    SKU   <span class="keyword">string</span></span><br><span class="line">    Color ShirtColor</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Shirt)</span> <span class="title">GetInfo</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"Shirt with SKU '%s' and Color id %d that cost %f\n"</span>, s.SKU, s.Color, s.Price)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> whitePrototype *Shirt = &amp;Shirt &#123;</span><br><span class="line">    Price: <span class="number">15.00</span>,</span><br><span class="line">    SKU:   <span class="string">"empty"</span>,</span><br><span class="line">    Color: White,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> blackPrototype *Shirt = &amp;Shirt &#123;</span><br><span class="line">    Price: <span class="number">16.00</span>,</span><br><span class="line">    SKU:   <span class="string">"empty"</span>,</span><br><span class="line">    Color: Black,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bluePrototype *Shirt = &amp;Shirt &#123;</span><br><span class="line">    Price: <span class="number">17.00</span>,</span><br><span class="line">    SKU:   <span class="string">"empty"</span>,</span><br><span class="line">    Color: Blue,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *Shirt)</span> <span class="title">GetPrice</span><span class="params">()</span> <span class="title">float32</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> i.Price</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>The Prototype pattern is a powerful tool to build caches and default objects. You have probably realized too that some patterns can overlap a bit, but they have small differences that make them more appropriate in some cases and not so much in others.</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Goroutines</title>
      <link href="/2019/12/04/golang/golang-goroutines/"/>
      <url>/2019/12/04/golang/golang-goroutines/</url>
      
        <content type="html"><![CDATA[<h2 id="Goroutines"><a href="#Goroutines" class="headerlink" title="Goroutines"></a>Goroutines</h2><p>Many concepts that were previously considered academic and inefficient are beginning to find a place among modern software solutions. Two such concepts are coroutines(goroutines in Go) and channels.</p><p>Conceptually, they have evolved over time and they have been implemented differently in each programming language.</p><p>In many programming languages such as Ruby or Clojure, they are implemented as libraries, but in Go, <strong>they are implemented within the language as a native feature.</strong></p><ul><li><strong>Concurrency and parallelism</strong></li><li><strong>Go’s runtime scheduler</strong></li><li><strong>Gotchas when using goroutines</strong></li></ul><h3 id="Concurrency-and-Parallelism"><a href="#Concurrency-and-Parallelism" class="headerlink" title="Concurrency and Parallelism"></a>Concurrency and Parallelism</h3><p>Computer and software programs are useful because they do a lot of laborious work very fast and can also do multiple things at once.</p><p>We want our programs to be able to do multiple things simultaneously, that is, multitask, and the success of a programming language can depend on how easy it’s to write and understand multitasking programs.</p><blockquote><p><a href="https://blog.golang.org/concurrency-is-not-parallelism" target="_blank" rel="noopener">concurrency is not paralleism</a></p></blockquote><ul><li><strong>Concurrency</strong>: <strong><em>Concurrency is about dealing with lots of things at once.</em></strong> This means that we manage to get multiple things done at once in a give period of time. However, we will only be doing a single thing at a time. This tends to happen in programs where one task is waiting and the program decides to run another task in the idle time. </li><li><strong>Parallelism</strong>: <strong><em>Parallelism is about doing lots of things at once.</em></strong> This means that even if we have two tasks, they are continuously working without any breaks in between them.</li></ul><p><img src="https://sherlockblaze.com/resources/img/daily/2019-12-04/concurrency-and-parallelism.png" alt="concurrency-and-parallelism"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker introduction</title>
      <link href="/2019/12/03/docker/docker-introduction/"/>
      <url>/2019/12/03/docker/docker-introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h2><p>During the 1990s and early 2000s, the standard way to deploy applications to the internet was to get a server instance, copy the code or binary onto the instance, and then start the program. This worked great for a while, but soon complications began to arise:</p><ul><li>Code that worked on the developer’s machine might not work on the server.</li><li>Programs that ran perfectly on a server instance might fail upon applying the latest patch to the server’s OS.</li><li>For every new instance added as part of a service, various installation scripts had to be run so that we can bring the new instance to be on par with all the other instances. This can be a very slow process.</li><li>Extra care had to be taken to ensure that the new instance and all the software versions installed on it are compatible with the APIs being used by our program.</li><li>It was also important to ensure that all config files and important environment variables were copied to the new instance; otherwise, the application might fail with little or no clue.</li><li>Usually the version of the program that ran on local system versus test system versus production system were all configured differently, and this meant that it was possible for our application to fail on one of the three types of systems. If such a situation occurred, we would end up having to spend extra time and effort trying to figure out whether the issue is specific to one particular instance, one particular system, and so on.</li></ul><p><strong>Containers</strong> try to solve this problem using OS-level virtualization.</p><p>All programs and applications are run in a section of memory known as <strong>user space</strong>. This allows the operating system to ensure that a program is not able to cause major hardware or software issues.</p><p>The real advantage of containers is that they allow us to run applications in isolated user spaces, and we can even customize the following attributes of user spaces:</p><ul><li>Connected devices such as network adapters and TTY</li><li>CPU and RAM resources</li><li>Files and folders accessible from host OS</li></ul><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p><img src="https://sherlockblaze.com/resources/img/daily/2019-12-03/docker-container-versus-vm.png" alt="docker-container-versus-vm"></p><p>The biggest advantage of a VM is that we can run different types of OSes on a system, for example, Windows, FreeBSD, and Linux. In the case of Docker, we can run any flavor of Linux, and the only limitation is that it has to be Linux.</p><p>The biggest advantage of Docker containers is that since it runs natively on Linux as a discrete process making it lightweight and unaware of all the capabilities of the host OS.</p><p><img src="https://sherlockblaze.com/resources/img/daily/2019-12-03/docker-architecture.png" alt="docker-architecture"></p><ul><li><strong>Dockerfile</strong>: It consists of instructions on how to build an image that runs our program.</li><li><strong>Docker client</strong>: This is a command-line program used by the user to interact with Docker daemon.</li><li><strong>Docker daemon</strong>: This is the Daemon application that listens for commands to manage building or running containers and pushing containers to Docker registry. It is also responsible for configuring container networks, volumes, and so on.</li><li><strong>Docker images</strong>: Docker images contain all the steps necessary to build a container binary that can be executed on any Linux machine with Docker installed.</li><li><strong>Docker registry</strong>: The Docker registry is responsible for storing and retrieving the Docker images. We can use a public Docker registry or a private one. Docker Hub is used as the default Docker registry.</li><li><strong>Docker Container</strong>: The Docker container is different from the Container we have been discussing so far. A Docker container is a runnable instance of a Docker image. A Docker container can be created, started, stopped, and so on.</li><li><strong>Docker API</strong>: The Docker client we discussed earlier is a command-line interface to interact with Docker API. This means that the Docker daemon need not be running on the same machine as does the Docker client. The default setup that we will be using throughout the book talks to the Docker daemon on the local system using UNIX sockets or a network interface.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 高并发初步</title>
      <link href="/2019/05/14/golang/golang-concurrent-start/"/>
      <url>/2019/05/14/golang/golang-concurrent-start/</url>
      
        <content type="html"><![CDATA[<p>通常程序会被编写为一个顺序执行并完成一个独立任务的代码。<strong>如果没有特别的需求，最好总是这样写代码。</strong></p><p>但是有些情况并行执行多个任务会有更大的好处。比如说： Web 服务需要在各自独立的套接字(socket)上同时接受多个请求数据。每个套接字请求都是独立的，可以完全<strong>独立</strong>于其他套接字进行处理。具有并行执行多个请求的能力可以显著提高这类系统的性能。</p><p>Golang 中并发指<strong>能让某个函数独立于其他函数运行的能力</strong>。</p><p>当一个函数创建 <code>goroutine</code> 时，Golang 会将其视为一个独立的工作单元。这个单元会被调度到可用的逻辑处理器上执行。</p><p>运行时调度器<strong>能管理被创建的所有 <code>goroutine</code> 并为其分配执行时间</strong>。在任何给定的时间，全面控制哪个 <code>goroutine</code> 在哪个逻辑处理器上运行。</p><p>Golang 语言的并发同步模型来自一个叫做<strong>通信顺序进程</strong>(Communicating Sequential Processes, CSP)的范型。</p><p>CSP 是一种消息传递模型，通过在 <code>goroutine</code> 之间传递数据来传递消息，而不是对数据进行加锁来实现同步访问。用于在 <code>goroutine</code> 之间同步和传递数据的关键数据类型叫<strong>通道</strong>。</p><h2 id="并行和并发"><a href="#并行和并发" class="headerlink" title="并行和并发"></a>并行和并发</h2><h3 id="什么是进程和线程"><a href="#什么是进程和线程" class="headerlink" title="什么是进程和线程"></a>什么是<strong>进程</strong>和<strong>线程</strong></h3><p>当运行一个应用程序的时候，操作系统会为这个应用程序启动一个进程。可以将这个进程看做一个包含了应用程序在运行中需要用到和维护的各种资源的容器。</p><p><img src="https://sherlockblaze.com/resources/img/code/golang/processing-and-running-program.png" alt=""></p><p>上图展示了一个包含所有可能分配的常用资源的进程。这些资源<strong>包括但不限于</strong>: 内存地址空间、文件和设备的句柄以及线程。</p><p>一个线程是一个执行空间，这个空间会被操作系统调度来运行函数中所写的代码。 </p><p>每个进程至少包含一个线程，每个进程的初始化线程会被称作<strong>主线程</strong>。</p><p>操作系统将线程调度到某个处理器上运行，这个处理器不一定是进程所在的处理器。</p><p>操作系统会在物理处理器上调度线程来运行，而 Go 语言的运行时会在逻辑处理器上调度 <code>goroutine</code> 来运行。<strong>每个逻辑处理器都分别绑定到单个操作系统线程。</strong></p><p><img src="https://sherlockblaze.com/resources/img/code/golang/how-the-go-scheduler-manages-goroutines.png" alt=""></p><p>上图展示了操作系统线程、逻辑处理器和本地队列之间的关系。</p><p>如果创建一个 <code>goroutine</code> 并准备运行，这个 <code>goroutine</code> 就会被放到调度器的全局运行队列中，之后调度器就将这些队列中的 <code>goroutine</code> 分配给一个逻辑处理器，并放到这个逻辑处理器对应的本地运行队列中。本地运行队列中的 <code>goroutine</code> 会一直等待直到自己被分配的逻辑处理器执行。</p><p>当正在运行的 <code>goroutine</code> 需要执行一个阻塞的系统调用时，比如打开一个文件，线程和 <code>goroutine</code> 会从逻辑处理器上分离，该线程会继续阻塞，等待系统调用的返回。榆次同事，这个逻辑处理器就失去了用来运行的线程。<strong>调度器会创建一个新的线程</strong>，并将其绑定到该逻辑处理器上。</p><p>当被阻塞的系统调用执行完成并返回，对应的 <code>goroutine</code> 会放回本地运行队列，而之前的线程会被保存好，以便之后可以继续使用。</p><p>如果一个 <code>goroutine</code> 需要做一个网络 I/O 调用，流程上会有些不一样。在这种情况下， <code>goroutine</code> 会和逻辑处理器分离，并移到集成了网络轮训器的运行时。</p><p>一旦该轮训器指示某个网络读或者写操作已经就绪，对应的 <code>goroutine</code> 就会重新分配到逻辑处理器来完成操作。调度器对可以创建的逻辑处理器数量没有限制，但语言运行时默认限制每个程序最多创建 <strong>10000</strong> 个线程。</p><blockquote><p>限制值可以通过调用 <code>runtime/debug</code> 包的 <code>SetMaxThreads</code> 方法来更改。如果程序试图使用更多的线程，就会崩溃。</p></blockquote><h3 id="并发和并行的区别"><a href="#并发和并行的区别" class="headerlink" title="并发和并行的区别"></a>并发和并行的区别</h3><p>并发是<strong>让不同的代码片段同时在不同的物理处理器上执行</strong>，并行的关键是<strong>同时做</strong>很多事情，而并发是指<strong>同时管理</strong>很多事情，这些事情可能只做了一般就被暂停去做别的事情了。</p><p>很多情况下，并发的效果比并行好，因为操作系统和硬件的总资源一般很少，但能支持系统同时做很多事情。这种“使用较少的资源做更多的事情”的哲学，也是指导 <strong>Go语言设计的哲学。</strong></p><p>如果希望让 <code>goroutine</code> 并行，必须使用多于一个逻辑处理器，当有多个逻辑处理器时，调度器会将 <code>goroutine</code> 平等分配到每个逻辑处理器上。这会让 <code>goroutine</code> 在不同的线程上运行。</p><p><img src="https://sherlockblaze.com/resources/img/code/golang/be-parallelism.png" alt=""></p><blockquote><p>如果想真的实现并行的效果，需要让程序运行在有多个物理处理器的机器上，否则，哪怕 Go 语言运行时使用多个线程， <code>goroutine</code> 依然会在同一个物理处理器上并发运行，达不到并行的效果。</p></blockquote><h2 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h2><p>调度器是如何创建 <code>goroutine</code> 并管理其寿命的？</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"runtime"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 分配一个逻辑处理器给调度器使用</span></span><br><span class="line">    runtime.GOMAXPROCS(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 可以通过以下方式为每个可用的物理处理器创建一个逻辑处理器</span></span><br><span class="line">    <span class="comment">// runtime.GOMAXPROCS(runtime.NumCPU())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// wg 用于等待程序完成</span></span><br><span class="line">    <span class="comment">// +2: 需要等待两个 goroutine</span></span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"Start Goroutines"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// defer 关键字描述的语句会在函数运行结束后执行</span></span><br><span class="line">        <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> count := <span class="number">0</span>; count &lt; <span class="number">3</span>; count ++ &#123;</span><br><span class="line">            <span class="keyword">for</span> char := <span class="string">'a'</span>; char &lt; <span class="string">'a'</span> + <span class="number">26</span>; char++ &#123;</span><br><span class="line">                fmt.Printf(<span class="string">"%c"</span>, char)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// go 关键字创建一个 goroutine，这里使用了匿名函数</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> count := <span class="number">0</span>; count &lt; <span class="number">3</span>; count++ &#123;</span><br><span class="line">            <span class="keyword">for</span> char := <span class="string">'A'</span>; char &lt; <span class="string">'A'</span> + <span class="number">26</span>; char++ &#123;</span><br><span class="line">                fmt.Printf(<span class="string">"%c"</span>, char)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"Waiting To Finish"</span>)</span><br><span class="line">    <span class="comment">// 等待 goroutine 运行结束</span></span><br><span class="line">    wg.Wait()</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"\nTerminating Program"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看一段代码</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"runtime"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    runtime.GOMAXPROCS(<span class="number">1</span>)</span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"Create Goroutines"</span>)</span><br><span class="line">    <span class="keyword">go</span> printPrime(<span class="string">"A"</span>)</span><br><span class="line">    <span class="keyword">go</span> printPrime(<span class="string">"B"</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"Waiting To Finish"</span>)</span><br><span class="line">    wg.Wait()</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"Terminating Program"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printPrime</span><span class="params">(prefix <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line">next:</span><br><span class="line">    <span class="keyword">for</span> outer := <span class="number">2</span>; outer &lt; <span class="number">5000</span>; outer++ &#123;</span><br><span class="line">        <span class="keyword">for</span> inner := <span class="number">2</span>; inner &lt; outer; inner++ &#123;</span><br><span class="line">            <span class="keyword">if</span> outer%inner == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span> next</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(<span class="string">"%s:%d\n"</span>, prefix, outer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://sherlockblaze.com/resources/img/code/golang/goroutines-being-swapped.png" alt=""></p><p>根据上图，我们可以发现，为了防止某个 <code>goroutine</code> 长时间占用逻辑处理器，调度器在 <code>goroutine</code> 占用时间过长时会停止当前运行的 <code>goroutine</code>，并给其他可运行的 <code>goroutine</code> 运行的机会。即<strong>切换时间片</strong>。</p><h2 id="竞争状态"><a href="#竞争状态" class="headerlink" title="竞争状态"></a>竞争状态</h2><h3 id="什么是竞争状态"><a href="#什么是竞争状态" class="headerlink" title="什么是竞争状态"></a>什么是竞争状态</h3><p>如果两个或多个 <code>goroutine</code> 在没有互相同步的情况下，访问某个共享的资源，并试图同时读和写这个资源，就处于互相竞争的状态。</p><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>竞争状态的存在是让并发程序变得复杂的地方，十分容易引起潜在问题。<strong>对一个共享资源的读和写操作必须是原子化的。</strong>即同一时刻只能有一个 <code>goroutine</code> 对共享资源进行读和写操作。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"runtime"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    couter <span class="keyword">int</span></span><br><span class="line">    wg sync.WaitGroup</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> incCounter(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> incCounter(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(<span class="string">"Final Counter:"</span>, counter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">incCounter</span><span class="params">(id <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> count := <span class="number">0</span>; count &lt; <span class="number">2</span>; count++ &#123;</span><br><span class="line">        value := counter</span><br><span class="line">        runtime.Gosched()</span><br><span class="line">        value++</span><br><span class="line">        counter = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以观潮到，总共开启了两个 <code>goroutine</code> ，对于变量 <code>counter</code> 各加两次。但最后的结果可能不是 <code>4</code>。</p><p>原因如下图所示：</p><p><img src="https://sherlockblaze.com/resources/img/code/golang/visual-of-the-race-condition-in-action.png" alt=""></p><p>我们可以通过一个小手段来在代码编译阶段检查竞争问题，使用命令 <code>go build -race</code> 可以使用竞争检测器标志来编译程序，帮助我们提前发现代码中的竞争问题。</p><h3 id="手段"><a href="#手段" class="headerlink" title="手段"></a>手段</h3><h4 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h4><p>通过对共享资源加锁来保证 <code>goroutine</code> 的同步状态。</p><ol><li>原子函数</li></ol><p>如果要顺序访问一个整型变量或者一段代码， <code>atomic</code> 和 <code>sync</code> 包里的函数提供了很好的解决方案。通过原子函数，可以利用很底层的加锁机制来同步访问整型变量和指针。</p><p>我们可以将上面的代码修改成下面这样:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"runtime"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">    <span class="string">"sync/atomic"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    counter <span class="keyword">int64</span></span><br><span class="line">    wg      sync.WaitGroup</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 计数加 2</span></span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> incCounter(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> incCounter(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(<span class="string">"Final Counter:"</span>, counter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">incCounter</span><span class="params">(id <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> count := <span class="number">0</span>; counter &lt; <span class="number">2</span>; count++ &#123;</span><br><span class="line">        <span class="comment">// 以原子手段对 counter 加 1</span></span><br><span class="line">        atomic.AddInt64(&amp;counter, <span class="number">1</span>)</span><br><span class="line">        runtime.Gosched()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>互斥锁</li></ol><p>另一种同步访问共享资源的方式是使用互斥锁(<strong>mutex</strong>)，互斥锁这个名字来自互斥的概念。互斥锁用于在代码上创建一个临界区，保证同一时间只有一个 <code>goroutine</code> 可以执行这个临界区代码。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"runtime"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    counter <span class="keyword">int</span></span><br><span class="line">    wg      sync.WaitGroup</span><br><span class="line">    mutex   sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> incCounter(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> incCounter(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Printf(<span class="string">"Final Counter: %d\\n"</span>, counter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">incCounter</span><span class="params">(id <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> count := <span class="number">0</span>; count &lt; <span class="number">2</span>; count ++ &#123;</span><br><span class="line">        <span class="comment">// 加锁</span></span><br><span class="line">        mutex.Lock()</span><br><span class="line">        &#123;</span><br><span class="line">            value := counter</span><br><span class="line">            runtime.Gosched()</span><br><span class="line">            value++</span><br><span class="line">            counter = value</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解锁</span></span><br><span class="line">        mutex.Unlock()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>通道</li></ol><p>原子函数和互斥锁都能工作，但是依靠它们都不会让编写并发程序变得更简单容易，不容易出错。</p><p>在 <code>Golang</code> 中，不仅可以通过使用原子函数和互斥锁来保证对共享资源的安全访问以及消除竞争状态，<strong>还可以使用通道，通过发送和接受需要共享的资源，在 <code>goroutine</code> 之间做同步。</strong></p><p><strong>当一个资源需要在 <code>goroutine</code> 之间共享时，通道在 <code>goroutine</code> 之间架起了一个管道，并提供了确保同步交换数据的机制</strong>。</p><blockquote><p>声明通道时，需要指定将要被共享的数据的类型。可以通过通道共享内置类型、命名类型、结构类型和引用类型的值或指针。</p></blockquote><p>声明通道的格式如下:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无缓冲的整型通道</span></span><br><span class="line">unbuffered := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="comment">// 有缓冲的字符串通道</span></span><br><span class="line">buffered := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>向通道发送值或指针需要用到 <code>&lt;-</code> 操作符:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buffered := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">10</span>)</span><br><span class="line">buffered &lt;- <span class="string">"Gopher"</span></span><br></pre></td></tr></table></figure><p>同样，从通道里接收一个值或者指针时，<code>&lt;-</code> 运算符在要操作的通道变量的左侧，代码如下:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value := &lt;-buffered</span><br></pre></td></tr></table></figure><p>通过两个例子来系统学习一下，一个利用了<strong>无缓冲通道</strong>，另一个利用的<strong>有缓冲通道</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"math/rand"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rand.Seed(time.Now().UnixNano())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    court := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> player(<span class="string">"Nadal"</span>, court)</span><br><span class="line">    <span class="keyword">go</span> player(<span class="string">"Djokovic"</span>, court)</span><br><span class="line"></span><br><span class="line">    count &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">player</span><span class="params">(name <span class="keyword">string</span>, court <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        ball, ok := &lt;-court</span><br><span class="line">        <span class="keyword">if</span> !ok &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"Player %s Won\n"</span>, name)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        n := rand.Intn(<span class="number">100</span>)</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">13</span> == <span class="number">0</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"Player %s Missed\n"</span>, name)</span><br><span class="line">            <span class="built_in">close</span>(court)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fmt.Printf(<span class="string">"Player %s Hit %d\n"</span>, name, ball)</span><br><span class="line">        ball++</span><br><span class="line">        court &lt;- ball</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"math/rand"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    numberGoroutines = <span class="number">4</span></span><br><span class="line">    taskLoad         = <span class="number">10</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    rand.Seed(time.Now().Unix())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    tasks := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, taskLoad)</span><br><span class="line"></span><br><span class="line">    wg.Add(numberGoroutines)</span><br><span class="line">    <span class="keyword">for</span> gr := <span class="number">1</span>; gr &lt;= numberGoroutines; gr++ &#123;</span><br><span class="line">        <span class="keyword">go</span> worker(tasks, gr)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> post := <span class="number">1</span>; post &lt;= taskLoad; post++ &#123;</span><br><span class="line">        tasks &lt;- fmt.Sprintf(<span class="string">"Task: %d"</span>, post)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(tasks)</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(tasks <span class="keyword">chan</span> <span class="keyword">string</span>, work <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        task, ok := &lt;-tasks</span><br><span class="line">        <span class="keyword">if</span> !ok &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"Worker: %d: Shutting Down\n"</span>, worker)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fmt.Printf(<span class="string">"Worker: %d: Started %s\n"</span>, worker, task)</span><br><span class="line"></span><br><span class="line">        sleep := rand.Int63n(<span class="number">100</span>)</span><br><span class="line">        time.Sleep(time.Duration(sleep) * time.Millisecond)</span><br><span class="line"></span><br><span class="line">        fmt.Printf(<span class="string">"Worker: %d: Completed %s\n"</span>, worker, task)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并发模式"><a href="#并发模式" class="headerlink" title="并发模式"></a>并发模式</h2><p>写并发程序时，我们不得不去考虑一些问题，用最合理的方式去编写并发代码。考虑到创建线程/goroutine时，会有一些开销，导致不必要的系统消耗，我们需要使用一些小手段来减少这些消耗。</p><p>接下来我们讨论非常关键的三点:</p><ol><li><strong>控制程序的生命周期</strong></li><li><strong>管理可复用的资源池</strong></li><li><strong>创建可以处理任务的 goroutine 池</strong></li></ol><h3 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a>Runner</h3><p><code>runner</code> 包用于展示如何使用通道来监视程序的执行时间，如果程序运行时间太长，也可以用 <code>runner</code> 包来终止程序。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> runner</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"os/signal"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Runner <span class="keyword">struct</span> &#123;</span><br><span class="line">    interrupt <span class="keyword">chan</span> os.Signal</span><br><span class="line">    complete  <span class="keyword">chan</span> error</span><br><span class="line">    timeout   &lt;-<span class="keyword">chan</span> time.Time</span><br><span class="line">    tasks     []<span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line">var ErrTimeout = errors.New("received timeout")</span><br><span class="line"><span class="keyword">var</span> ErrInterrupt = errors.New(<span class="string">"received interrupt"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(d time.Duration)</span> *<span class="title">Runner</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Runner&#123;</span><br><span class="line">        interrupt: <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>),</span><br><span class="line">        complete:  <span class="built_in">make</span>(<span class="keyword">chan</span> error),</span><br><span class="line">        timeout:   time.After(d),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Runner)</span> <span class="title">Add</span><span class="params">(tasks ...<span class="keyword">func</span>(<span class="keyword">int</span>)</span>)</span> &#123;</span><br><span class="line">    r.tasks = <span class="built_in">append</span>(r.tasks, tasks...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Runner)</span> <span class="title">Start</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    signal.Notify(r.interrupt, os.Interrupt)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        r.complete &lt;- r.run()</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> err := &lt;- r.complete:</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    <span class="keyword">case</span> &lt;-r.timeout:</span><br><span class="line">        <span class="keyword">return</span> ErrTimeout</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Runner)</span> <span class="title">run</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> id, task := <span class="keyword">range</span> r.tasks &#123;</span><br><span class="line">        <span class="keyword">if</span> r.gotInterrupt() &#123;</span><br><span class="line">            <span class="keyword">return</span> ErrInterrupt</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        task(id)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Runner)</span> <span class="title">gotInterrupt</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;- r.interrupt:</span><br><span class="line">        signal.Stop(r.interrupt)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Pool"><a href="#Pool" class="headerlink" title="Pool"></a>Pool</h3><p>如何使用有缓冲的通道实现资源池，来管理可以在任意数量的 <code>goroutine</code> 之间共享及独立使用的资源。</p><p><strong>这种模式在需要共享一组静态资源的情况(如共享数据库连接或者内存缓冲区)下非常有用。</strong></p><p>如果一个 <code>goroutine</code> 需要从池里得到这些资源中的一个，它可以从池里申请，使用完后归还到资源池里。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pool</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明结构提 Pool</span></span><br><span class="line"><span class="keyword">type</span> Pool <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// 锁</span></span><br><span class="line">    m         sync.Mutex</span><br><span class="line">    <span class="comment">// 资源</span></span><br><span class="line">    resources <span class="keyword">chan</span> io.Closer</span><br><span class="line">    <span class="comment">// 工厂: 存放着函数</span></span><br><span class="line">    factory   <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(io.Closer, error)</span></span></span><br><span class="line"><span class="function">    // 标注 <span class="title">Pool</span> 是否被关闭</span></span><br><span class="line"><span class="function">    <span class="title">closed</span>    <span class="title">bool</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line">var ErrPoolClosed = errors.New("Pool has been closed.")</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Pool</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(fn <span class="keyword">func</span>()</span> <span class="params">(io.Closer, error)</span>, <span class="title">size</span> <span class="title">uint</span>) <span class="params">(*Pool, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> size &lt;= <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"Size value too small."</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;Pool &#123;</span><br><span class="line">        factory:   fn,</span><br><span class="line">        resources: <span class="built_in">make</span>(<span class="keyword">chan</span> io.Closer, size),</span><br><span class="line">    &#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 申请一个资源</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pool)</span> <span class="title">Acquire</span><span class="params">()</span> <span class="params">(io.Closer, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> r, ok := &lt;-p.resources:</span><br><span class="line">        log.Println(<span class="string">"Acquire:"</span>, <span class="string">"Shared Resource"</span>)</span><br><span class="line">        <span class="keyword">if</span> !ok &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, ErrPoolClosed</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        log.Println(<span class="string">"Acquire:"</span>, <span class="string">"New Resource"</span>)</span><br><span class="line">        <span class="keyword">return</span> p.factory()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放一个资源</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pool)</span> <span class="title">Release</span><span class="params">(r io.Closer)</span></span> &#123;</span><br><span class="line">    p.m.Lock()</span><br><span class="line">    <span class="keyword">defer</span> p.m.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> p.closed &#123;</span><br><span class="line">        r.Close()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> p.resources &lt;- r:</span><br><span class="line">        log.Println(<span class="string">"Resource:"</span>, <span class="string">"In Queue"</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        log.Println(<span class="string">"Release:"</span>, <span class="string">"Closing"</span>)</span><br><span class="line">        r.Close()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭 Pool</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pool)</span> <span class="title">Close</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p.m.Lock()</span><br><span class="line">    <span class="keyword">defer</span> p.m.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> p.closed &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p.closed = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(p.resources)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> r := <span class="keyword">range</span> p.resources &#123;</span><br><span class="line">        r.Close()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h3><p>通过 <code>work</code> 包，使用无缓冲通道来创建一个 <code>goroutine</code> 池，这些 <code>goroutine</code> 执行并控制一组工作，让其并发执行。</p><p>在这种情况下，使用无缓冲的通道要比随意指定一个缓冲区大小的有缓冲通道好，因为这个情况下既不需要一个工作队列，也不需要一组 <code>goroutine</code> 配合执行。</p><p>无缓冲通道保证两个 <code>goroutine</code> 之间的数据交换。</p><p>这种使用无缓冲的通道的方法允许使用者知道什么时候 <code>goroutine</code> 正在执行工作，而且如果池里的所有 <code>goroutine</code> 都忙，无法接受新的工作的时候，也能及时通过通道来调用通知者。</p><p><strong>使用无缓存的通道不会有工作在队列里丢失或者卡住，所有的工作都会被处理。</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> work</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"sync"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明 Worker 接口</span></span><br><span class="line"><span class="keyword">type</span> Worker <span class="keyword">interface</span> &#123;</span><br><span class="line">    Task()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明 Pool 结构体</span></span><br><span class="line"><span class="keyword">type</span> Pool <span class="keyword">struct</span> &#123;</span><br><span class="line">    work <span class="keyword">chan</span> Worker</span><br><span class="line">    wg   sync.WaitGroup</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建 Pool</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(maxGoroutines <span class="keyword">int</span>)</span> *<span class="title">Pool</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建 Work 通道，用于存放 Work</span></span><br><span class="line">    p := Pool &#123;</span><br><span class="line">        work: <span class="built_in">make</span>(<span class="keyword">chan</span> Worker),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置 wg 值，设置为最大 goroutine 参数值</span></span><br><span class="line">    p.wg.Add(maxGoroutines)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; maxGoroutines; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="comment">// 遍历 Worker</span></span><br><span class="line">            <span class="keyword">for</span> w := <span class="keyword">range</span> p.work &#123;</span><br><span class="line">                <span class="comment">// 执行 Task 方法</span></span><br><span class="line">                w.Task()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交 Work</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pool)</span> <span class="title">Run</span><span class="params">(w Worker)</span></span> &#123;</span><br><span class="line">    p.work &lt;- w</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭 Pool</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Pool)</span> <span class="title">Shutdown</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">close</span>(p.work)</span><br><span class="line">    p.wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 基本语法</title>
      <link href="/2019/05/08/golang/golang-grammar/"/>
      <url>/2019/05/08/golang/golang-grammar/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本学习笔记总结自： <a href="https://www.amazon.com/Go-Action-William-Kennedy/dp/1617291781/ref=sr_1_1?keywords=go+in+action&amp;qid=1557230058&amp;s=gateway&amp;sr=8-1" target="_blank" rel="noopener">《Go in Action》</a></p></blockquote><p>先讨论一些规范问题：</p><ol><li>如何将代码组织成包</li><li>如何操作这些包</li></ol><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>有这么一些目录，目录下存放一些列以 <code>.go</code> 为扩展名的相关文件，这个目录，称之为<strong>包</strong>。</p><p>同一个目录下的所有 <code>.go</code> 文件必须声明为同一个包名，比如包为 <code>beauty</code>，则需要在代码中标明 <code>package beauty</code>。</p><h3 id="main-包"><a href="#main-包" class="headerlink" title="main 包"></a>main 包</h3><p>所有用 Go 语言编译的可执行程序都必须有一个名叫 <code>main</code> 的包，当编译器找到 <code>main</code> 包，会去找寻 <code>main()</code> 函数，如果没有，则不会生成可运行二进制文件。</p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>导入一个包极其简单 —- <code>import &quot;beauty&quot;</code>。注意，如果你导入了一个包，却不用，编译器会报错。</p><h3 id="init-函数"><a href="#init-函数" class="headerlink" title="init 函数"></a>init 函数</h3><p>如你在<a href="https://sherlockblaze.com/2019/05/07/golang/golang-start/">Golang 初探</a>所看到的，在 <code>matcher</code> 中，你会看到 <code>init</code> 函数，如果你以这种方式 <code>import _ &quot;beauty&quot;</code> 导入包，那么会在程序开始运行时，执行这个包下面的 <code>init</code> 函数。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个长度为5的数组，其中的值初始化为0</span></span><br><span class="line"><span class="keyword">var</span> array1 [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line"><span class="comment">// 声明一个长度为5的数组，值为1、2、3、4、5</span></span><br><span class="line">array2 := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">// 声明一个值为1、2、3、4、5，长度自动生成，为5</span></span><br><span class="line">array3 := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">// 声明一个长度为5的数组，下标为1的值为1，下标为2的值为2，其他位置为0</span></span><br><span class="line">array4 := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="comment">// 声明包含5个元素的指向整数的数组</span></span><br><span class="line">array5 := [<span class="number">5</span>]*<span class="keyword">int</span>&#123;<span class="number">0</span>: <span class="built_in">new</span>(<span class="keyword">int</span>), <span class="number">1</span>: <span class="built_in">new</span>(<span class="keyword">int</span>)&#125;</span><br><span class="line">*array5[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">*array5[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line"><span class="comment">// 将数组array1赋值给array6，注意，是全盘复制，到时候你会有两个一样的数组</span></span><br><span class="line"><span class="keyword">var</span> array6 [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line">array6 = array1</span><br></pre></td></tr></table></figure><p>在函数间直接传递数组是直接<strong>拷贝数组</strong>，如果数组过大，直接传递指针即可。通过 <code>&amp;</code> 符号，可以获取指定数组的地址，如：<code>&amp;array1</code>。</p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><h3 id="什么是切片"><a href="#什么是切片" class="headerlink" title="什么是切片"></a>什么是切片</h3><p><strong>切片</strong>是一种数据结构，这种数据结构便于使用和管理数据集合。切片是围绕动态数组的概念来构建的，可以按需自动增长和缩小。切片的动态增长是通过函数 <code>append</code> 来实现的。同时，<strong>切片的底层内存也是在连续块中分配的，所以切片还能获得索引、迭代以及为垃圾回收优化的好处。</strong></p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p><img src="https://sherlockblaze.com/resources/img/code/golang/slice.png" alt=""></p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个长度、容量都为5的切片</span></span><br><span class="line">slice1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// 声明一个长度为3、容量为5的切片</span></span><br><span class="line">slice2 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// 声明一个长度为3、容量为3的切片</span></span><br><span class="line">slice3 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">// 声明一个容量为长度为101、容量为101的切片，第101个元素值为100</span></span><br><span class="line">slice4 := []<span class="keyword">int</span>&#123;<span class="number">100</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="comment">// 声明 nil 切片</span></span><br><span class="line">slice5 := []<span class="keyword">int</span></span><br><span class="line"><span class="comment">// 声明一个空切片</span></span><br><span class="line">slice6 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 声明一个空切片</span></span><br><span class="line">slice7 := []<span class="keyword">int</span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">newSlice := slice[<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>通过一张图片观察上面两行代码所做的事。</p><p><img src="https://sherlockblaze.com/resources/img/code/golang/assign-a-slice-to-another.png" alt=""></p><p>接着我们再通过一段代码来看如何对切片进行遍历:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> slice &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Index: %d Value: %d\n"</span>, index, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的只有两点：</p><ol><li>使用 <code>range</code> 函数获得的两个值，一个是索引，一个是索引对应的值。</li><li><code>range</code> 其实是对每个元素提供了一个副本。</li></ol><p>你可以通过下划线 <code>_</code> 来忽略函数返回的值。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> slice &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Value: %d\n"</span>, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么如何在函数中传递切片呢？</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">1e6</span>)</span><br><span class="line"></span><br><span class="line">slice = foo(slice)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(slice []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> slice</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在一个64位的机器上，一个切片需要24字节的内存：指针字段8字节、长度和容量分别需要8字节</li><li>函数中传递时仅复制切片本身，不复制底层数组</li></ol><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><h3 id="什么是映射"><a href="#什么是映射" class="headerlink" title="什么是映射"></a>什么是映射</h3><p>映射是一种数据结构，用于存储一系列无序的键值对。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p><img src="https://sherlockblaze.com/resources/img/code/golang/hashmap-impl.png" alt=""></p><p>映射的散列表包含一组桶。在存储、删除或者查找键值对的时候，所有操作都要先选择一个桶。<strong>把操作映射时制定的键传给映射的散列函数</strong>，就能选中对应的桶。</p><p><strong>散列函数的目的是生成一个索引，这个索引将最终将键值对分布到所有可用的桶里。</strong></p><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><p>先看怎么创建、初始化</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">dict := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"Red"</span>:<span class="number">1</span>, <span class="string">"Black"</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="comment">// 声明一个值为 nil 的映射，这种映射无法存放键值对，注意</span></span><br><span class="line"><span class="keyword">var</span> colors <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>只需要注意一点，作为键的类型，可以是内置的类型，也可以是结构类型，只要这个类型可以使用 <code>==</code> 来比较。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">value, exists := colors[<span class="string">"Blue"</span>]</span><br><span class="line"><span class="keyword">if</span> exists &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这种方式，可以判断是否存在需要的键值对。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">colors := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> &#123;</span><br><span class="line">    <span class="string">"AliceBlue"</span>: <span class="string">"#f0f8ff"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> colors &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Key: %s Value: %s\n"</span>, key, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述代码，我们可以轻松遍历 map 中的键值对，同样，你可以使用 <code>_</code> 符号来忽略函数的某个/所有返回值。</p><p>Golang 中删除映射中的键值对也是很方便的。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">colors := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> &#123;</span><br><span class="line">    <span class="string">"AliceBlue"</span>: <span class="string">"#f0f8ff"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">delete</span>(colors, <span class="string">"AliceBlue"</span>)</span><br></pre></td></tr></table></figure><p>那么如何在函数中传递使用映射呢？</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    colors := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> &#123;</span><br><span class="line">        <span class="string">"AliceBlue"</span>:   <span class="string">"#f0f8ff"</span>,</span><br><span class="line">        <span class="string">"Coral"</span>:       <span class="string">"#ff7F50"</span>,</span><br><span class="line">        <span class="string">"DarkGray"</span>:    <span class="string">"#a9a9a9"</span>,</span><br><span class="line">        <span class="string">"ForestGreen"</span>: <span class="string">"#228b22"</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key, value := <span class="keyword">range</span> colors &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Key: %s Value: %s\n"</span>, key, value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    removeColor(colors, <span class="string">"Coral"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key, value := <span class="keyword">range</span> colors &#123;</span><br><span class="line">        fmt.Println(<span class="string">"Key: %s Value: %s\n"</span>, key, value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeColor</span><span class="params">(colors <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, key <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="built_in">delete</span>(colors, key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过运行上述代码，我们可以发现，在调用了 <code>removeColor</code> 函数之后再遍历映射，会发现被删除的元素不存在了。这其中的道理很简单，传递映射时并没有对其进行复制，使用的底层数组仍然是同一个。</p><h2 id="类型系统"><a href="#类型系统" class="headerlink" title="类型系统"></a>类型系统</h2><p>Golang 是一种静态编译的语言 – 编译器需要在编译时知晓程序里每个值的类型，用于提供编译器对代码进行一些性能优化，提高执行效率。</p><p>值的类型给编译器提供两部分信息:</p><ol><li>需要分配多少内存</li><li>这段内存表示什么</li></ol><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><h4 id="什么是结构体"><a href="#什么是结构体" class="headerlink" title="什么是结构体"></a>什么是结构体</h4><p>Golang 允许用户定义类型，当用户声明一个新类型时，这个声明就给编译器提供了一个框架，告知必要的内存大小和表示信息。</p><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><p>有两个方式声明结构体。</p><ol><li>利用 <code>struct</code> 关键字</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    name       <span class="keyword">string</span></span><br><span class="line">    email      <span class="keyword">string</span></span><br><span class="line">    ext        <span class="keyword">int</span></span><br><span class="line">    privileged <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>基于一个已有的类型，将其作为新类型的类型说明</li></ol><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Length <span class="keyword">int64</span></span><br></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">yorr := user &#123;</span><br><span class="line">    name:       <span class="string">"yorr"</span>,</span><br><span class="line">    email:      <span class="string">"beauty@love.com"</span>,</span><br><span class="line">    ext:        <span class="number">1</span>,</span><br><span class="line">    privileged: <span class="literal">true</span>, <span class="comment">// 别漏了最后一个逗号</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用下面这种方式，需要按照结构体声明里的顺序来赋值</span></span><br><span class="line">yorr := user &#123;<span class="string">"yorr"</span>, <span class="string">"beauty@love.com"</span>, <span class="number">1</span>, <span class="literal">true</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用另一个类型来作为另一个类型中的字段</span></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">struct</span> admin &#123;</span><br><span class="line">    person user</span><br><span class="line">    level <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">yorr := admin &#123;</span><br><span class="line">    person: user &#123;</span><br><span class="line">        name:      <span class="string">"yorr"</span>,</span><br><span class="line">        email:     <span class="string">"beauty@love.com"</span>,</span><br><span class="line">        ext:       <span class="number">1</span>,</span><br><span class="line">        privilege: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    level: <span class="string">"top"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将已有类型作为新类型</span></span><br><span class="line"><span class="keyword">type</span> Length <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">var</span> length Length</span><br><span class="line">length = <span class="keyword">int64</span>(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><blockquote><p>嵌入类型: Golang 允许用户扩展或者修改已有类型的行为，这个功能对代码复用很重要，在修改已有类型以符合新类型的时候也很重要。通过 <code>嵌入类型</code> 完成。</p></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    name  <span class="keyword">string</span></span><br><span class="line">    email <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *user)</span> <span class="title">notify</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"Sending user email to %s&lt;%s&gt;\n"</span>,</span><br><span class="line">        u.name,</span><br><span class="line">        u.email)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> admin <span class="keyword">struct</span> &#123;</span><br><span class="line">    user</span><br><span class="line">    lever <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ad := admin &#123;</span><br><span class="line">        user: user&#123;</span><br><span class="line">            name:  <span class="string">"sherlock blaze"</span>,</span><br><span class="line">            email: <span class="string">"sherlockblaze@love.com"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        level: <span class="string">"top"</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以直接访问内部类型的方法</span></span><br><span class="line">    ad.user.notify()</span><br><span class="line">    <span class="comment">// 内部类型的方法也可以被提升到外部类型</span></span><br><span class="line">    ad.notify()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上我们注意到一个函数 – <code>notify</code>。可以给我们引入一个新的话题 —— <strong>值接收者</strong>、<strong>指针接收者</strong>。</p><h3 id="值接收者-amp-指针接收者"><a href="#值接收者-amp-指针接收者" class="headerlink" title="值接收者&amp;指针接收者"></a>值接收者&amp;指针接收者</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u user)</span> <span class="title">notify</span><span class="params">()</span></span> &#123;</span><br><span class="line">    mt.Printf(<span class="string">"Sending user email to %s&lt;%s&gt;\n"</span>,</span><br><span class="line">        u.name,</span><br><span class="line">        u.email)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *user)</span> <span class="title">changeEmail</span><span class="params">(email <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    u.email = email</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>notify</code> 和 <code>changeEmail</code> 称为结构体 <code>user</code> 的方法，如果一个函数有接收者，这个函数就被称为<strong>方法</strong>。在 <code>func</code> 关键字和方法名之间的参数，称之为 <strong>接收者</strong>。而接收者分为两类，<strong>值接收者</strong>和<strong>指针接收者</strong>。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    name  <span class="keyword">string</span></span><br><span class="line">    email <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u user)</span> <span class="title">notify</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"Sending User Email To %s&lt;%s&gt;\n"</span>,</span><br><span class="line">        u.name,</span><br><span class="line">        u.email)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeEmail</span><span class="params">(email <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    u.email = email</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    bill := user&#123;<span class="string">"Bill"</span>, <span class="string">"bill@email.com"</span>&#125;</span><br><span class="line">    bill.notify()</span><br><span class="line"></span><br><span class="line">    lisa := &amp;user&#123;<span class="string">"Lisa"</span>, <span class="string">"lisa@email.com"</span>&#125;</span><br><span class="line">    lisa.notify()</span><br><span class="line"></span><br><span class="line">    bill.changeEmail(<span class="string">"bill@newdomain.com"</span>)</span><br><span class="line">    bill.notify()</span><br><span class="line"></span><br><span class="line">    lisa.changeEmail(<span class="string">"lisa@newdomain.com"</span>)</span><br><span class="line">    lisa.notify()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，<code>bill</code> 作为一个值，可以调用值接收者声明的方法，也可以调用指针接受者声明的方法，其实里面有一个语法糖。在用值对象调用指针接收者声明的方法时，golang 底层做了这样一个操作 <code>(&amp;bill).changeEmail()</code>，同理，指针对象调用值接收者声明的方法时，做了这样的操作 <code>(*lisa).notify()</code>。</p><p>使用<strong>值接收者</strong>方法时，实际上会创建一个对象的副本，<strong>指针接收者</strong>则是利用指针，如果修改，会直接修改结构体里对应的项。</p><h3 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h3><p><strong>内置类型是由语言提供的一组类型。</strong></p><p>如: 数值类型、字符串类型和布尔类型。这些类型本质上是原始的类型，因此，当对这些值进行增加或者删除的时候，会创建一个新值。<strong>基于这个理论，当把这些类型的值传递给方法或者函数时，应该传递一个对应值的副本。</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Trim</span><span class="params">(s <span class="keyword">string</span>, cutset <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">""</span> || cutset == <span class="string">""</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TrimFunc(s, makeCutsetFunc(cutset))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Trim</code> 函数传入一个 <code>string</code> 类型的值作操作，在传入一个 <code>string</code> 类型的值用于查找，之后函数会返回一个新的 <code>string</code> 类型的值作操作。</p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>Golang 中，引用类型有如下几个: <strong>切片</strong>、<strong>映射</strong>、<strong>通道</strong>、<strong>接口</strong>和<strong>函数</strong>。</p><p>当声明上述类型变量时，创建的变量被称作<strong>标头值</strong>，从技术细节上说，<strong>字符串也是一种引用类型</strong>。</p><p><strong>每个引用类型创建的标头值是包含一个指向底层数据结构的指针</strong>，每个引用类型还包含一组独特的字段，用于管理底层数据结构。因为<strong>标头值</strong>是为复制而设计的，所以永远不要共享一个引用类型的值。<strong>标头值里包含一个指针，因此通过复制来传递一个引用类型的副本，本质上就是在共享底层数据结构。</strong></p><p>同时，<strong>编译器只允许为命名的用户定义的类型声明方法。</strong></p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="什么是接口"><a href="#什么是接口" class="headerlink" title="什么是接口"></a>什么是接口</h3><p>接口定义了一个操作。</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>讨论如何实现一个接口。</p><p><strong>接口定义的类型不由接口直接实现，而是通过方法由用户定义的类型实现。</strong></p><p>如果用户定义的类型实现了某个接口类型声明的一组方法，那么这个用户定义的类型的值就可以赋给这个接口类型的值。这个赋值会把用户定义的类型的值存入接口类型的值。</p><p><img src="https://sherlockblaze.com/resources/img/code/golang/interface-impl.png" alt=""></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> notifier <span class="keyword">interface</span> &#123;</span><br><span class="line">    notify()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    name  <span class="keyword">string</span></span><br><span class="line">    email <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 struct u 实现 notify 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *user)</span> <span class="title">notify</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"Sending user email to %s&lt;%s&gt;\n"</span>,</span><br><span class="line">        u.name,</span><br><span class="line">        u.email)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ad <span class="keyword">struct</span> &#123;</span><br><span class="line">    title <span class="keyword">string</span></span><br><span class="line">    topic <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 struct ad 实现 notify 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ad *ad)</span> <span class="title">notify</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"Sending ads title:%s topic:%s."</span>,</span><br><span class="line">        ad.title,</span><br><span class="line">        ad.topic)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendNotification</span><span class="params">(n notifier)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 调用 notify 方法</span></span><br><span class="line">    n.notify()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    u := user&#123;<span class="string">"Bill"</span>, <span class="string">"bill@email.com"</span>&#125;</span><br><span class="line">    <span class="comment">// 对于用指针接收者来实现的接口函数，需要传入地址，否则会导致编译失败</span></span><br><span class="line">    sendNotification(&amp;u)</span><br><span class="line">    ad := ad&#123;<span class="string">"hah"</span>, <span class="string">"haha"</span>&#125;</span><br><span class="line">    sendNotification(&amp;ad)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单介绍一下方法集规则:</p><table><thead><tr><th>Values</th><th>Methods Receivers</th></tr></thead><tbody><tr><td>T</td><td>(t T)</td></tr><tr><td>* T</td><td>(t T) and (t *T)</td></tr></tbody></table><table><thead><tr><th>Methods Receivers</th><th>Values</th></tr></thead><tbody><tr><td>(t T)</td><td>T and *T</td></tr><tr><td>(t * T)</td><td>*T</td></tr></tbody></table><p>我们可以发现，在上面代码中，有这样两行代码:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sendNotification(&amp;u)</span><br><span class="line">sendNotification(&amp;ad)</span><br></pre></td></tr></table></figure><p>按照我们之前讨论的语法糖，也可以这么写:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sendNotification(u)</span><br><span class="line">sendNotification(ad)</span><br></pre></td></tr></table></figure><p>但是实际上，这样做是不可以的。通过方法集规则的描述，我们发现，我们不是总能自动获得一个值的地址。所以值的方法集只包括了使用值接收者实现的方法。</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>在了解完接口后，我们来看一下如何通过使用接口来实现多态。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> notifier <span class="keyword">interface</span> &#123;</span><br><span class="line">    notify()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    name  <span class="keyword">string</span></span><br><span class="line">    email <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *user)</span> <span class="title">notify</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Sending user email to %s&lt;%s&gt;\n"</span>,</span><br><span class="line">        u.name,</span><br><span class="line">        u.email)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> admin <span class="keyword">struct</span> &#123;</span><br><span class="line">    name  <span class="keyword">string</span></span><br><span class="line">    email <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *admin)</span> <span class="title">notify</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Sending admin email to %s&lt;%s&gt;\n"</span>,</span><br><span class="line">        a.name,</span><br><span class="line">        a.email)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    bill := user&#123;<span class="string">"Bill"</span>, <span class="string">"bill@email.com"</span>&#125;</span><br><span class="line">    sendNotification(&amp;bill)</span><br><span class="line">    lisa := admin&#123;<span class="string">"Lisa"</span>, <span class="string">"lisa@email.com"</span>&#125;</span><br><span class="line">    sendNotification(&amp;lisa)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendNotification</span><span class="params">(n notifier)</span></span> &#123;</span><br><span class="line">    n.notify()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过多态函数 <code>sendNotification</code> ，我们实现了多态目标。</p><h2 id="公开和私有"><a href="#公开和私有" class="headerlink" title="公开和私有"></a>公开和私有</h2><p>说完了基本的语法，我们要说一下方法、字段、等等一些内容的公开化和私有化问题。如果你学过 <code>Java</code> 或者 <code>C++</code> 之类的面向对象语言。你会看到过这样的关键字 <code>public</code> 和 <code>private</code> 。</p><p>而对于 <code>golang</code> 是没有这些玩意的。</p><p>那 <code>golang</code> 如何实现公开或者私有呢？</p><p><strong>开头字母大小写！</strong></p><p>如果开头字母是大小，表示对其他 <code>package</code> 是公开的标识。反之，对其他 <code>package</code> 则不是。</p><p>需要注意的是，无论是大写还是小写，在文件自己待的 <code>package(目录)</code> 下，对于同级别的 <code>package(目录)</code> 都是公开的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 初探</title>
      <link href="/2019/05/07/golang/golang-start/"/>
      <url>/2019/05/07/golang/golang-start/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本学习笔记总结自： <a href="https://www.amazon.com/Go-Action-William-Kennedy/dp/1617291781/ref=sr_1_1?keywords=go+in+action&amp;qid=1557230058&amp;s=gateway&amp;sr=8-1" target="_blank" rel="noopener">《Go in Action》</a></p></blockquote><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ol><li>Golang 是一种让代码分享更加容易的编程语言</li><li>提供了更高效的代码复用手段</li><li>高效利用服务器上的所有核心</li><li>编译速度很快，即使是大型项目</li><li>开发速度快</li><li>现代化的内存管理机制</li></ol><h2 id="类型系统"><a href="#类型系统" class="headerlink" title="类型系统"></a>类型系统</h2><ol><li>类型简单。类型之间更多使用了组合的方式，而非继承</li><li>利用接口对一组行为建模。利用了鸭子类型，即一个东西看起来是只鸭子，那它就是只鸭子</li></ol><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span> <span class="comment">// 引入外部包</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123; <span class="comment">// 主方法，程序的入口</span></span><br><span class="line">    fmt.Println(<span class="string">"Hello World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="More-than-Hello-World"><a href="#More-than-Hello-World" class="headerlink" title="More than Hello-World"></a>More than Hello-World</h2><h3 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h3><p>从不同的数据源拉取数据，将数据内容与一组搜索项做对比，然后将匹配的内容显示在终端窗口。这个程序会读取文本文件，进行网络调用，解码 XML 和 JSON 成为结构化类型数据，并且利用 Go 语言的并发机制保证这些操作的速度。</p><h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p><img src="https://sherlockblaze.com/resources/img/code/golang/architecture-first-go.png" alt=""></p><h3 id="简单解说"><a href="#简单解说" class="headerlink" title="简单解说"></a>简单解说</h3><p>我们知道，任何程序主要做的无非三件事，输入，处理，输出。</p><ul><li>输入: 那一组等待搜索的数据源，我们需要有一个方法去获取</li><li>处理: 也就是我们执行搜索的部分，我们通过启动几个 goroutine(协程)，执行既定好的代码去完成</li><li>输出: 主要也就是显示结果那一部分</li></ul><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">code</span></span><br><span class="line"><span class="string">│</span>   <span class="string">main</span> <span class="meta">---</span> <span class="string">主程序</span></span><br><span class="line"><span class="string">│</span></span><br><span class="line"><span class="string">└───data</span></span><br><span class="line"><span class="string">│</span>   <span class="string">│</span>   <span class="string">data.json</span> <span class="meta">---</span> <span class="string">数据源</span></span><br><span class="line"><span class="string">│</span>   </span><br><span class="line"><span class="string">└───search</span></span><br><span class="line"><span class="string">│</span>   <span class="string">│</span>   <span class="string">default.go</span> <span class="meta">---</span> <span class="string">搜索数据用的默认匹配器</span></span><br><span class="line"><span class="string">│</span>   <span class="string">│</span>   <span class="string">feed.go</span>    <span class="meta">---</span> <span class="string">用于读取</span> <span class="string">json</span> <span class="string">数据文件</span></span><br><span class="line"><span class="string">│</span>   <span class="string">|   match.go   --- 用于支持不同匹配器的接口</span></span><br><span class="line"><span class="string">│   |   search.go  --- 执行搜索的主控制逻辑</span></span><br><span class="line"><span class="string">│    </span></span><br><span class="line"><span class="string">└───matchers</span></span><br><span class="line"><span class="string">    │   rss.go     --- 搜索 rss 源的匹配器</span></span><br></pre></td></tr></table></figure><h3 id="代码实现及分析"><a href="#代码实现及分析" class="headerlink" title="代码实现及分析"></a>代码实现及分析</h3><p>按照输入、输出、处理的顺序来遍历一遍代码。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>已知 <code>feed.go</code> 用于读取 json 的数据文件，所以我们从 <code>feed.go</code> 的代码开始编写。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> search</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dataFile = <span class="string">"data/data.json"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义结构体</span></span><br><span class="line"><span class="keyword">type</span> Feed <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span> <span class="string">`json:"site"`</span> <span class="comment">// 结构体中的名称为: Name，对应 json 中的标签为 site</span></span><br><span class="line">    URI  <span class="keyword">string</span> <span class="string">`json:"line"`</span></span><br><span class="line">    Type <span class="keyword">string</span> <span class="string">`json:"type"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RetrieveFeeds</span><span class="params">()</span> <span class="params">([]*Feed, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 打开文件</span></span><br><span class="line">    file, err := os.Open(dataFile)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// defer 关键字标注的语句会在方法结束时调用</span></span><br><span class="line">    <span class="keyword">defer</span> file.Close()</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Feed 指针切片  </span></span><br><span class="line">    <span class="keyword">var</span> feeds []*Feed</span><br><span class="line">    <span class="comment">// 利用 json 库，解析 json 中的内容，并且放到 feeds 中</span></span><br><span class="line">    err = json.NewDecoder(file).Decode(&amp;feeds)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> feeds, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>我们来看看 <code>match.go</code> 文件中做了什么</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> search</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体 Result</span></span><br><span class="line"><span class="keyword">type</span> Result <span class="keyword">struct</span> &#123;</span><br><span class="line">    Filed   <span class="keyword">string</span></span><br><span class="line">    Content <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个 Matcher 接口</span></span><br><span class="line"><span class="keyword">type</span> Matcher <span class="keyword">interface</span> &#123;</span><br><span class="line">    Search(feed *Feed, searchTerm <span class="keyword">string</span>) ([]*Result, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Match 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Match</span><span class="params">(matcher Matcher, feed *Feed, searchTerm <span class="keyword">string</span>, results <span class="keyword">chan</span>&lt;- *Result)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 调用</span></span><br><span class="line">    searchResults, err := matcher.Search(feed, searchTerm)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, result := <span class="keyword">range</span> searchResults &#123;</span><br><span class="line">        results &lt;- result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Display</span><span class="params">(results <span class="keyword">chan</span> *Result)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> result := <span class="keyword">range</span> results &#123;</span><br><span class="line">        log.Printf(<span class="string">"%s:\n%s\n\n"</span>, result.Field, result.Content)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h4><p>获取到我们输入数据后，我们就要开始处理他们了。</p><p>首先我们在 <code>default.go</code> 文件里声明一个默认解析器，当然，do nothing</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> search</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> defaultMatcher <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> matcher defaultMatcher</span><br><span class="line">    <span class="comment">// 注册 default matcher</span></span><br><span class="line">    Register(<span class="string">"default"</span>, matcher)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 Search 接口，Golang 实现接口的方式很简单高效，直接针对某个类型，实现对应的方法即可</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m defaultMatcher)</span> <span class="title">Search</span><span class="params">(feed *Feed, searchTerm <span class="keyword">string</span>)</span> <span class="params">([]*Result, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们来看 <code>search.go</code> 文件</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> search</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个 map，由 matcher 名称(键) + 实际的 Mathcer(值) 组成</span></span><br><span class="line"><span class="keyword">var</span> matchers = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Matcher)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Run</span><span class="params">(searchTerm <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 调用 RetrieveFeeds 方法来获取 data.json 里的内容</span></span><br><span class="line">    feeds, err := RetrieveFeeds()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建通道</span></span><br><span class="line">    results := <span class="built_in">make</span>(<span class="keyword">chan</span> *Result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> waitGroup sync.WaitGroup</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明 waitGroup 并添加 feeds 长度</span></span><br><span class="line">    waitGroup.Add(<span class="built_in">len</span>(feeds))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, feed := <span class="keyword">range</span> feeds &#123;</span><br><span class="line">        <span class="comment">// 获取 matcher</span></span><br><span class="line">        matcher, exists := matchers[feed.Type]</span><br><span class="line">        <span class="keyword">if</span> !exists &#123;</span><br><span class="line">            matcher = matchers[<span class="string">"default"</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行协程，开启 matcher 之旅</span></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(matcher Matcher, feed *Feed)</span></span> &#123;</span><br><span class="line">            Match(matcher, feed, searchTerm, results)</span><br><span class="line">            waitGroup.Done()</span><br><span class="line">        &#125;(matcher, feed) <span class="comment">// 括号里的内容是传入的参数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跟踪结果的 goroutine</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        waitGroup.Wait()</span><br><span class="line">        <span class="built_in">close</span>(results)</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    Display(results)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册 matcher</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Register</span><span class="params">(feedType <span class="keyword">string</span>, matcher Mathcer)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> _, exists := matchers[feedType]; exists &#123;</span><br><span class="line">        log.Fatalln(feedType, <span class="string">"Matcher already Registered"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.Println(<span class="string">"Register"</span>, feedType, <span class="string">"matcher"</span>)</span><br><span class="line">    matchers[feedType] = matcher</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重头戏来了，之前的工作主要就是通过找到 matcher，调用 matcher 中的方法来执行数据的处理</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> matchers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/xml"</span></span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"regexp"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"search"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一些结构体去匹配 xml 中的内容，你可以仅使用一个 type</span></span><br><span class="line"><span class="keyword">type</span> (</span><br><span class="line">    item <span class="keyword">struct</span> &#123;</span><br><span class="line">        XMLName     xml.Name <span class="string">`xml:"item"`</span></span><br><span class="line">        PubDate     <span class="keyword">string</span>   <span class="string">`xml:"pubDate"`</span></span><br><span class="line">        Title       <span class="keyword">string</span>   <span class="string">`xml:"title"`</span></span><br><span class="line">        Description <span class="keyword">string</span>   <span class="string">`xml:"description"`</span></span><br><span class="line">        Link        <span class="keyword">string</span>   <span class="string">`xml:"link"`</span></span><br><span class="line">        GUID        <span class="keyword">string</span>   <span class="string">`xml:"guid"`</span></span><br><span class="line">        GeoRssPoint <span class="keyword">string</span>   <span class="string">`xml:"georss:point"`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    image <span class="keyword">struct</span> &#123;</span><br><span class="line">        XMLNAME xml.Name <span class="string">`xml:"image"`</span></span><br><span class="line">        URL     <span class="keyword">string</span>   <span class="string">`xml:"url"`</span></span><br><span class="line">        Title   <span class="keyword">string</span>   <span class="string">`xml:"title"`</span></span><br><span class="line">        Link    <span class="keyword">string</span>   <span class="string">`xml:"link"`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    channel <span class="keyword">struct</span> &#123;</span><br><span class="line">        XMLNAME        xml.Name <span class="string">`xml:"channel"`</span></span><br><span class="line">        Title          <span class="keyword">string</span>   <span class="string">`xml:"title"`</span></span><br><span class="line">        Description    <span class="keyword">string</span>   <span class="string">`xml:"description"`</span></span><br><span class="line">        Link           <span class="keyword">string</span>   <span class="string">`xml:"link"`</span></span><br><span class="line">        PubDate        <span class="keyword">string</span>   <span class="string">`xml:"pubDate"`</span></span><br><span class="line">        LastBuildDate  <span class="keyword">string</span>   <span class="string">`xml:"lastBuildDate"`</span></span><br><span class="line">        TTL            <span class="keyword">string</span>   <span class="string">`xml:"ttl"`</span></span><br><span class="line">        Language       <span class="keyword">string</span>   <span class="string">`xml:"language"`</span></span><br><span class="line">        ManagingEditor <span class="keyword">string</span>   <span class="string">`xml:"managingEditor"`</span></span><br><span class="line">        WebMaster      <span class="keyword">string</span>   <span class="string">`xml:"webMaster"`</span></span><br><span class="line">        Image          image    <span class="string">`xml:"image"`</span></span><br><span class="line">        Item           []item   <span class="string">`xml:"item"`</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> rssMatcher <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化，注册 Matcher</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> matcher rssMatcher</span><br><span class="line">    search.Register(<span class="string">"rss"</span>, matcher)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 rssMatcher 实现 Search 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m rssMatcher)</span> <span class="title">Search</span><span class="params">(feed *search.Feed, searchTerm <span class="keyword">string</span>)</span> <span class="params">([]*search.Result, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> results []*result.Result</span><br><span class="line">    log.Printf(<span class="string">"Search Feed Type[%s] Site[%s] For URI[%s]\n"</span>, feed.Type, feed.Name, feed.URI)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 document</span></span><br><span class="line">    document, err := m.retrieve(feed)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行匹配</span></span><br><span class="line">    <span class="keyword">for</span> _, channelItem := <span class="keyword">range</span> document.Channel.Item &#123;</span><br><span class="line">        matched, err := regexp.MatchString(searchTerm, channelItem.Title)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> matched &#123;</span><br><span class="line">            results = <span class="built_in">append</span>(results, &amp;search.Result &#123;</span><br><span class="line">                Field: <span class="string">"Title"</span>,</span><br><span class="line">                Content: channelItem.Title,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> results, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 feed 流</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m rssMatcher)</span> <span class="title">retrieve</span><span class="params">(feed *search.Feed)</span> <span class="params">(*rssDocument, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> feed.URI == <span class="string">""</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"No rss feed url provided"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取相应，并解码</span></span><br><span class="line">    resp, err := http.Get(feed.URI)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> resp.StatusCode != <span class="number">200</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"HTTP Response Error %d\n"</span>, resp.StatusCode)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> document rssDocument</span><br><span class="line">    err = xml.NewDecoder(resp.Body).Decode(&amp;document)</span><br><span class="line">    <span class="keyword">return</span> &amp;document, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h4><p>接下来我们需要一个主程序来作为整个程序的入口。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line"></span><br><span class="line">    _ <span class="string">"matchers"</span></span><br><span class="line">    <span class="string">"search"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    log.SetOutput(os.Stdout)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    search.Run(<span class="string">"president"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以在<a href="https://sherlockblaze.com/resources/file/code/golang/data.json">这里</a>下载 <code>data.json</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trees</title>
      <link href="/2019/05/05/data-structure/trees/trees/"/>
      <url>/2019/05/05/data-structure/trees/trees/</url>
      
        <content type="html"><![CDATA[<h2 id="Basic-Concept-Of-Tree"><a href="#Basic-Concept-Of-Tree" class="headerlink" title="Basic Concept Of Tree"></a>Basic Concept Of Tree</h2><p>First, let’s talk about tree.</p><p><strong>Why we need Tree???</strong></p><p>We you get large amounts of input, the linear access time of linked lists is prohibitive. Using a sequential table structure can make access speed slow when there is a lot of input. Then, tree can help you solve those problems.</p><p>This is a tree look like.</p><p><img src="https://sherlockblaze.com/resources/img/cs/trees/tree.png" alt="Tree"></p><p>A tree can be defined in several ways. One natural way to define a tree is recursively. A tree is a collection of nodes. The collection can be empty; otherwise, a tree consists of a distinguished node r, called the <strong><em>root</em></strong>, and zero or more nonempty subtrees, like those framed by black frames, those are trees two, belongs to the bigger one. And the root of each subtree is said to be a <strong><em>child</em></strong> of r(oot), r is the parent of each subtree root, and so on.</p><p>From the recursive definition, we find that a tree is a collection of N nodes, one of them is the root, and there’re N - 1 edges, each edge connect some node to its parent, and every node except the root has one parent.</p><p><img src="https://sherlockblaze.com/resources/img/cs/trees/tree_details.png" alt="Details"></p><p><strong>Leaves</strong>: Nodes without no children are known as leaves.</p><p><img src="https://sherlockblaze.com/resources/img/trees/cs/tree_concept.png" alt=""></p><h2 id="How-to-implement-a-Tree"><a href="#How-to-implement-a-Tree" class="headerlink" title="How to implement a Tree"></a>How to implement a Tree</h2><p>We know a tree consist of nodes. But what kind of node definition can form a tree??</p><p>Because all nodes are same, so, if we need a unified node definition, means that the definition of the node must be same.</p><p>Since the number of children per node can vary so greatly and is not known in advance, it might be infeasible to make the children direct links in the data structure, because there would be too much wasted space.</p><p>We found this way can help us.</p><p><img src="https://sherlockblaze.com/resources/img/cs/trees/tree_implement.png" alt="Tree Implement"></p><p>If we let a node got two pointer, one of them point to first child of it, another one point to its next sibling. Then it can give us a unified definition of nodes.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType Element;</span><br><span class="line">    PtrToNode FirstChild;</span><br><span class="line">    PtrToNode NextSibling;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Tree-Traversals-with-an-Application"><a href="#Tree-Traversals-with-an-Application" class="headerlink" title="Tree Traversals with an Application"></a>Tree Traversals with an Application</h2><blockquote><p>All of this comes from the book – <strong>《Data Structures and Algorithms analysis in C.》</strong></p></blockquote><p>Trees are powerful. One of the popular uses is the directory structure in man common operating systems, such as UNIX, VAX/VMS and so on.</p><p>We got a code from the book.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">ListDir(DirectoryOrFile D, <span class="keyword">int</span> Depth)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(D is a legitimate entry)</span><br><span class="line">    &#123;</span><br><span class="line">        PrintName(D, Depth);</span><br><span class="line">        <span class="keyword">if</span> (D is a directory)</span><br><span class="line">            <span class="keyword">for</span> each child, C, of D</span><br><span class="line">                ListDir(C, Depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">ListDirectory(DirectoryOrFile D)</span><br><span class="line">&#123;</span><br><span class="line">    ListDir(D, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now let’s take a look at the complete code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _TREES_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _TREES_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElementType int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> TreeNode *PtrToNode;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/*_TREES_H_*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType Value;</span><br><span class="line">    PtrToNode FirstChild;</span><br><span class="line">    PtrToNode NextSibling;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// TODO</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Avl Tree</title>
      <link href="/2019/05/05/data-structure/trees/avl-tree/"/>
      <url>/2019/05/05/data-structure/trees/avl-tree/</url>
      
        <content type="html"><![CDATA[<h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>AVL Tree – <strong>Adelson-Velskii and Landis</strong>.</p><p>It’s a binary tree with a <strong>balance condition</strong>.</p><blockquote><p>And we get <strong>the balance condition must be easy to maintain, and it ensures that the depth of the tree is O(logN).</strong></p></blockquote><p>As we know, the AVL tree is identical to a binary search tree, except that for <strong>every node in the tree, the height of the left and right subtrees can differ by at most 1.</strong> (The hight of an empty tree is defined to be -1.)</p><blockquote><p>Do you guys remember what is depth of a node??</p></blockquote><blockquote><p>We review quickly here. <strong>The depth of a node is the length of the only way from root to this node.</strong> And if you almost forget the basic concepts of trees. Go <a href="./Trees.md#Basic-Concept-Of-Tree">there</a> for more.</p></blockquote><p><img src="https://sherlockblaze.com/resources/img/cs/trees/what_is_a_avl_tree.png" alt=""></p><p>We get two binary search tree above.</p><p>But only the left one is a AVL tree. And we all know why now. If you don’t know why, read one more above.</p><h2 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h2><p>It’s same with binary search tree when you wanna do some search in a AVL tree. Because we know, AVL trees all are binary search tree. We talk more about <strong><a href="#Insertion">Insertion</a></strong> and <strong><a href="#Deletion">Deletion</a></strong>.</p><h3 id="Insertion"><a href="#Insertion" class="headerlink" title="Insertion"></a>Insertion</h3><p>Because of the balance condition, when we do an insertion, we need to update all the balancing information for the nodes on the path back to the root, why we need to do this? <strong>Because that insertion is potentially violate the AVL tree property.</strong><br>For example, if we insert 10 maybe bigger into the left tree above would destroy the balance condition at the node with value 8. Because if we do this, <strong>the node with value 8 in the tree, the height of the left and right subtrees of it differ bigger than 1.</strong></p><p><img src="https://sherlockblaze.com/resources/img/cs/trees/not_avl_anymore.png" alt="Not AVL anymore"></p><p>Not AVL Tree any more.</p><p><strong>We should keep the average depth of tree is O(logN).</strong> It turns out that this can always be done with a simple modification to the tree, known as a <strong><em><a href="#Rotation">Rotation</a></em></strong> .</p><h3 id="Rotation"><a href="#Rotation" class="headerlink" title="Rotation"></a>Rotation</h3><p>If we wanna do a rotation, we should find the node must be rebalanced, let’s call it <strong>Target</strong>.</p><blockquote><p><strong><em>Target means the node must be rebalanced now.</em></strong></p></blockquote><p>We can know that the Target <strong>must on the path from the insertion point to the root</strong>, <strong><em>because only those nodes have altered their subtrees.</em></strong><br>As we follow the path up to the root and update the balancing information, we may find a node whose new balance violates the AVL condition.</p><p>When we find the <strong><em>Target</em></strong>, we can do some operations on it.</p><p>We get four situations when the tree’s balance condition is broken.</p><ol><li><strong>An insertion into the left subtree of the left child of Target.</strong></li><li><strong>An insertion into the right subtree of the left child of Target.</strong></li><li><strong>An insertion into the left subtree of the right child of Target.</strong></li><li><strong>An insertion into the right subtree of the right child of Target.</strong></li></ol><blockquote><p>Because any node has at most two children, and a height imbalance requires that the Target’s two subtrees’ height differ by two.</p></blockquote><p>Let’s see them before.</p><p><strong><em>Avl Tree</em></strong></p><p><img src="https://sherlockblaze.com/resources/img/cs/trees/example_avl_tree1.png" alt="Avl Tree"></p><p><strong><em>First situation</em></strong></p><blockquote><p>The Target is 8.</p></blockquote><p><img src="https://sherlockblaze.com/resources/img/cs/trees/avl_situation1.png" alt="Situation One"></p><p><strong><em>Second situation</em></strong></p><blockquote><p>The Target is 8.</p></blockquote><p><img src="https://sherlockblaze.com/resources/img/cs/trees/avl_situation2.png" alt="Situation Two"></p><p><strong><em>Avl Tree</em></strong></p><blockquote><p>The target is 6</p></blockquote><p><img src="https://sherlockblaze.com/resources/img/cs/trees/example_avl_tree2.png" alt="AVL Tree"></p><p><strong><em>Third Situation</em></strong></p><blockquote><p>The target is 6.</p></blockquote><p><img src="https://sherlockblaze.com/resources/img/cs/trees/avl_situation3.png" alt="Situation Three"></p><p><strong><em>Fourth Situation</em></strong></p><p><img src="https://sherlockblaze.com/resources/img/cs/trees/avl_situation4.png" alt="Situation Four"></p><blockquote><p>Case 1 and 4 are mirror image symmetries with respect to Target, as are case 2 and 3.<br>But it’s different from a programming perspective.</p></blockquote><h4 id="Single-Rotation"><a href="#Single-Rotation" class="headerlink" title="Single Rotation"></a>Single Rotation</h4><p>Single Rotation is the solution of <strong>Situation One</strong> and <strong>Situation Four</strong>.</p><p><img src="https://sherlockblaze.com/resources/img/cs/trees/avl_situation1&amp;4_solution.png" alt=""></p><p>As we can see above, when we insert a node into the left child of the left subtree of the node with value k2, it will break the balance of the tree.<br>Now we need to do something now.<br>When we finish the insertion, subtree X grown to an extra level, causing it to be exactly two levels deeper than subtree Z.</p><blockquote><p>There’s something we need to notice that <strong>it’s a AVL tree before the insertion</strong>. so Subtree Y cannot at the same level as the new X.</p></blockquote><p>In order to rebalance the tree, we would like to <strong>move X up a level</strong> and <strong>Z down a level</strong>.</p><p>I quote this sentence from the book, <strong>visualize the tree as being flexible, grab the child node k1, close your eyes, and shake it, letting gravity take hold.</strong></p><p>And it becomes the right tree above.</p><p><strong>Why it works?</strong></p><blockquote><p>The binary search tree property tells us that in the original tree k2 &gt; k1, so it can be the right child of k1 in the new tree, and subtree Y, which holds items that are between k1 and k2 in the original tree, can be placed as k2’s left child in the new tree and satisfy all the ordering requirements.</p></blockquote><p><strong>Let us find an example:</strong></p><p><img src="https://sherlockblaze.com/resources/img/cs/trees/avl_situation1&amp;4_solution_example.png" alt=""></p><p><strong>Through the steps we have described above, we will rebalance the tree when we insert node 1 or node 3 and cause the tree become unbalanced.</strong></p><blockquote><p>Now we know how to solve the first situation, In the fourth case, we have already learned that situation one and situation four are mirroring problems. So the steps to solve the problem are just symmetrical.</p></blockquote><h4 id="Double-Rotation"><a href="#Double-Rotation" class="headerlink" title="Double Rotation"></a>Double Rotation</h4><p><strong>This is for the Second situation and the Third situation.</strong></p><blockquote><p><strong><em>Q: We already know how to do a single rotation, but if we do it when we face the second situation and third situation?</em></strong></p></blockquote><p><img src="https://sherlockblaze.com/resources/img/cs/trees/avl_situation2&amp;3_one_rotation.png" alt=""></p><p><strong>It doesn’t work!!!</strong></p><blockquote><p><strong>Q: What should we do now?</strong></p></blockquote><ul><li>First, we make this become the right one.</li></ul><p><img src="https://sherlockblaze.com/resources/img/cs/trees/avl_situation2&amp;3_one_rotation_temp.png" alt=""></p><ul><li>Then we do some rotations on this tree, actually it’s double rotation.</li></ul><p><img src="https://sherlockblaze.com/resources/img/cs/trees/avl_situation2&amp;3_double_rotation.png" alt=""></p><p>After the above study, we know that we cannot let the k1 be the root node, and the one rotation is not work. so, we should place the k3 as the new root, and let the k1 to be k3’s left child, the let the Y1 to be the right subtree of k1, and let the k2 to be the left child of k3, the Y2 to be the left subtree of k2. And then, we finished the rebalance. Maybe my words are complicated(because my English is really bad), but the picture above is clear. Try think about it yourself, if you cannot read my words.</p><blockquote><p>And situation two and situation three are mirroring problems. So, the same idea.<br>And we call the double rotation of second situation <strong>Left-Right</strong>, and for situation three, called <strong>Right-Left</strong>.</p></blockquote><h4 id="Deletion"><a href="#Deletion" class="headerlink" title="Deletion"></a>Deletion</h4><p>Now let’s take a look at the complete code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _AVL_TREES_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _AVL_TREES_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/*_AVL_TREES_H_*/</span></span></span><br><span class="line"><span class="comment">// TODO</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Red-Black Trees</title>
      <link href="/2019/05/05/data-structure/trees/red-black-trees/"/>
      <url>/2019/05/05/data-structure/trees/red-black-trees/</url>
      
        <content type="html"><![CDATA[<h2 id="What’s-it-for"><a href="#What’s-it-for" class="headerlink" title="What’s it for?"></a>What’s it for?</h2><p>We got a binary search tree, and we know that a binary search tree of height <strong><em>h</em></strong> can support any of the basic dynamic-set operations - such as <strong>Search</strong>, <strong>Predecessor</strong> – in <strong><em>O(h)</em></strong> time. <strong><em>The set operations are fast if the height of the search tree is small.</em></strong> So! <strong>If its height is large, the set operations may run no faster than a linked list.</strong></p><h2 id="What’s-it"><a href="#What’s-it" class="headerlink" title="What’s it?"></a>What’s it?</h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>Red-Black trees are one of many search-tree schemes that are “balanced” in order to guarantee that the basic dynamic-set operations take <strong>O(lgN)</strong> time in the worst case.</p><p>So, it’s a better <strong>binary search tree</strong>.</p><h3 id="Basic-Concept"><a href="#Basic-Concept" class="headerlink" title="Basic Concept"></a>Basic Concept</h3><blockquote><p><strong><em>Q: What’s kind of binary search tree is a Red-Black Tree?</em></strong></p></blockquote><ol><li><strong>Every node is either red or black</strong></li><li><strong>The root is black</strong></li><li><strong>Every leaf is black</strong></li><li><strong>If a node is red, then both its children are black</strong></li><li><strong>For each node, all simple paths from the node to descendant leaves contains the same number of black nodes.</strong></li></ol><p><strong>Black-Height</strong>: The number of black nodes on any simple path from, but not including, a node x down to a leaf.</p><h3 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h3><h4 id="Rotations"><a href="#Rotations" class="headerlink" title="Rotations"></a>Rotations</h4><h5 id="What’s-it-for-1"><a href="#What’s-it-for-1" class="headerlink" title="What’s it for?"></a>What’s it for?</h5><p><strong>The operations Insert and Delete modify the tree, the result may violate the red-black properties. We need to do something to restore these properties.</strong></p><h5 id="What’s-it-1"><a href="#What’s-it-1" class="headerlink" title="What’s it?"></a>What’s it?</h5><p><strong>It’s a local operation in a search tree that preserves the binary-search-tree property.</strong></p><h5 id="Operations-1"><a href="#Operations-1" class="headerlink" title="Operations"></a>Operations</h5><p>We show two kinds of rotations here: <strong>Left-Rotate</strong> and <strong>Right-Rotate</strong>.</p><p><img src="https://sherlockblaze.com/resources/img/cs/trees/basic_rotations.png" alt=""></p><blockquote><p>The above two node states are converted by <strong>Left-Rotation</strong> and <strong>Right-Rotation</strong>.</p></blockquote><h5 id="Precedes"><a href="#Precedes" class="headerlink" title="Precedes"></a>Precedes</h5><ul><li>Left-Rotate</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">y = x.right</span><br><span class="line">x.right == y.left</span><br><span class="line"><span class="keyword">if</span> y.left != <span class="literal">NULL</span></span><br><span class="line">    y.left.p = x</span><br><span class="line">y.p = x.p</span><br><span class="line"><span class="keyword">if</span> x.p == <span class="literal">NULL</span></span><br><span class="line">    T.root = y</span><br><span class="line">elseif x == x.p.left</span><br><span class="line">    x.p.left =y</span><br><span class="line"><span class="keyword">else</span> x.p.right = y</span><br><span class="line">y.left = x</span><br><span class="line">x.p = y</span><br></pre></td></tr></table></figure><h4 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h4><h5 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h5><p>In order to insert a new node into a Red-Black Tree in O(lgN) time, we do like this.</p><ol><li><strong>Insert node Z into the tree T as if it were an ordinary binary search tree</strong></li><li><strong>Color Z red</strong></li><li><strong>Fix</strong></li></ol><h5 id="Precedes-1"><a href="#Precedes-1" class="headerlink" title="Precedes"></a>Precedes</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">RB-INSERT(T, z)</span><br><span class="line">y = T.nil</span><br><span class="line">x = T.root</span><br><span class="line"><span class="keyword">while</span> x != T.nil</span><br><span class="line">y = x</span><br><span class="line"><span class="keyword">if</span> z.key &lt; x.key</span><br><span class="line">x = x.left</span><br><span class="line"><span class="keyword">else</span> x = x.right</span><br><span class="line">z.p = y</span><br><span class="line"><span class="keyword">if</span> y == T.nil</span><br><span class="line">T.root = z</span><br><span class="line">elseif z.key &lt; y.key</span><br><span class="line">y.left = z</span><br><span class="line"><span class="keyword">else</span> y.right = z</span><br><span class="line">z.left = T.nil</span><br><span class="line">z.right = T.nil</span><br><span class="line">z.color = RED</span><br><span class="line">RB-INSERT-FIXUP(T, z)</span><br></pre></td></tr></table></figure><p>This is what the simple Insertion do above.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">RB-INSERT-FIXUP(T, z)</span><br><span class="line"><span class="keyword">while</span> z.p.color == RED</span><br><span class="line"><span class="keyword">if</span> z.p == z.p.p.left</span><br><span class="line">y = z.p.p.right</span><br><span class="line"><span class="keyword">if</span> y.color == RED</span><br><span class="line">z.p.color = BLACK</span><br><span class="line">y.color = BLACK</span><br><span class="line">z.p.p.color = RED</span><br><span class="line">z = z.p.p</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> z == z.p.right</span><br><span class="line">z = z.p</span><br><span class="line">Left-Rotate(T, z)</span><br><span class="line">z.p.color = BLACK</span><br><span class="line">z.p.p.color = RED</span><br><span class="line">Right-Rotate(T, z.p.p)</span><br><span class="line"><span class="keyword">else</span>(same as then clause with <span class="string">"right"</span> <span class="keyword">and</span> <span class="string">"left"</span> exchanged)</span><br><span class="line">T.root.color = BLACK</span><br></pre></td></tr></table></figure><p>Now let’s take a look at the complete code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _AVL_TREES_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _AVL_TREES_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/*_AVL_TREES_H_*/</span></span></span><br><span class="line"><span class="comment">// TODO</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binary Search Tree</title>
      <link href="/2019/05/05/data-structure/trees/binary-search-tree/"/>
      <url>/2019/05/05/data-structure/trees/binary-search-tree/</url>
      
        <content type="html"><![CDATA[<h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p><strong>Searching is the most useful application of binary trees.</strong></p><p><img src="https://sherlockblaze.com/resources/img/cs/trees/what_is_binary_search_tree.png" alt=""></p><p>There’re two binary tree. But only the left one is binary search tree.</p><p><strong><em>So, what makes a binary tree into a binary search tree?</em></strong></p><blockquote><p>The property that makes a binary tree into a binary search tree is that for <strong>every</strong> node N, the values of all the nodes in its left subtree are <strong>smaller</strong> than the value of N.<br>Absolutely, in the right tree of picture above, there’s a number 8 is bigger than root node in its left subtree.</p></blockquote><h2 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h2><ul><li><a href="#make-empty">Make Empty</a></li><li><a href="#find">Find</a></li><li><a href="#Insert">Insert</a></li><li><a href="#Delete">Delete</a></li></ul><p>Now we can define some operations on Binary Search Tree.</p><h3 id="Make-Empty"><a href="#Make-Empty" class="headerlink" title="Make Empty"></a>Make Empty</h3><p>This operation is mainly for initialization. Note that because of the recursive definition of trees, it’s common to write these routines recursively. And because the average depth of a binary search tree is O(logN), so we also don’t need to worry about running out of stack space. And an initialization operation is also a simple routine. We can see more the <a href="../../trees/binary_search_trees.h">code</a>.</p><h3 id="Find"><a href="#Find" class="headerlink" title="Find"></a>Find</h3><p>Or we can call it search. Because of the definition of binary search trees, we can do some find operations easily, for example, find the max number of this tree, or find the min number of this tree, or maybe find some numbers we want. It’s all can be easy to implement.</p><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><p>Throw the problem directly. If we always insert a node with a value bigger than value of all the nodes,  the tree can be like this.</p><p><img src="https://sherlockblaze.com/resources/img/cs/trees/tree_with_2_much_big_value.png" alt=""></p><p>or if with a value smaller that value of all the nodes, it’s just exactly the opposite.</p><p>But if we do like this, it broke the hope of binary tree – the average of depth of a binary search tree is O(logN). We absolutely don’t want this, this denies the meaning of the tree. So, what we should do when we facing the situation?</p><p>We’ll talk more about this when we learn about <a href="https://sherlockblaze.com/2019/05/05/basic/data-structure/trees/avl-tree/">AVL Tree</a></p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>There’s same problem with deletion like insertion.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binary Tree</title>
      <link href="/2019/05/05/data-structure/trees/binary-trees/"/>
      <url>/2019/05/05/data-structure/trees/binary-trees/</url>
      
        <content type="html"><![CDATA[<h2 id="Definitions"><a href="#Definitions" class="headerlink" title="Definitions"></a>Definitions</h2><p><strong>A binary tree is a tree in which NO node can have more than two children.</strong></p><p>It’s look like this.</p><p><strong><em>No node have more than two children !!!</em></strong> </p><blockquote><p>Other than this, there is no more difference with the tree.</p></blockquote><p><img src="https://sherlockblaze.com/resources/img/cs/trees/binary_tree_definition.png" alt="Binary Tree Definition"></p><p>A property of a binary tree that is sometimes important is that the depth of an average binary tree is considerably smaller than N.</p><p><img src="https://sherlockblaze.com/resources/img/cs/trees/worst_binary_tree.png" alt="Worst Binary Tree"></p><p>It’s the worst situation above. It becomes a linked list already. That’s not what we want.</p><p>And an analysis shows that the average depth is <img src="../../pic/trees/O_N.png" alt="">, and that for a special type of binary tree, namely <strong><em>binary search tree.</em></strong> The average value of the depth is O(logN).</p><h4 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h4><p>We just talk about traverse of a binary tree here. And we’ll do more, for example, insertion and deletion when we implement binary search tree.</p><h5 id="Traverse"><a href="#Traverse" class="headerlink" title="Traverse"></a>Traverse</h5><p>We have three ways of traversing.</p><p><strong>inorder traversal</strong>: <strong><em>[left, node, right]</em></strong></p><p>Means we traverse the left child of a node first, then itself, finally  its right child. We do it for all nodes in the same tree until the traverse finish. <strong><em>Similar below</em></strong>.</p><p><strong>postorder traversal</strong>: <strong><em>[left, right, node]</em></strong></p><p><strong>preorder traversal</strong>: <strong><em>[node, left, right]</em></strong></p><p>In fact, we still have a way of traversing: <strong>Hierarchical traversal</strong>. It’s from top to bottom, starting from the layer of root node, from left to right, traversing all nodes layer by layer.</p><p>We’ll implement those above.</p><h5 id="Insertion"><a href="#Insertion" class="headerlink" title="Insertion"></a>Insertion</h5><p>Different binary trees have different ways of insertion. In first version, the simplest binary tree, We insert it as a complete binary tree.</p><h5 id="Deletion"><a href="#Deletion" class="headerlink" title="Deletion"></a>Deletion</h5><p>Same as insertion.</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><p>The binary tree is simple and efficient. But there are many different implementations for different functions. Some implementations are relatively difficult to understand, but rest assured, I will do my best to explain clearly through the codes and documentations.</p><p>Now let’s take a look at the complete code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _BINARY_TREES_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _BINARY_TREES_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/*_BINARY_TREES_H_*/</span></span></span><br><span class="line"><span class="comment">// TODO</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BAETYL</title>
      <link href="/2019/04/12/architecture/baetyl/"/>
      <url>/2019/04/12/architecture/baetyl/</url>
      
        <content type="html"><![CDATA[<h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><p>这次主要跟大家分享一下 baetyl 架构和核心功能实现，随着时代的发展，边缘计算受到的关注也越来越多，最近通信行业的快速发展，也推动了边缘计算的发育。baetyl 作为百度第一款开源边缘计算框架，有很多值得分享的地方。个人功力还比较浅，覆盖面可能不够全面，欢迎大家提问或纠正。</p><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><h3 id="为什么要做边缘计算？"><a href="#为什么要做边缘计算？" class="headerlink" title="为什么要做边缘计算？"></a>为什么要做边缘计算？</h3><ol><li>先从网络的角度考虑，随着时代的发展，我们需要移动网络有能力发现离用户比较近的边缘节点实现流量就近出，并且可以满足计费、安全监管等网络运维要求。</li><li>再从云来考虑。有部分企业级用户不太能接受数据完全上云的方案。这就需要边缘计算资源具备弹性、可调度性，能够配合业务逻辑实现资源的合理分配，实现计算能力到边缘的延伸。</li><li>发展通用的平台计算的能力。</li></ol><h3 id="边缘和云端之间的关系"><a href="#边缘和云端之间的关系" class="headerlink" title="边缘和云端之间的关系"></a>边缘和云端之间的关系</h3><p>边缘计算可以理解成云计算的一个扩展，云端可以提供一些 Web Services，提供存储，模型训练等功能，但是有一些工作，在云端是很难触及到的，比如视频流的采集，以及一些IoT业务范围的事情。所以边缘计算对于云端来说起到了一个能力上的补充。另外，由于一些数据敏感性、处理时延的问题，部分工作放在端上处理显的更加合适。</p><p>从上面的角度来考虑，边缘计算对云市场来说是很大的一个机会。</p><ol><li>流量问题，我们不可能，或者说不被允许，将大量的数据传输到云端，一个是从安全性角度考虑，一个是实际流量上的问题，如果全部上传，所有的计算都发生在云端，显然需要巨大的流量。</li><li>时延，就像刚刚说的，如果所有的计算发生在云端，我们需要经历数据上传、云端服务进行计算、响应、响应处理这几个大过程，时效性上显然存在问题，特别是对于一些需要低时延的功能或操作。</li></ol><p>同时，我们也涉及到了一个问题，也就是动态调度，因为在边缘设备大多性能偏差、远远不如云端服务器强大，所以我们需要对资源进行动态的管理。这里主要涉及到两个方面：</p><ol><li>云计算中心和边缘设备之间的调度</li><li>边缘设备之间的调度</li></ol><h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>目前我们的边缘计算分为了两部分一个是我们的通用框架，也就是今天要讲的主题 baetyl，另一个就是 BIE。</p><p>我们主要分享一下 baetyl Framework。</p><h3 id="我们想要做成什么样？"><a href="#我们想要做成什么样？" class="headerlink" title="我们想要做成什么样？"></a>我们想要做成什么样？</h3><ol><li>独立于硬件，尽量放大终端设备的运行能力，为此我们采用了 Pure Golang 来编写程序，借用到了 Golang 的跨平台能力，并且在程序中全部使用静态链接。当然，现在我们也在探索 Rust 的可能性。</li><li>支持各种类型的应用程序，从较小的层面上来讲，我们提供了一个 Function Manager，用于启动不同的函数计算，来进行函数实例管理和消息出发的函数调用。从一个更大的层面来说，我们所有的除主程序之外的内容，都可以称为是一个应用程序，包括一些我们官方提供的一些模块，比如 <code>baetyl-agent</code>，<code>baetyl-hub</code> 等，都可以算作一个应用程序，一个模块，都可以进行替换或者和其他模块进行组合完成功能上的扩展。</li><li>支持在线管理和离线运行，我们提供了一个 agent 模块，用于和云端进行交互，目前我们支持硬件状态的上报，和服务OTA，现在的情况是，进行服务OTA时，会关闭原先老的服务，再按照配置重新启动服务。目标情况是保持未发生变更服务的运行。</li></ol><h3 id="baetyl-框架期待解决的问题"><a href="#baetyl-框架期待解决的问题" class="headerlink" title="baetyl 框架期待解决的问题"></a>baetyl 框架期待解决的问题</h3><p>那我们需要解决的问题有哪些呢？</p><ol><li>对硬件做抽象，上面提到，我们通过使用纯粹的 Golang 来编写框架，利用 Golang 本身强大的跨平台能力，尽可能的去屏蔽底层硬件的差别。</li><li>对 App 提供 Runtime，对用户自定义的函数，我们需要尽可能的提供所需的运行环境，比如目前已有的 Python Runtime，到后面会支持的 Java、NodeJs、Go等等。</li><li>提供 SDK 和 Service，我们需要为开发者提供更便捷的方式，去使用我们的 baetyl 框架，在 baetyl 框架的基础上进行开发。目前在 SDK 上我们做了这样一些操作，提供了 Dataset（静态数据集），用来存储一些配置文件，可执行文件之类，另外还提供了 Volume（动态存储集），对于一些数据，我们需要做持久化，或者记录日志，我们通过动态数据集，用挂载的方式来实现。</li></ol><h3 id="目前怎么做的？"><a href="#目前怎么做的？" class="headerlink" title="目前怎么做的？"></a>目前怎么做的？</h3><p>接下来我们切入正题，从我目前了解的角度来分析一下已有的架构。架构图如下：</p><p><img src="https://sherlockblaze.com/resources/img/profession/architectures/baetyl-architecture.png" alt="baetyl-architectures"></p><p>我们知道，一个程序或者说一个软件，主要做的事情有这三件：</p><ol><li>输入</li><li>计算</li><li>输出</li></ol><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>那么我们如何处理输入问题呢？</p><p>我们完成了一个模块，叫 <code>baetyl-hub</code>，它主要提供基于 MQTT 的消息路由服务。完成对我们的输入进行接受、分发的操作。</p><p>目前我们支持 4 种接入方式：</p><ol><li>TCP</li><li>SSL（TCP + SSL）</li><li>WS（Websocket）</li><li>WSS（Websocket + SSL）</li></ol><p>其中，如果使用证书双向认证，Client 必须在连接时发送 非空 的 username 和 空 的 password ，username 会用于主题鉴权。如果 password 不为空，则还会进一步检查密码是否正确</p><p>而对于 MQTT 协议支持度大概是：</p><ol><li>支持 Connect、Disconnect、Subscribe、Publish、Unsubscribe、Ping 等功能</li><li>支持 QoS 等级 0 和 1 的消息发布和订阅</li><li>支持 Retain、Will、Clean Session</li><li>支持订阅含有 +、# 等通配符的主题</li><li>支持符合约定的 ClientID 和 Payload 的校验</li><li>暂时 不支持 发布和订阅以 $ 为前缀的主题</li><li>暂时 不支持 Client 的 Keep Alive 特性以及 QoS 等级 2 的发布和订阅</li></ol><p>如我们上面所说，虽然是官方模块，但如果该模块无法满足要求，是可以使用第三方的 MQTT Broker/Server 来进行替换的。</p><h4 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h4><p>对于计算，我们提供了 <code>baetyl-function-manager</code> 模块，基于 MQTT 消息机制，支持弹性、高可用、可扩展、响应快的计算能力。函数计算模块通过从 <code>hub</code> 模块接受消息，触发功能，调用主程序提供的 API 来实现函数实例的启停，通过配置文件中 <code>instance</code> 的字段，来界定所能启动的函数实例个数。</p><p>我们目前提供到的函数 runtime 有 <code>baetyl-function-python27</code>、<code>baetyl-function-python36</code> 以及 <code>opendge-function-sql</code>。</p><p>设计的思路基本是相同的，我们以 <code>baetyl-function-python27</code> 作为例子做一次比较浅显的讲解。</p><p><code>baetyl-function-python27</code> 提供的 Python 函数和 <code>CFC（Cloud Function Compute）</code> 类似，用户可以通过编写的自己的函数来处理消息，可进行消息的过滤、转换和转发等，使用上非常灵活。特别的是，该模块还可以作为 GRPC 服务单独启动，也可以为函数管理模块提供函数运行实例。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>我们处理输出的方式比较多样，比如，我们可以定制 <code>BOS</code> 模块，将我们需要的数据上传到 BOS，或者写到持久化文件里，或者利用 Kafka等等。在我们目前已有的官方模块里，我们提供了 <code>baetyl-remote-mqtt</code> 模块，用来做远程信息同步。在设计上，这个模块的思路主要是作为一个 <code>MQTT Client</code> 从 <code>baetyl-hub</code> 模块中接受数据，然后转发到另一个远程的 <code>MQTT Server</code> 上。</p><h3 id="在线管理"><a href="#在线管理" class="headerlink" title="在线管理"></a>在线管理</h3><p>从目前的描述来看，我们主要了解了在端上如何进行消息的收发，利用函数运行时实例以及CFC来进行消息的处理。那我们如何管理这些模块呢？</p><p>因为我们的设计目标其实是，在用户启动这些模块之后，不再需要在端上进行操作，而把控制的内容转移到云上，也就是我们先前说的支持在线管理，我们提供了一个模块 <code>baetyl-agent</code>，作为一个代理服务，和云端进行交互，提供云端控制的能力。</p><p>连接方式上，<code>agent</code> 拥有 MQTT 和 HTTPS 通道，MQTT 强制 SSL/TLS 证书双向认证，HTTPS 强制 SSL/TLS 证书单向认证。</p><p>功能上，<code>agent</code> 模块目前就做两件事：</p><ol><li>启动后定时向主程序获取状态信息并上报给云端</li><li>监听云端下发的事件，触发相应的操作，目前只处理应用 OTA 事件</li></ol><p>所以说，<code>agent</code> 模块赋予了我们从云端管理端上 baetyl 的能力。但如果想实现离线运行，只需要关闭端上运行的 <code>agent</code> 模块，就可以实现 <code>baetyl</code> 的离线运行，当然也可以在网络不好的情况下被迫离线运行。</p><h3 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h3><p>上面大概简述了各个模块的功能和大致的设计思想，那我们如何启动这些模块呢？答案是 baetyl 主程序。通过 baetyl 主程序提供的命令行，我们可以很方便的进行 baetyl 系统的启停。</p><p>主程序主要由两个部分组成：</p><ol><li>RESTFUL API</li><li>Engine 系统</li></ol><h4 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a>Restful API</h4><p>Restful API 主要用来提供一些通用的 API 供其他模块使用，目前提供的接口有一下五个：</p><ol><li>GET  <code>/system/inspect</code> 用于获取系统信息和状态</li><li>PUT  <code>/system/update</code> 更新系统和服务</li><li>GET <code>/ports/available</code> 获取宿主机的空闲端口</li><li>PUT <code>/services/{serviceName}/instances/{instanceName}/start</code> 动态启动某个服务的一个实例</li><li>PUT <code>/services/{serviceName}/instances/{instanceName}/stop</code> 动态停止某个服务的某个实例</li></ol><p>接口暴露的方式有两种，一种是在 Linux 平台下，使用 <code>Unix Domain Socket</code>，默认地址为 <code>/var/run/baetyl.sock</code>，其他平台则使用 TCP 的方式，默认地址是 <code>tcp://127.0.0.1:50050</code>。</p><p>既然涉及到接口的调用，我们就需要考虑到鉴权问题，目前主程序采用的鉴权方式为动态 Token，主程序在启动服务时，会为每一个服务动态生成一个 Token，将服务名和Token以环境变量的方式传入服务实例，实例读取后放入请求的 Header 中发给主程序即可。由于动态实例并非通过主程序来启动，所以动态实例没有启动其他实例的权利。</p><h4 id="引擎系统"><a href="#引擎系统" class="headerlink" title="引擎系统"></a>引擎系统</h4><p>目前我们的 baetyl 提供了两种运行模式：</p><ol><li>Docker 容器模式</li><li>Native 进程模式</li></ol><p>目前我们已经在很大程度上，实现了两种模式下配置项的统一，在支持 Docker 的运行环境下，我们更建议使用 Docker 容器模式方式的运行，而在不支持容器模式的硬件平台下，我们通过 Native 模式，以存储卷的方式尽可能的模仿容器模式的运行形式。</p><h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><p>至此，我们对 baetyl 架构的大致介绍基本就结束了。接下来，从我个人的视角来展望一下 baetyl 可能的发展。</p><ul><li>从纵向的角度来看，也就是边缘计算的出发点，我们希望用户在端上启动 baetyl 系统后，无需再直接操作端上设备进行控制，所有的管理操作，都可以在云端完成，这样的情况下，目前的操作系统提供的很多功能，我们都是用不上的。不如对其做一些裁剪，通过 <code>Linux Kernl + init</code> 的组合，来实现一个 <code>baetyl</code> 的启动，完成一个 <code>baetyl OS</code>。</li></ul><p>同时我们也可以通过直接的 <code>containerd</code> 来实现容器的运行，取代 <code>Docker</code>，因为目前的情况来说，Docker 项目正在不断膨胀，变得越来越大，而且在硬件能力较差的端设备上，需要占用更多的资源，造成比较大的性能占用。</p><ul><li>从横向的角度来看，边缘计算节点未来一定是分布式，可扩展的。我们可以通过启动多个 <code>baetyl OS</code>，并且选中一台服务器，启动 <code>Kubernetes</code> 的管理模块，一方面和其他 baetyl 节点建立联系，一方面，向云端开放远程管理能力。</li></ul><h2 id="Recap"><a href="#Recap" class="headerlink" title="Recap"></a>Recap</h2><p>到这里，我们这次的分享就结束了，主要分享了一下 baetyl 框架在实现我们三个目标上所做的事情：</p><ol><li>独立于硬件</li><li>支持各种类型的应用程序</li><li>支持在线管理和离线运行</li></ol><p>谢谢大家。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 网络</title>
      <link href="/2019/03/27/docker/docker-network/"/>
      <url>/2019/03/27/docker/docker-network/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文为学习笔记，内容来自于 <a href="https://item.jd.com/12200103.html" target="_blank" rel="noopener">《每天五分钟玩转 Docker 容器技术》</a></p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li>Docker 提供的几种原生网络</li><li>创建自定义网络</li><li>容器之间如何通信</li><li>容器与外界如何交互</li></ol><h2 id="原生网络"><a href="#原生网络" class="headerlink" title="原生网络"></a>原生网络</h2><blockquote><p>Docker 在安装时会自动在 host 上创建三个网络，使用命令 <code>docker network ls</code> 查看。得到如下输出：</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line"></span><br><span class="line">c760fab58f72       <span class="built_in"> bridge </span>            <span class="built_in"> bridge </span>             local</span><br><span class="line">d42648b05ee4        host                host                local</span><br><span class="line">fcc455e2c312        none                <span class="literal">null</span>                local</span><br></pre></td></tr></table></figure><p>由上述内容可知，docker 提供了三个原生网络，分别是： <code>bridge</code>、<code>host</code>、<code>none</code></p><h3 id="none-网络"><a href="#none-网络" class="headerlink" title="none 网络"></a>none 网络</h3><p>顾名思义，none 网络就是什么都没有的网络，启动容器时，如果使用 <code>--network=none</code> 来指定使用 <code>none</code> 网络，那么该容器的网络环境便是封闭的，而封闭，意味着隔离。挂在这个网络下的除了 <code>lo</code>，没有其他任何网卡。</p><p>一般来说，对于一些安全性要求较高，并且不需要联网的应用可以使用 <code>none</code> 网络。</p><p><strong>注</strong>： <code>lo</code> 及 <code>localhost</code> 缩写。</p><h3 id="host-网络"><a href="#host-网络" class="headerlink" title="host 网络"></a>host 网络</h3><p>通过 <code>--network=host</code> 指定容器使用 <code>host</code> 网络。<strong>连接到 host 网络的容器共享 Docker host(即安装 Docker 应用的主机) 的网络栈。</strong></p><p>在宿主机上执行命令 <code>ip l</code> 得到如下输出：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode<span class="built_in"> DEFAULT group default </span>qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: enp2s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode<span class="built_in"> DEFAULT group default </span>qlen 1000</span><br><span class="line">    link/ether 98:ee:cb:6e:55:b3 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">4: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode<span class="built_in"> DEFAULT group default </span></span><br><span class="line">    link/ether 02:42:d2:c5:c5:23 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">5: vpn0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1418 qdisc fq_codel state UP mode<span class="built_in"> DEFAULT group default </span>qlen 500</span><br><span class="line">    link/none </span><br><span class="line">30: veth8bd9ae5@if29: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP mode<span class="built_in"> DEFAULT group default </span></span><br><span class="line">    link/ether 4e:6c:2c:2d:68:4f brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br></pre></td></tr></table></figure><p>执行以下命令运行 <code>busybox</code> 容器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --network=host busybox</span><br></pre></td></tr></table></figure><p>进入容器后执行命令 <code>ip l</code> 得到如下输出：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/ # <span class="built_in">ip</span> l</span><br><span class="line"><span class="number">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="number">65536</span> qdisc noqueue qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="keyword">brd </span><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">2</span>: enp2s0: &lt;<span class="keyword">BROADCAST,MULTICAST,UP,LOWER_UP&gt; </span>mtu <span class="number">1500</span> qdisc fq_codel qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">98</span>:ee:cb:<span class="number">6</span>e:<span class="number">55</span>:<span class="keyword">b3 </span><span class="keyword">brd </span>ff:ff:ff:ff:ff:ff</span><br><span class="line"><span class="number">4</span>: docker0: &lt;<span class="keyword">BROADCAST,MULTICAST,UP,LOWER_UP&gt; </span>mtu <span class="number">1500</span> qdisc noqueue </span><br><span class="line">    link/ether <span class="number">02</span>:<span class="number">42</span>:<span class="built_in">d2</span>:<span class="built_in">c5</span>:<span class="built_in">c5</span>:<span class="number">23</span> <span class="keyword">brd </span>ff:ff:ff:ff:ff:ff</span><br><span class="line"><span class="number">5</span>: vpn0: &lt;POINTOPOINT,<span class="keyword">MULTICAST,NOARP,UP,LOWER_UP&gt; </span>mtu <span class="number">1418</span> qdisc fq_codel qlen <span class="number">500</span></span><br><span class="line">    link/[<span class="number">65534</span>] </span><br><span class="line"><span class="number">30</span>: veth8bd9ae5<span class="comment">@if29: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue master docker0 </span></span><br><span class="line">    link/ether <span class="number">4</span>e:<span class="number">6</span>c:<span class="number">2</span>c:<span class="number">2</span>d:<span class="number">68</span>:<span class="number">4</span>f <span class="keyword">brd </span>ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure><p>通过两者输出的内容我们可以确定指定使用 <code>host</code> 网路的容器确实使用了和宿主机相同的网络栈。</p><p>使用 <code>host</code> 机网络有如下几个点需要清楚：</p><ol><li>使用该网络最大的优点就是性能，如果容器对网络传输效率有比较高的要求，可以选择使用 host 网络</li><li>但如果使用该网络模式，那么必然会损失一些灵活性，比如端口冲突问题，在宿主机上使用过的端口，就无法再在容器中使用了</li></ol><h3 id="bridge-网络"><a href="#bridge-网络" class="headerlink" title="bridge 网络"></a>bridge 网络</h3><p>Docker 安装时会默认创建一个名称为 docker0 的 Linux bridge。如果不指定 <code>--network</code> 参数，创建的容器默认都会挂到 docker0 上。</p><p>使用命令 <code>brctl show</code> 查看宿主机上 bridge 网络的情况，得到如下输出：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bridge name<span class="built_in"> bridge </span>id       STP enabled interfaces</span><br><span class="line">docker0     8000.0242d2c5c523   <span class="literal">no</span></span><br></pre></td></tr></table></figure><p>可以观察到，目前 docker0 上没有挂载任何网络设备。我们执行如下命令运行 busybox:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it busybox</span><br></pre></td></tr></table></figure><p>继续输入命令 <code>brctl show</code> 查看 bridge 网络情况：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bridge name<span class="built_in"> bridge </span>id       STP enabled interfaces</span><br><span class="line">docker0     8000.0242d2c5c523   <span class="literal">no</span>      veth4317eb1</span><br></pre></td></tr></table></figure><p>我们惊喜的发现 interfaces 下显示了一个网卡地址，这个地址就是容器的虚拟网卡，名为 <code>veth4317eb1</code>。</p><p>在运行的 busybox 容器中执行命令 <code>ip a</code> 得到如下输出：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: lo: &lt;LOOPBACK,<span class="meta">UP</span>,LOWER_UP&gt; mtu <span class="number">65536</span> qdisc noqueue qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    inet <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">31</span>: eth0@if32: &lt;BROADCAST,MULTICAST,<span class="meta">UP</span>,LOWER_UP,M-<span class="meta">DOWN</span>&gt; mtu <span class="number">1500</span> qdisc noqueue </span><br><span class="line">    link/ether <span class="number">02</span>:<span class="number">42</span>:ac:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet <span class="number">172.17</span><span class="meta">.0</span><span class="meta">.2</span>/<span class="number">16</span> brd <span class="number">172.17</span><span class="meta">.255</span><span class="meta">.255</span> scope <span class="meta">global</span> eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>我们会发现，除了原本有的　<code>lo</code> 网卡，还多出了一个名为 <code>eth0@if32</code> 的网卡。</p><p>在这段内容里面，关于 <code>eth0@if32</code> 和 <code>veth4317eb1</code> 的关系，实际上，是一对 <code>veth pair</code>。</p><p><strong><code>veth pair</code> 是一种成对出现的特殊网络设备，想象成一对由一根虚拟网线连接起来的网卡，网卡的一头是 <code>eth0@if32</code>，它身处容器之中，而另一头 <code>veth4317eb1</code> 则挂在网桥 docker0 上。</strong></p><p>执行命令 <code>docker network inspect bridge</code> 查看到如下内容：</p><p><img src="https://sherlockblaze.com/resources/img/profession/docker/docker-network-inspect-bridge.png" alt=""></p><p>我们注意到在 <code>Config</code> 配置项下，有两个配置项，分别是 <code>subnet</code> 和 <code>Gateway</code>，看到网关的值为 <code>172.17.0.1</code>，而这个网关，就是我们的 <code>docker0</code>。</p><p>此时容器的网络拓扑结构如下图所示：</p><p><img src="https://sherlockblaze.com/resources/img/profession/docker/docker-bridge-config.png" alt=""></p><h2 id="user-defined-网络"><a href="#user-defined-网络" class="headerlink" title="user-defined 网络"></a>user-defined 网络</h2><p>docker 这么灵活好用的玩意，当然不止可以使用原生网络，用户可以自己根据业务需要创建网络。称为 <code>user-defined</code> 网络。</p><p>我们可以使用以下命令创建网络：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network create --driver bridge my_net</span><br></pre></td></tr></table></figure><p>使用上述命令我们创建一个名称为 my_net 的 bridge 网络。分别执行命令 <code>brctl show</code> 和 <code>docker network inspect my_net</code> 可以得到以下输出结果。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ brctl show</span><br><span class="line"></span><br><span class="line">bridge name bridge id       STP enabled interfaces</span><br><span class="line">br-57b3ea2cc45d     8000.02423e9e1e01   no      </span><br><span class="line">docker0     8000.0242d2c5c523   no      veth4317eb1</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker network inspect my_net</span><br></pre></td></tr></table></figure><p><img src="https://sherlockblaze.com/resources/img/profession/docker/docker-network-inspect-my_net.png" alt=""></p><p>上图中，<code>172.21.0.0/16</code> 是 Docker 自动分配的 IP 网段。当然，我们也可以自己指定网段。只需要在创建网段时指定 <code>--subnet</code> 和 <code>--gateway</code> 参数即可。</p><p>执行命令 <code>docker network create --driver bridge --subnet 172.22.16.0/24 --gateway 172.22.16.1 my_net2</code></p><p><img src="https://sherlockblaze.com/resources/img/profession/docker/docker-network-inspect-my_net2.png" alt=""></p><p>接下来我们做实验，首先使用命令 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --network=my_net2 --ip 172.22.16.9 busybox</span><br><span class="line">docker run -it --network=my_net2 --ip 172.22.16.8 busybox</span><br><span class="line">docker run -it --network=my_net busybox</span><br></pre></td></tr></table></figure><p>到这里我们需要知道如下几个事情： </p><ol><li>在前两条命令中我们指定了 <code>ip</code>，想要这样做我们需要在创建网络的时候指定 <code>subnet</code> 配置项</li><li>执行上述命令行后，我们创建出三个容器，且这个状态下的网络拓扑结构如下图所示：</li></ol><p><img src="https://sherlockblaze.com/resources/img/profession/docker/docker-bridge-graph-new.png" alt=""></p><p>接下来我们讨论容器的通信问题。</p><h2 id="容器间通信"><a href="#容器间通信" class="headerlink" title="容器间通信"></a>容器间通信</h2><p><strong>容器之间可以通过 IP、Docker DNS Server 和 joined 容器三种方式通信。</strong></p><h3 id="IP-通信"><a href="#IP-通信" class="headerlink" title="IP 通信"></a>IP 通信</h3><p>根据上段内容，我们得到了三个容器。ip地址分别是： <code>172.22.16.8</code> 、 <code>172.22.16.9</code> 以及 <code>172.21.0.2</code>。</p><p>其中，前两个属于同一个网段，后一个单独一个网段。</p><p>理论上，身处同一个网段中是可以互通的，我们在 IP 为 <code>172.22.16.8</code> 的容器中去 <code>ping</code> IP 为 <code>172.22.16.9</code> 的容器。得到的结果如下图所示：</p><p><img src="https://sherlockblaze.com/resources/img/profession/docker/ping-172-22-16-9.png" alt=""></p><p>以上结果验证了我们的说法，同一网段中的容器的确和 ping 通。</p><p>接下来我们在 IP 为 <code>172.22.16.8</code> 的容器中去 <code>ping</code> IP 为 <code>172.21.0.2</code> 的容器：</p><p><img src="https://sherlockblaze.com/resources/img/profession/docker/ping-172-21-0-2.png" alt=""></p><blockquote><p>不同的网络如果加上路由应该是可以通信的。</p></blockquote><p>在 Docker 宿主机上执行命令 <code>ip r</code>，我们可以得到如下结果：</p><p><img src="https://sherlockblaze.com/resources/img/profession/docker/host-ip-r-router.png" alt=""></p><p>图中我们可以观察到两个网络的路由器， <code>172.22.16.0</code> 以及 <code>172.21.0.0</code>。</p><p>继续执行命令 <code>sysctl net.ipv4.ip_forward</code>，得到如图输出：</p><p><img src="https://sherlockblaze.com/resources/img/profession/docker/check_ipv4_forward.png" alt=""></p><p>由此我们可以确认 ip forwarding 已启用。</p><p>到了这里我们需要查看一下问题所在，因为目前知道通过 IP 进行通信的条件是基本满足的： 1. 两个网络的路由器已经配置完毕 2. ip forwarding 已经启用。</p><p>那么是什么原因导致挂载在两个不同网桥的 busybox 无法互相访问呢？</p><p>执行命令 <code>sudo iptables-save</code> 得到以下结果，然后我们来一探究竟：</p><p><img src="https://sherlockblaze.com/resources/img/profession/docker/ip-table-docker-network.png" alt=""></p><p>在图片的下方我们可以看到如下两行内容：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-A DOCKER-ISOLATION-STAGE<span class="number">-2</span> -o br<span class="number">-2</span>d8877e1871b -j DROP</span><br><span class="line">-A DOCKER-ISOLATION-STAGE<span class="number">-2</span> -o br<span class="number">-57</span>b3ea2cc45d -j DROP</span><br></pre></td></tr></table></figure><p>原来，iptables 把从 <code>br-2d8877e1871b</code> 和 <code>br-57b3ea2cc45d</code> 两个网桥出来的流量都给 DROP 掉了。同时，从命令规则上来看，<code>DOCKER-ISOLATION</code> 的名称，可知 docker 在设计上就是要隔离不同的 network。</p><p>那么在 Docker 中我们如何将两个网络连接起来呢？答案很简单，就是向其中一个 busybox 添加一个网卡，让它和挂载在被添加的网卡上的网络联通。</p><p>执行命令 <code>docker network connect my_net2 8b4a</code> 即可完成。</p><p>接下来我们在 ip 为 <code>172.21.0.2</code> 的 busybox 容器中执行命令 <code>ifconfig</code>，得到如下输出：</p><p><img src="https://sherlockblaze.com/resources/img/profession/docker/ifconfig-after-connect-network.png" alt=""></p><p>我们可以清楚的观察到多了一个 ip 为 <code>172.22.16.2</code> 的网卡 <code>eth1</code>。此时，网络拓扑图如下所示：</p><p><img src="https://sherlockblaze.com/resources/img/profession/docker/docker-bridge-graph-after-connect.png" alt=""></p><p>致此，我们就可以用新 IP 让三个 busybox 实现互通了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How Linux Works(Chapter Five)--How the Linux Kernel Boots</title>
      <link href="/2019/03/12/linux/how-linux-works/how-the-linux-kernel-boots/"/>
      <url>/2019/03/12/linux/how-linux-works/how-the-linux-kernel-boots/</url>
      
        <content type="html"><![CDATA[<blockquote><p>All the summaries are from the book named <strong><a href="https://www.amazon.com/How-Linux-Works-2nd-Superuser/dp/1593275676/ref=sr_1_1?keywords=how+linux+works&amp;qid=1551169061&amp;s=gateway&amp;sr=8-1" target="_blank" rel="noopener">How Linux Works</a></strong>.</p></blockquote><p>Learn about how the kernel moves into memory up to the point where the first user process starts.</p><p>A simplified view of the boot process looks like this:</p><ol><li>The machine’s BIOS or boot firmware loads and runs a boot loader.</li><li>The boot loader finds the kernel image on desk, loads it into memory, and starts it.</li><li>The kernel initializes the devices and its drivers</li><li>The kernel mounts the root filesystem.</li><li>The kernel starts a program called <code>init</code> with a process ID of 1. This point is the <strong><em>user space start</em></strong>.</li><li><code>init</code> sets the rest of system processes in motion.</li><li>At some point, <code>init</code> starts a process allowing you to log in, usually at the end or near the end of the boot.</li></ol><h2 id="Kernel-Initialization-and-Boot-Options"><a href="#Kernel-Initialization-and-Boot-Options" class="headerlink" title="Kernel Initialization and Boot Options"></a>Kernel Initialization and Boot Options</h2><p>Linux kernel initializes in this general order:</p><ol><li>CPU inspection</li><li>Memory inspection</li><li>Device bus discovery</li><li>Device discovery</li><li>Auxiliary kernel subsystem setup(networking, and so on)</li><li>Root filesystem mount</li><li>User space start</li></ol><h2 id="Kernel-Parameters"><a href="#Kernel-Parameters" class="headerlink" title="Kernel Parameters"></a>Kernel Parameters</h2><p>When running the Linux kernel, the boot loader passes in a set of text-based kernel parameters that tell the kernel how it should start.</p><p>The parameters specify many different types of behavior, such as the amount of diagnostic output the kernel should produce and device driver-specific options.</p><p>You can review the kernel parameters from your system’s boot by looking at the <code>/proc/cmdline</code> file:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/cmdline</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOT_IMAGE=/boot/vmlinuz<span class="number">-4.18</span><span class="number">.0</span><span class="number">-16</span>-generic root=UUID=<span class="number">91</span>ffe6ed<span class="number">-09</span>ff<span class="number">-4355</span><span class="number">-880</span>d-fc1a4aaac6ba ro quiet splash vt.handoff=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>The parameters are either simple one-word flags, such as <code>ro</code> and <code>quiet</code>, or <strong><em>key=value</em></strong> pairs, such as <strong><em>vt.handoff=7</em></strong>. Many of the parameters are unimportant, such as the <code>splash</code> flag <strong>for displaying a splash screen,</strong> but one that is critical is the <code>root</code> parameter. This is the location of the root filesystem; without it, the kernel cannot find <code>init</code> and therefore cannot perform the user space start.</p><p>The root filesystem can be specified as a device file, such as in this example:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">root</span>=/dev/sda1</span><br></pre></td></tr></table></figure><p>However, on most modern desktop systems, a UUID is more common:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root=UUID=<span class="number">91</span>ffe6ed<span class="number">-09</span>ff<span class="number">-4355</span><span class="number">-880</span>d-fc1a4aaac6ba</span><br></pre></td></tr></table></figure><p>The <code>ro</code> parameter is normal; <strong>It instructs the kernel to mount the root filesystem in read-only mode upon user space start.</strong> (Read-only mode ensures that <code>fsck</code> can check the root filesystem safely; after the check, the bootup process remounts the root filesystem in read-write mode.)</p><p>Upon encountering a parameter that it does not understand, the Linux kernel saves the parameter. The kernel later passes the parameter to <code>init</code> when performing the user space start. For example, if you add <code>-s</code> to the kernel parameters, the kernel passes the <code>-s</code> to the <code>init</code> program to indicate that it should start in single-user mode.</p><p>Now let’s look at the mechanics of how <strong>boot loaders</strong> start the kernel.</p><h2 id="Boot-Loaders"><a href="#Boot-Loaders" class="headerlink" title="Boot Loaders"></a>Boot Loaders</h2><p><strong>At the start of the boot process, before the kernel and <code>init</code> start, a boot loader starts the kernel.</strong></p><p>The task of a boot loader sounds simple: <strong>It loads the kernel into memory, and then starts the kernel with a set of kernel parameters.</strong> But consider the questions that the boot loader must answer:</p><ul><li>Where is the kernel?</li><li>What kernel parameters should be passed to the kernel when it starts?</li></ul><p>The answers are (typically) that the kernel and its parameters are usually somewhere on the <strong>root filesystem</strong>. It sounds like the kernel parameters should be easy to find, except that the kernel is not yet running, so it can’t traverse a filesystem to find necessary files. Worse, the kernel device drivers normally used to access the disk are also unavailable. Think of this as a kind of “chicken or egg” problem.</p><p>Let’s start with the driver concern. On PCs, <strong>boot loaders use the Basic Input/Output System(BIOS) or Unified Extensible Firmware Interface(UEFI) to access disks.</strong> <strong><em>Nearly all disk hardware has firmware that allows the BIOS to access attached storage hardware with Linear Block Addressing(LBA).</em></strong> Although it exhibits poor performance, this mode of access does allow universal access to disks. <strong>Boot loaders are often the only programs to use the BIOS for disk access;</strong> the kernel uses its own high-performance drivers.</p><p>Most modern boot loaders can read partition tables and have built-in support for read-only access to filesystems. Thus, they can find and read files. This capability makes it far easier to dynamically configure and enhance the boot loader. Linux boot loaders have not always had this capability; without it, configuring the boot loader was more difficult.</p><h3 id="Boot-Loader-Tasks"><a href="#Boot-Loader-Tasks" class="headerlink" title="Boot Loader Tasks"></a>Boot Loader Tasks</h3><p>A Linux boot loader’s core functionality includes the ability to do the following:</p><ul><li>Select among multiple kernels.</li><li>Switch between sets of kernel parameters.</li><li>Allow the user to manually override and edit kernel image names and parameters.(for example, to enter single-user mode).</li><li>Provide support for booting other operating systems.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How Linux Works(Chapter Three)--Devices</title>
      <link href="/2019/03/11/linux/how-linux-works/devices/"/>
      <url>/2019/03/11/linux/how-linux-works/devices/</url>
      
        <content type="html"><![CDATA[<blockquote><p>All the summaries are from the book named <strong><a href="https://www.amazon.com/How-Linux-Works-2nd-Superuser/dp/1593275676/ref=sr_1_1?keywords=how+linux+works&amp;qid=1551169061&amp;s=gateway&amp;sr=8-1" target="_blank" rel="noopener">How Linux Works</a></strong>.</p></blockquote><p>Throughout the history of Linux, there have been many changes to how the kernel presents  devices to the user. We’ll begin by looking at the traditional system of device files to see how the kernel provides device configuration information through <code>sysfs</code>.</p><p><strong>Goal:</strong> </p><ol><li>Be able to extract information about the devices on a system in order to understand a few rudimentary operations.</li><li>Understand how the kernel interacts with user space when presented with new devices. The <code>udev</code> system enables user-space programs to automatically configure and use new devices.</li></ol><h2 id="Device-Files"><a href="#Device-Files" class="headerlink" title="Device Files"></a>Device Files</h2><p><strong>It’s easy to manipulate most devices on a Unix system because the kernel presents many of the device I/O interfaces to user processes as files.</strong></p><p>These device files are sometimes called <strong><em>device nodes.</em></strong></p><p>There’s a limit to what you can do with a file interface, so not all devices or device capabilities are accessible with standard file I/O.</p><p>Using command <code>ls -l</code> and get result like this:</p><p><img src="https://sherlockblaze.com/resources/img/profession/linux/how-linux-works/ls-l-command.png" alt="ls -l"></p><p>Note the first character of each line(the first character of the file’s mode), if this character is <code>b</code>, <code>c</code>, <code>p</code> or <code>s</code>, the file is a device. These letters stand for <code>block</code>, <code>pipe</code>, and <code>socket</code>, respectively.</p><h3 id="Block-device"><a href="#Block-device" class="headerlink" title="Block device"></a>Block device</h3><ul><li>Program access data from a <strong><em>block device</em></strong> in fixed chunks, The <code>sda</code> in the preceding example is a <strong><em>disk device</em></strong>, a type of block device. Disk can be easily split up into blocks of data. Because a block device’s total size is fixed and easy to index, processes have random access to any block in the device with the help of the kernel.</li></ul><h3 id="Character-device"><a href="#Character-device" class="headerlink" title="Character device"></a>Character device</h3><ul><li>Character devices work with data streams. You can only read characters from or write characters to character devices, as previously demonstrated with <code>/dev/null</code>. Character devices don’t have a size; <strong>when you read from or write to one, the kernel usually performs a read or write operation on the device.</strong> Printers directly attached to your computer are represented by character devices. <strong>It’s important to note that during character device interaction, the kernel cannot back up and reexamine the data stream after it has passed data to a device or process.</strong></li></ul><h3 id="Pipe-device"><a href="#Pipe-device" class="headerlink" title="Pipe device"></a>Pipe device</h3><ul><li>Named pipes are like character devices, with another process at the other end of the I/O stream instead of a kernel driver.</li></ul><h3 id="Socket-device"><a href="#Socket-device" class="headerlink" title="Socket device"></a>Socket device</h3><ul><li><strong>Sockets</strong> are special-purpose interfaces that are <strong>frequently used for interprocess communication.</strong> They’re often found outside of the <code>/dev</code> directory. Socket files represent Unix domain sockets.</li></ul><blockquote><p>Note all devices have device files because the block and character device I/O interfaces are not appropriate in all cases. For example, network interfaces don’t have device files. It is theoretically possible to interact with a network interface using a single character device, but because it would be exceptionally difficult, the kernel uses other I/O interfaces.</p></blockquote><h2 id="The-sysfs-Device-Path"><a href="#The-sysfs-Device-Path" class="headerlink" title="The sysfs Device Path"></a>The <code>sysfs</code> Device Path</h2><p>The traditional Unix <code>/dev</code> directory is a convenient way for user processes to reference and interface with devices supported by the kernel, but it’s also a very simplistic scheme. The name of device in <code>/dev</code> tells you a little about device, but not a lot. <strong>Another problem is that the kernel assigns devices in the order in which they are found, so a device may have a different name between reboots.</strong></p><p>To provide a uniform view for attached devices based on their actual hardware attributes, the Linux kernel offers the <code>sysfs</code> interface through a system of files and directories. The base path for devices is <code>/sys/devices</code>.</p><p>For example, the SATA hard disk at <code>/dev/sda</code> might have the following path in <code>sysfs</code>:</p><p><img src="https://sherlockblaze.com/resources/img/profession/linux/how-linux-works/device-in-sysfs.png" alt=""></p><p>The <code>/dev</code> file is there so that user processes can use the device, whereas the <code>/sys/devices</code> path is used to view information and manage the device.</p><p>There are a few shortcuts in the <code>/sys</code> directory. For example, <code>/sys/block</code> should contain all of the block devices available on a system. However, those are just symbolic links; run <code>ls -l /sys/block</code> to reveal the true sysfs paths.</p><p>It can be difficult to find the sysfs location of a device in <code>/dev</code>. Use the <code>udevadm</code> command to show the path and other attributes:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ udevadm info --query=all --name=/dev/sda</span><br></pre></td></tr></table></figure><h2 id="dd-and-Devices"><a href="#dd-and-Devices" class="headerlink" title="dd and Devices"></a>dd and Devices</h2><p>The program <code>dd</code> is extremely useful when working with block and character devices.</p><p><strong>This program’s sole function is to read from an input file or stream and write to an output file or stream, possibly doing some encoding conversion on the way.</strong></p><p><code>dd</code> copies data in blocks of a <strong>fixed</strong> size. Here’s how to use <code>dd</code> with a character device and some common options:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dd <span class="keyword">if</span>=/dev/zero of=new_file bs=1024 count=1</span><br></pre></td></tr></table></figure><p>As you can see, the <code>dd</code> option format differs from the option formants of most other Unix commands; it’s based on an old IBM Job Control Language(JCL) style. Rather than use the dash(-) character to signal an option, you name an option and set its value to something with the equals(=) sign. The preceding example copies a single 1024-byte block from <code>/dev/zero</code> to <strong><em>new_file</em></strong>.</p><p><strong>There are the important <code>dd</code> options:</strong></p><ul><li><strong>if=file</strong> The input file. The default is the standard input.</li><li><strong>of=file</strong> The output file. The default is the standard output.</li><li><strong>bs=size</strong> The block size. <code>dd</code> reads and writes this many bytes of data at a time. To abbreviate large chunks of data, you can use <code>b</code> and <code>k</code> to signify 512 and 1024 bytes, respectively. Therefore, the example above could read <code>bs=1k</code> instead of <code>bs=1024</code>.</li><li><strong>ibs=size, obs=size</strong> The input and output block sizes. If you can use the same block size for both input and output, use the <code>bs</code> option; if not, use <code>ibs</code> and <code>obs</code> for input and output, respectively.</li><li><strong>count=num</strong> The total number of blocks to copy. When working with a huge file – or with a device that supplies an endless stream of data, such as <code>/dev/zero</code> – you want <code>dd</code> to stop at a fixed point or you could waste a lot of disk space, CPU time or both. Use <code>count</code> with the <code>skip</code> parameter to copy a small piece from a large file or device.</li><li><strong>skip=num</strong> Skip past the first num blocks in the input file or stream and do not copy them to the output.</li></ul><p><strong>WARNING</strong></p><blockquote><p>dd is very powerful, so make sure you know what you’re doing when you run it. It’s very easy to corrupt files and data on devices by making a careless mistake. It often helps to write the output to a new file if you’re not sure what it will do.</p></blockquote><h2 id="Device-Name-Summary"><a href="#Device-Name-Summary" class="headerlink" title="Device Name Summary"></a>Device Name Summary</h2><p>It can sometimes be difficult to find the name of a device. Here are a few ways to find out what it is in this book:</p><ul><li>Query udevd using <code>udevadm</code></li><li>Look for the device in the <code>/sys</code> directory</li><li>Guess the name from the output of the <code>dmesg</code> command(which prints the last few kernel messages) or the kernel system log file. This output might contain a description of the devices on your system.</li><li>For a disk device that is already visible to the system, you can check the output of <code>mount</code> command.</li><li>Run <code>cat /proc/devices</code> to see the block and character devices for which your system currently has drivers. It’s the most useful way i think. Each line consists of a number and name. The number is the major number of the device as described in <a href="#Device-Files">Device Files</a>. If you can guess the device from the name, look in <code>/dev</code> for the character or block devices with the corresponding major number, and you’ve found the device files.</li></ul><blockquote><p>Among these methods, only the first is reliable, but it does require udev. If you get into a situation where udev is not available, try the other methods but keep in mind that the kernel might not have a device file for your hardware.</p></blockquote><p>The following sections list the most common Linux devices and their naming conventions.</p><h3 id="Hard-Disks-dev-sd"><a href="#Hard-Disks-dev-sd" class="headerlink" title="Hard Disks: /dev/sd*"></a>Hard Disks: <code>/dev/sd*</code></h3><p>Most hard disks attached to current Linux systems correspond in device names with an <strong><em>sd</em></strong> prefix, such as <code>/dev/sda</code>, <code>/dev/sdb</code>, and so on. </p><p>These devices represent entire disks; the kernel makes separate device files, such as <code>/dev/sda1</code> and <code>/dev/sdb2</code> for the partitions on a disk.</p><p>The naming convention requires a little explanation. The <strong>sd</strong> portion of the name stands for SCSI disk. <strong>Small Computer System Interface(SCSI)</strong> was originally developed as a hardware and protocol standard for communication between devices such as disks and other peripherals.</p><p>Although traditional SCSI hardware isn’t used in most modern machines, <strong>the SCSI protocol is everywhere due to its adaptability.</strong> The story on SATA disks is a little more complicated, but the Linux kernel still uses SCSI commands at a certain point when talking to them.</p><p>To list the SCSI devices on your system, use a utility that walks the device paths provided by sysfs. One of the most succinct is <code>lsscsi</code>, maybe you should install it on your machine first. For example, my system is Ubuntu 18.04, I installed by using command <code>sudo apt install lsscsi</code>. Here is what you can expect when you run it:</p><p><img src="https://sherlockblaze.com/resources/img/profession/linux/how-linux-works/output-of-lsscsi.png" alt=""></p><p>The first column identifies the address of the device on the system, the second describes what kind of device it is, and the last indicates where to find the device file. Everything else is vendor information.</p><p><strong>Linux assigns devices to device files in the order in which its drivers encounter devices.</strong></p><p><strong>Notice:</strong></p><blockquote><p>Unfortunately, this device assignment scheme has traditionally caused problems when reconfiguring hardware. Say, for example, that you have a system with three disks: <code>/dev/sda</code>, <code>/dev/sdb</code>, and <code>/dev/sdc</code>. If <code>/dev/sdb</code> explodes and you mush remove the disk so that the machine can work again, the former <code>/dev/sdc</code> moves to <code>/dev/sdb</code>, and there is no longer a <code>/dev/sdc</code>. If you were referring to the device names directly in the <code>fstab</code> file, you’d have to make some changes to that file in order to get things back to normal. To solve this problem, <strong>most modern Linux systems use the Universally Unique Identifier(UUID)</strong> fro persistent disk device access.</p></blockquote><h3 id="CD-and-DVD-Drives-dev-sr"><a href="#CD-and-DVD-Drives-dev-sr" class="headerlink" title="CD and DVD Drives: /dev/sr*"></a>CD and DVD Drives: <code>/dev/sr*</code></h3><p>Linux recognizes most optical storage drives as the SCSI devices <code>/dev/sr0</code>, <code>/dev/sr1</code>, and so on. However, if the drive uses an older interface, it might show up as a PATH device , as discussed below. The <code>/dev/sr*</code> devices are read only, and they are used only for reading from discs. For the write and rewrite capabilities of optical devices, you’ll use the “generic” SCSI devices such as <code>/dev/sg0</code>.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How Linux Works(Chapter Two)--Directory Hierarchy Essentials</title>
      <link href="/2019/03/04/linux/how-linux-works/directory-hierarchy/"/>
      <url>/2019/03/04/linux/how-linux-works/directory-hierarchy/</url>
      
        <content type="html"><![CDATA[<blockquote><p>All the summaries are from the book named <strong><a href="https://www.amazon.com/How-Linux-Works-2nd-Superuser/dp/1593275676/ref=sr_1_1?keywords=how+linux+works&amp;qid=1551169061&amp;s=gateway&amp;sr=8-1" target="_blank" rel="noopener">How Linux Works</a></strong>.</p></blockquote><p>Let’s check the directory hierarchy of linux first.</p><p><img src="https://sherlockblaze.com/resources/img/profession/linux/how-linux-works/linux-directory-hierarchy.png" alt="Linux directory hierarchy"></p><p>This picture offers a simplified overview of the hierarchy, showing some of the directories under <code>/</code>, <code>/usr</code>, and <code>/var</code>. Notice that the directory structure under <code>/usr</code> contains some of the same directory names as <code>/</code>.</p><p>Here are the most important subdirectories in <code>root</code>:</p><ul><li><code>/bin</code> Contains ready-to-run programs(also known as an executables), including most of the basic Unix commnads such as <code>ls</code> and <code>cp</code>. Most of the programs in <code>/bin</code> are in binary format, having been created been by a C compiler, but some are shell scripts in modern systems.</li><li><code>/dev</code> Contains device files.</li><li><code>/etc</code> This core system configuration directory contains the user password, boot, device, networking, and other setup files. Many items in <code>/etc</code> are specific to the machine’s hardware. For example, the <code>/etc/X11</code> directory contains graphics card and window system configurations.</li><li><code>/home</code> Holds personal directories for regular users. Most Unix installations conform to this standard.</li><li><code>/lib</code> An abbreviation for library, this directory holds library files containing code that executables can use. There are <strong><em>two</em></strong> types of libraries: <strong>static</strong> and <strong>shared</strong>. <strong>The <code>/lib</code> directory should contain only shared libraries</strong>, but other lib directories, such as <code>/usr/lib</code>, contain both varieties as well as other auxiliary files.</li><li><code>/proc</code> Provides system statistics through a browsable directory-and-file interface. Much of the <code>/proc</code> subdirectory structure on Linux is unique, but many other Unix variants have similar features. The <code>/proc</code> directory contains information about currently running processes as well as some kernel parameters.</li><li><code>/sys</code> This directory is similar to <code>/proc</code> in that it provides a device and system interface.</li><li><code>/sbin</code> The place for system executables. Programs in <code>/sbin</code> directories relate to system management, so regular users usually do not have <code>/sbin</code> components in their command paths. Many of the utilities found here will not work if you’re not running them as root.</li><li><code>/tmp</code> A storage area for smaller, temporary files that you don’t care much about. Any user may read to and write from <code>/tmp</code>, but the user may not have permission to access another user’s files there. Many programs use this directory as a workspace. If something is extremely important, don’t put it in <code>/tmp</code> because most distributions clear <code>/tmp</code> when then machine boots and some even remove its old files periodically. Also don’t  let <code>/tmp</code> fill up with garbage because its space is usually shared with something critical.</li><li><code>/usr</code> Although pronounced “user”, this subdirectory has no user files. Instead, it contains a large directory hierarchy, including the bulk of the Linux system. Many of the directory names in <code>/usr</code> are the same as those in the root directory(like <code>/usr/bin</code> and <code>/usr/lib</code>), and they hold the same type of files.</li><li><code>/var</code> The variable subdirectory, where programs record runtime information. System logging, user tracking, caches, and other files that system programs create and manage are here.</li></ul><h2 id="Other-Root-Subdirectories"><a href="#Other-Root-Subdirectories" class="headerlink" title="Other Root Subdirectories"></a>Other Root Subdirectories</h2><p>There are a few other interesting subdirectories in the root directory:</p><ul><li><code>/boot</code> Contains kernel boot loader files. These files pertain only to the very first stage of Linux startup procedure;</li><li><code>/media</code> A base attachment point for removable media such as flash drives that is found in many distributions.</li><li><code>/opt</code> This may contain additional third-party software. Many systems don’t use <code>/opt</code></li></ul><h2 id="The-usr-Directory"><a href="#The-usr-Directory" class="headerlink" title="The /usr Directory"></a>The <code>/usr</code> Directory</h2><p>The <code>/usr</code> directory may look relatively clean at first glance, but a quick look at <code>/usr/bin</code> and <code>/usr/lib</code> reveals that there’s a lot here; <code>/usr</code> is where most of the user-space programs and data reside. In addition to <code>/usr/bin</code>, <code>/usr/sbin</code>, and <code>/usr/lib</code>, <code>/usr</code> contains the following:</p><ul><li><code>/include</code> Holds header files used by C compiler.</li><li><code>/info</code> Contains GNU info manuals.</li><li><code>/local</code> Is where administrators can install their own software. Its structure should look like that of <code>/</code> and <code>/usr</code>.</li><li><code>/man</code> Contains manual pages.</li><li><code>/share</code> Contains files that should work on other kinds of Unix machines with no loss of functionality. In the past, networks of machines would share this directory, but a true <code>/share</code> directory is becoming rare because there are no space issues on modern disk. Maintaining a <code>/share</code> directory is often just a pain. In any case, <code>/man</code> , <code>/info</code>, and some other subdirectories are often found here.</li></ul><h2 id="Kernel-Location"><a href="#Kernel-Location" class="headerlink" title="Kernel Location"></a>Kernel Location</h2><p>On Linux system, the kernel is normally in <code>/vmlinuz</code> or <code>/boot/vmlinuz</code>. A boot loader loads this file into memory and sets it in motion when the system boots.</p><p>Once the boot loader runs and sets the kernel in motion, the main kernel file is no longer used by the running system. However, you’ll find many modules that the kernel can load and unload on demand during the course of normal system operation. Called loadable kernel modules, they are located under <code>/lib/modules</code>.</p><h2 id="Recommended-Reading"><a href="#Recommended-Reading" class="headerlink" title="Recommended Reading"></a>Recommended Reading</h2><p><a href="http://www.pathname.com/fhs/" target="_blank" rel="noopener">Filesystem Hierarchy Standard</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How Linux Works(Chapter Two)--Basic Commands(Part Two)</title>
      <link href="/2019/03/02/linux/how-linux-works/basic-commands-part-two/"/>
      <url>/2019/03/02/linux/how-linux-works/basic-commands-part-two/</url>
      
        <content type="html"><![CDATA[<blockquote><p>All the summaries are from the book named <strong><a href="https://www.amazon.com/How-Linux-Works-2nd-Superuser/dp/1593275676/ref=sr_1_1?keywords=how+linux+works&amp;qid=1551169061&amp;s=gateway&amp;sr=8-1" target="_blank" rel="noopener">How Linux Works</a></strong>.</p></blockquote><h2 id="Shell-Input-and-Output"><a href="#Shell-Input-and-Output" class="headerlink" title="Shell Input and Output"></a>Shell Input and Output</h2><p>To send the output of <code>command</code> to a file instead of the terminal, use the <code>&gt;</code> redirection character:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> &gt; file</span><br></pre></td></tr></table></figure><p>The shell creates <code>file</code> if it does not already exist. If <code>file</code> exists, the shell erases the original file first.</p><p>You can <strong>append</strong> the output to file instead of overwriting it with the <code>&gt;&gt;</code> redirection syntax:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> &gt;&gt; file</span><br></pre></td></tr></table></figure><p>This is handy standard output of a command to the standard input of another command, use the pipe character(<code>|</code>). To see how this works, try these two commands:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">head /proc/cpuinfo</span><br><span class="line">head /proc/cpuinfo | tr a-z A-Z</span><br></pre></td></tr></table></figure><p>You can send output through as any piped commands as you wish; just add another pipe before each additional command.</p><h3 id="Standard-Error"><a href="#Standard-Error" class="headerlink" title="Standard Error"></a>Standard Error</h3><p>Occasionally, you may redirect standard output but find that the program still prints something to the terminal. This is called <strong><em>standard error</em></strong>; it’s an additional output stream for diagnostics and debugging. For example, this command produces an error:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /fffff &gt; f</span><br></pre></td></tr></table></figure><p>After completion, <code>f</code> should be empty, but you still see the following error message on the terminal as standard error:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls: cannot access /fffff: No such file or directory</span><br></pre></td></tr></table></figure><p>You can redirect the standard error if you like. For example, to send standard output to <code>f</code> and standard error to <code>e</code>, use the <code>2&gt;</code> syntax, like this:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /fffff &gt; f 2&gt; e</span><br></pre></td></tr></table></figure><p>The number 2 specifies the <strong><em>stream ID</em></strong> that the shell modifies. <strong>Stream ID 1 is standard output(the default), and 2 is standard error.</strong></p><p>You can also send the standard error to the same place as stdout with the <code>&gt;&amp;</code> notation. For example, to send both standard output and standard error to the file named <code>f</code>, try this command:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /fffff &gt; f 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h3 id="Standard-Input-Redirection"><a href="#Standard-Input-Redirection" class="headerlink" title="Standard Input Redirection"></a>Standard Input Redirection</h3><p>To channel a file to a program’s standard input, use the <code>&lt;</code> operator:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head &lt; /proc/cpuinfo</span><br></pre></td></tr></table></figure><h2 id="Understanding-Error-Messages"><a href="#Understanding-Error-Messages" class="headerlink" title="Understanding Error Messages"></a>Understanding Error Messages</h2><p>When you encounter a problem on a Unix-like system such as Linux, you must read the error message. Unlike messages from other operating systems, Unix errors usually tell you exactly what went wrong.</p><h3 id="Anatomy-of-a-UNIX-Error-Message"><a href="#Anatomy-of-a-UNIX-Error-Message" class="headerlink" title="Anatomy of a UNIX Error Message"></a>Anatomy of a UNIX Error Message</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls /dsafsd</span><br><span class="line">ls: cannot access  /dsafsd: No such file or directory</span><br></pre></td></tr></table></figure><p><strong><em>There are three components to this message:</em></strong></p><ul><li>The program name <code>ls</code>. Some programs omit this identifying information, which can be annoying when writing shell scripts, but it’s not really a big deal.</li><li>The filename, /dsafsd, which is a more specific piece of information. There’s a problem with this path.</li><li>The error <code>No such file or directory indicates the problem with the filename.</code></li></ul><h2 id="Listing-and-Manipulating-Processes"><a href="#Listing-and-Manipulating-Processes" class="headerlink" title="Listing and Manipulating Processes"></a>Listing and Manipulating Processes</h2><p><strong>A process is a running program.</strong> Each process on the system has a numeric <strong><em>process ID</em></strong>(PID). For a quick listing of running processes,just run <code>ps</code> on the command line. You should get a list like this one:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ps</span><br><span class="line">PID TTY STAT TIME COMMAND  </span><br><span class="line">520  p0 S    0:00 -bash  </span><br><span class="line">545   ? S    3:59 /usr/X11R6/bin/ctwm -W  </span><br><span class="line">548   ? S    0:10 xclock -geometry -0-0 </span><br><span class="line">2159  pd SW   0:00 /usr/bin/vi lib/addresses</span><br><span class="line">31956  p3 R    0:00 ps</span><br></pre></td></tr></table></figure><p>The fields are as follows:</p><ul><li><strong>PID.</strong> The process ID.</li><li><strong>TTY.</strong> The terminal device where the process is running.</li><li><strong>STAT.</strong> The process status, that is, what the process is doing and where its memory resides. For example, <code>S</code> means sleeping and <code>R</code> means running.</li><li><strong>TIME.</strong> The amount of CPU time in minutes and seconds that the process has used so far. In other words, the total amount of time that the process has spent running instructions on the processor.</li><li><strong>COMMAND.</strong> This one might seem obvious, but be aware that a process can change this field from its original value.</li></ul><h3 id="Command-Options"><a href="#Command-Options" class="headerlink" title="Command Options"></a>Command Options</h3><p>The <code>ps</code> command has many options.</p><table><thead><tr><th>command</th><th>Function</th></tr></thead><tbody><tr><td><strong>ps x</strong></td><td>Show all of your running processes</td></tr><tr><td><strong>ps ax</strong></td><td>Show all processes on the system, not just the ones you own.</td></tr><tr><td><strong>ps u</strong></td><td>Include more detailed information on processes.</td></tr><tr><td><strong>ps w</strong></td><td>Show full command names, not just what fits on one line.</td></tr></tbody></table><p>As with other programs, you can combine options, as in <code>ps aux</code> and <code>ps auxw</code>. To check on a specific process, add its PID to the argument list of the <code>ps</code> command. For example, to inspect the current shell process, you could use <code>ps u $$</code>, because <code>$$</code> is a shell variable that evaluates to the current shell’s PID.</p><h3 id="Killing-Processes"><a href="#Killing-Processes" class="headerlink" title="Killing Processes"></a>Killing Processes</h3><p>To terminate a process, sent it a <code>signal</code> with the <code>kill</code> command. A signal is a message to a process from the kernel. When you run <code>kill</code>, you’re asking the kernel to send a signal to another process.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> pid</span><br></pre></td></tr></table></figure><p>There are many types of signals. The default is <code>TERM</code>, or terminate. You send different signals by adding an extra option to <code>kill</code>. For example, to freeze a process instead of terminating it, use the <code>STOP</code> signal:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -STOP pid</span><br></pre></td></tr></table></figure><p>A stopped process is stil in memory, ready to pick up where it left off. Use the <code>CONT</code> continue running the process again:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -CONT pid</span><br></pre></td></tr></table></figure><p><strong>NOTE</strong>: Using <code>ctrl-c</code> to terminal a process that is running in the current terminal is the same as using <code>kill</code> to end the process with the <code>INT</code>(interrupt) signal.</p><h3 id="Job-Control"><a href="#Job-Control" class="headerlink" title="Job Control"></a>Job Control</h3><h2 id="Recommended-Reading"><a href="#Recommended-Reading" class="headerlink" title="Recommended Reading"></a>Recommended Reading</h2><ul><li>The Linux Command Line (No Starch Press, 2012)</li><li>UNIX for the Impatient (Addison-Wesley Professional, 1995)</li><li>Learning the UNIX Operating System, 5th edition (O’Reilly, 2001).</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How Linux Works(Chapter Two)--Basic Commands(Part One)</title>
      <link href="/2019/02/28/linux/how-linux-works/basic-commands-part-one/"/>
      <url>/2019/02/28/linux/how-linux-works/basic-commands-part-one/</url>
      
        <content type="html"><![CDATA[<blockquote><p>All the summaries are from the book named <strong><a href="https://www.amazon.com/How-Linux-Works-2nd-Superuser/dp/1593275676/ref=sr_1_1?keywords=how+linux+works&amp;qid=1551169061&amp;s=gateway&amp;sr=8-1" target="_blank" rel="noopener">How Linux Works</a></strong>.</p></blockquote><h2 id="The-Bourne-Shell"><a href="#The-Bourne-Shell" class="headerlink" title="The Bourne Shell"></a>The Bourne Shell</h2><p>The shell is one of the most important parts of a Unix system. A <code>shell</code> is a program that runs commands, like the ones that users enter. The shell also serves as a small programming environment. <strong>Unix programmers often break common tasks into little components and use the shell to manage tasks and piece things together.</strong></p><p>One of the best things about the shell is that if you make a mistake, you can easily see what you typed to find out what went wrong, and then try again.</p><blockquote><p>Linux uses an enhanced version of the Bourne shell called <code>bash</code> or the “Bourne-again” shell. The <code>bash</code> shell is the default shell on most Linux distributions, and <code>/bin/sh</code> is normally a link to <code>bash</code> on a Linux system. You should use <code>bash</code> shell when running the examples I copy from the <a href="https://www.amazon.com/How-Linux-Works-2nd-Superuser/dp/1593275676/ref=sr_1_1?keywords=how+linux+works&amp;qid=1551169061&amp;s=gateway&amp;sr=8-1" target="_blank" rel="noopener">book</a>.</p></blockquote><h2 id="Using-the-Shell"><a href="#Using-the-Shell" class="headerlink" title="Using the Shell"></a>Using the Shell</h2><p>When you install Linux, you should create at least one regular user in addition to the root user; this will be your personal account.</p><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>The <code>cat</code> command is one of the easiest Unix commands to understand, it simply outputs the contents of one or more files. The general syntax of the <code>cat</code> command is as follows:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file1 file2</span><br></pre></td></tr></table></figure><p>When you run this command, <code>cat</code> prints the contents of <code>file1</code>, <code>file2</code>, and any other files that you specify, and then exits. The command is called <code>cat</code> because it performs concatenation when it prints the contents of more than one file.</p><h2 id="Standard-Input-and-Standard-Output"><a href="#Standard-Input-and-Standard-Output" class="headerlink" title="Standard Input and Standard Output"></a>Standard Input and Standard Output</h2><p>We’ll use <code>cat</code> to briefly explore Unix input and output(I/O). <strong>Unix processes use I/O <code>stream</code> to read and write data. Processes read data from input streams and write data to output streams.</strong> Streams are very flexible. For example, the source of an input stream can be a file, a device, a terminal, or even the output stream from another process.</p><p><strong><em>Standard output</em></strong> is similar. The kernel gives each process a standard output stream where it can write its output. The <code>cat</code> command always writes its output to the standard output. When you ran <code>cat</code> in the terminal, the standard output was connected to that terminal, so that’s where you saw the output.</p><p>Standard input and output are often abbreviated as <code>stdin</code> and <code>stdout</code>. Many commands operate as <code>cat</code> does; if you don’t specify an input file, the command reads from <code>stdin</code>. Output is a little different. Some commands (like <code>cat</code>) send output only to stdout, but others have the option to send output directly to files.</p><p><strong>And there is a third standard I/O stream called standard <code>error</code>.</strong></p><p>One of the best features of standard streams is that you can easily manipulate them read and write to places other than the terminal.</p><h2 id="Basic-Commands"><a href="#Basic-Commands" class="headerlink" title="Basic Commands"></a>Basic Commands</h2><p>Now let’s look at some more Unix commands.</p><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a><code>ls</code></h4><p>The ls command lists the contents of a directory. The default is the current directory. Use <code>ls -l</code> for a detailed (long) listing and <code>ls -F</code> to display file type information.</p><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a><code>cp</code></h4><p>In its simplest form <code>cp</code> copies files. For example, to copy <strong><em>file1</em></strong> to <strong><em>file2</em></strong>, enter this:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp file1 file2</span><br></pre></td></tr></table></figure><p>To copy a number of files to a directory (folder) named <strong><em>dir</em></strong>, try this instead:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp file1 ... fileN dir</span><br></pre></td></tr></table></figure><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a><code>mv</code></h4><p>The <code>mv</code> (move) command is like <code>cp</code>. In its simplest form, it renames a file. For example, to rename <strong><em>file1</em></strong> to <strong><em>file2</em></strong>, enter this:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv file1 file2</span><br></pre></td></tr></table></figure><p>You can use <code>mv</code> to move a number of files to a different directory:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv file1 ... fileN dir</span><br></pre></td></tr></table></figure><h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a><code>touch</code></h4><p>The <code>touch</code> command creates a file. If the file already exists, <code>touch</code> does not change it, but it does update the file’s modification time stamp printed with the <code>ls -l</code> command. For example, to create empty file, enter this:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch file</span><br></pre></td></tr></table></figure><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h4><p>To delete(remove) a file, use <code>rm</code>. After you remove a file, it’s gone from your system and generally cannot be undeleted.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm file</span><br></pre></td></tr></table></figure><h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a><code>echo</code></h4><p>The <code>echo</code> command prints its arguments to the standard output:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> Hello again.</span><br><span class="line">Hello again.</span><br></pre></td></tr></table></figure><p>The <code>echo</code> command is very useful for finding expansions of shell globs and variables.</p><h2 id="Navigating-Directories"><a href="#Navigating-Directories" class="headerlink" title="Navigating Directories"></a>Navigating Directories</h2><p>Unix has a directory hierarchy that starts at <code>/</code>, sometimes called the <code>root</code> directory. The directory separator is the slash (<code>/</code>), not the backslash (<code>\</code>). There are several standard subdirectories in the <code>root</code> directory, such as <code>/usr</code>.</p><p>When you refer to a file or directory, you specify a <code>path</code> or <code>pathname</code>. When a path starts with <code>/</code> (such as <code>/usr/lib</code>), it’s a full or absolute path.</p><p>A path component identified by two dot (..) specifies the parent of a directory. For example, if you’re working in <code>/usr/lib</code>, the path <code>..</code> would refer to <code>/usr</code>. Similarly, <code>../bin</code> would refer to <code>/usr/bin</code>.</p><p>One dot(.) refers to the current directory; for example, if you’re in <code>/usr/lib</code>, the path <code>.</code> is still <code>/usr/lib</code>, and <code>./X11</code> is <code>/usr/lib/X11</code>. You won’t have to use <code>.</code> very often because most commands default to the current directory if a path doesn’t start with <code>/</code> (you could just use <code>X11</code> instead of <code>./X11</code> in the preceding example).</p><p>A path not beginning with <code>/</code> is called a <code>relative path</code>. Most of the time, you’ll work with relative pathnames, because you’ll already be in the directory you need to be in or somewhere close by.</p><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a><code>cd</code></h4><p>The current working directory is the directory that a process(such as the shell) is currently in. The <code>cd</code> command changes the shell’s current working directory:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> dir</span><br></pre></td></tr></table></figure><p>If you omit <strong><em>dir</em></strong>, the shell returns to your home directory, the directory you started in when you first logged in.</p><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a><code>mkdir</code></h4><p>The <code>mkdir</code> command creates a new directory <strong><em>dir</em></strong>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir dir</span><br></pre></td></tr></table></figure><h4 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a><code>rmdir</code></h4><p>The <code>rmdir</code> command removes the directory <strong><em>dir</em></strong>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir dir</span><br></pre></td></tr></table></figure><p>If <strong><em>dir</em></strong> isn’t empty, this command fails. However, if you’re impatient, you probably don’t want to laboriously delete all the files and subdirectories inside <code>dir</code> first. You can use <code>rm -rf dir</code> to delete a directory and its contents, but be careful! Double-check your command before you run it.</p><h2 id="Recommended-Reading"><a href="#Recommended-Reading" class="headerlink" title="Recommended Reading"></a>Recommended Reading</h2><ul><li>The Linux Command Line (No Starch Press, 2012)</li><li>UNIX for the Impatient (Addison-Wesley Professional, 1995)</li><li>Learning the UNIX Operating System, 5th edition (O’Reilly, 2001).</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How Linux Works(Chapter One)--The Big Picture of Linux</title>
      <link href="/2019/02/26/linux/how-linux-works/the-big-picture-of-linux/"/>
      <url>/2019/02/26/linux/how-linux-works/the-big-picture-of-linux/</url>
      
        <content type="html"><![CDATA[<blockquote><p>All the summaries are from the book named <strong><a href="https://www.amazon.com/How-Linux-Works-2nd-Superuser/dp/1593275676/ref=sr_1_1?keywords=how+linux+works&amp;qid=1551169061&amp;s=gateway&amp;sr=8-1" target="_blank" rel="noopener">How Linux Works</a></strong>.</p></blockquote><h2 id="About-Understanding-Something"><a href="#About-Understanding-Something" class="headerlink" title="About Understanding Something"></a>About Understanding Something</h2><p>The most effective way to understand how an operating system works is through <strong><em>abstraction</em></strong> —- a fancy way of saying that you can ignore most of the details. For example, when you ride in a car , you normally don’t need to think about details such as the mounting bolts that hold the motor inside the car or the people who build and maintain the road upon which the car drives. If you’re a passenger in a car, all you really need to know is what the car does and a few basics about how to use it.</p><p><strong>But</strong> if you’re driving a car, you need to know more. You need to learn how to operate the controls and what to do when something goes wrong.</p><p>For example, let’s say that the car ride is rough. Now <strong>you can break up the abstraction of “a car that rolls on a road” into tree parts: a car, a road, and the way that you’re driving</strong>. This helps isolate the problem: If the road is bumpy, you don’t blame the car or the way that you’re driving it. Instead, you may want to find out why the road has deteriorated or, if the road is new, why the construction workers did a lousy job.</p><p>Software developers use abstraction as a tool when building an operating system and its applications. There are many terms for an abstracted subdivision in computer software, including subsystem, module, and package—but we’ll use the term component in this chapter because it’s simple. When building a software component, developers typically don’t think much about the internal structure of other components, but they do care about what other components they can use and how to use them.</p><h2 id="Levels-and-Layers-of-Abstraction-in-a-Linux-System"><a href="#Levels-and-Layers-of-Abstraction-in-a-Linux-System" class="headerlink" title="Levels and Layers of Abstraction in a Linux System"></a>Levels and Layers of Abstraction in a Linux System</h2><p>A Linux system has three main levels. The following pictures shows these levels and some of the components inside each level. The <strong><em>hardware</em></strong> is at the base. Hardware includes the memory as well as one or more CPUs to perform computation and to read from and write to memory. Devices such as disks and network interfaces are also part of the hardware.</p><p>The next level up is the kernel, which is the core of the operation system. <strong>The kernel is software residing in memory that tells the CPU what to do.</strong> The kernel manages the hardware and <strong>acts primarily as an interface</strong> between the hardware and any running program.</p><p><strong><em>Processes</em></strong> – the running programs that the kernel manages —- collectively make up the system’s upper level, called <strong><em>user space</em></strong>. (A more specific term for process is <strong><em>user process</em></strong>, regardless of whether of a user directly interacts with the process. For example, all web servers run as user processes.)</p><p><img src="https://sherlockblaze.com/resources/img/profession/linux/how-linux-works/general-linux-system-organization.png" alt="General Linux System Organization"></p><p>The critical difference between the ways that the kernel and user processes run: The kernel runs in <strong><em>kernel mode</em></strong>, and the user processes run in <strong><em>user mode</em></strong>. Code running in kernel mode has unrestricted access to the processor and main memory. <strong>The area that only the kernel can access is called <strong><em>kernel space</em></strong>.</strong></p><blockquote><p>This is a powerful but dangerous privilege that allows a kernel process to easily crash the entire system.</p></blockquote><p><strong>User mode</strong>, in comparison, restricts access to a subset of memory and safe CPU operations. <strong><em>User space</em></strong> refers to the parts of main memory that the user processes can access. If a process makes a mistake and crashes, the consequences are limited and can be cleaned up by the kernel. This means that if your web browser crashes, it probably won’t take down the scientific computation that you’ve been running in the background for days.</p><h2 id="Hardware-Understanding-Main-Memory"><a href="#Hardware-Understanding-Main-Memory" class="headerlink" title="Hardware: Understanding Main Memory"></a>Hardware: Understanding Main Memory</h2><p>Of all of the hardware on a computer system, <strong><em>main memory</em></strong> is perhaps the most important. In its most raw form, main memory is just a big storage area for a bunch of 0s and 1s. Each 0 or 1 is called a <strong><em>bit</em></strong>. This is where the running kernel and processes reside —- they’re just big collections of bits. All input and output from peripheral devices flows through main memory, also as a bunch of bits. A CPU is just an operator on memory; it reads its instructions and data fromn the memory and writes data back out to the memory.</p><p>You’ll often hear the term <strong><em>state</em></strong> in reference to memory, processes, the kernel, and other parts of a computer system. A state is a particular arrangement of bits. For example, if you have four bits in your memory, 0110, 0001, and 1011 represent three different states.</p><p><strong>Note</strong>: Because it’s common to refer to the state in abstract terms rather than to the actual bits, the term image refers to a particular physical arrangement of bits.</p><h2 id="The-Kernel"><a href="#The-Kernel" class="headerlink" title="The Kernel"></a>The Kernel</h2><p>Nearly everything that the kernel does revolves around main memory. One of the kernel’s tasks is to <strong>split memory into many subdivisions, and it must maintain certain state information about those subdivisions at all times.</strong> <strong><em>Each process gets its own share of memory, and the kernel must ensure that each process keeps to it share.</em></strong></p><p>The kernel is in charge of managing tasks in <strong>four</strong> general system areas:</p><ul><li><strong>Processes</strong>. The kernel is responsible for determining which processes are allowed to use the CPU.</li><li><strong>Memory</strong>. The kernel needs to keep track of all memory – what is currently allocated to a particular process, what might be shared between processes, and what is free.</li><li><strong>Device Drivers</strong>. The kernel acts as an interface between hardware and processes. It’s usually the kernel’s job to operate the hardware.</li><li><strong>System calls and support</strong>. Processes normally use system calls to communicate with the kernel.</li></ul><h3 id="Process-Management"><a href="#Process-Management" class="headerlink" title="Process Management"></a>Process Management</h3><p><strong><em>Process Management</em></strong> describes the starting, pausing, resuming, and terminating of processes.</p><p>On any modern operating system, many processes run “simultaneously”. For example, you might have a web browser and a spreadsheet open on a desktop computer at the same time. However, things are not as the appear: The processes behind these applications typically do not run at <strong><em>exactly</em></strong> the same time.</p><p><strong>Context Switch</strong>: Consider a system with a one-core CPU, many processes may be able to use the CPU, but only one process may actually use the CPU at any given time. In practice, each process uses the CPU for a small fraction of a second, then pauses; the another process uses the CPU for another small fraction of a second; then another process takes a turn, and so on. The act of one process giving up control of the CPU to another process is called a <strong><em>context switch</em></strong>.</p><p><strong>Time Slice</strong>: Each piece of time—called a <strong><em>time slice</em></strong> — gives a process enough time for significant computation (and indeed, a process often finishes its current task during a single slice). However, because the slices are so small, humans can’t perceive them, and the system appears to be running multiple processes at the same time (a capability known as multitasking).</p><p><strong>How a context switch works??</strong></p><blockquote><p>The kernel is responsible for context switching. And here’s what happens:</p></blockquote><ol><li>The CPU interrupts the current process based on an internal timer, switches into kernel mode, and hands control back to the kernel.</li><li>The kernel records the current state of the CPU and memory, which will be essential to resuming the process that was just interrupted.</li><li>The kernel performs any tasks that might have come up during the preceding time slice.(such as collecting data from input and output, or I/O, operations)</li><li>The kernel is now ready to let another process run. The kernel analyzes the list of processes that are ready to run and choose one.</li><li>The kernel prepares the memory for this new process, and then prepares the CPU.</li><li>The kernel tells the CPU how long the time slice for the new process will last.</li><li>The kernel switches the CPU into user mode and hands control of the CPU to the process.</li></ol><p><strong>The context switch answers the important question of when the kernel runs. The answer is that it runs between process time slices during a context switch.</strong></p><p><strong>Attention:</strong></p><p>In the case of a multi-CPU system, things become slightly more complicated because the kernel doesn’t need to relinquish control of its current CPU in order to allow a process to run on a different CPU. However, to maximize the usage of all available CPUs, the kernel typically does so anyway(and may use certain tricks to grab a little more CPU time for itself).</p><h3 id="Memory-Management"><a href="#Memory-Management" class="headerlink" title="Memory Management"></a>Memory Management</h3><p>Because the kernel must manage memory during a context switch, it has a complex job of memory management. The kernel’s job is complicated because the following conditions must hold:</p><ul><li>The kernel must have its own private area in memory that user processes can’t access.</li><li>Each user process needs its own section of memory</li><li>One user process may not access the private memory of another process.</li><li>User processes can share memory.</li><li>Some memory in user processes can be read-only.</li><li>The system can use more memory than is physically present by using disk space as auxiliary.</li></ul><p>It’s difficult, but fortunately for the kernel, there is help. Modern CPUs include a <strong><em>memory management unit(MMU)</em></strong> that enables a memory access scheme called <strong><em>virtual memory</em></strong>. When using virtual memory, <strong>a process does not directly access the memory by its physical location in the hardware.</strong> Instead, the kernel sets up each process to act as if it had an entire machine to itself.<br>When the process accesses some of its memory, the MMU intercepts the access and uses a memory address map to translate the memory location from the process into an actual physical memory location on the machine.<br><strong>The kernel must still initialize and continuously maintain and alter this memory address map. For example, during a context switch, the kernel has to change the map from the outgoing process to the incoming process.</strong></p><p><strong>Note</strong>: The implementation of a memory address map is called a page table.</p><h3 id="Device-Drivers-and-Management"><a href="#Device-Drivers-and-Management" class="headerlink" title="Device Drivers and Management"></a>Device Drivers and Management</h3><p>The kernel’s role with devices is pretty simple. A device is typically accessible only in kernel mode because improper access could crash the machine. Another problem is that different devices rarely have the same programming interface, even if the devices do the same thing, such as two different network cards. Therefore, device drivers have traditionally been part of the kernel, and they strive to present a uniform interface to user processes in order to simplify the software developer’s job.</p><h3 id="System-calls-and-Support"><a href="#System-calls-and-Support" class="headerlink" title="System calls and Support"></a>System calls and Support</h3><p>There are several other kinds of kernel features available to user processes. For example, <strong><em>system calls(or syscalls)</em></strong> perform specific tasks that a user process alone cannot do well or at all. For example, the acts of opening, reading, and writing files all involve system calls.</p><p>Two system calls, <code>fork()</code> and <code>exec()</code>, are important to understanding how processes start up:</p><ul><li><strong>fork()</strong> When a process calls <code>fork()</code>, the kernel creates a nearly identical copy of the process.</li><li><strong>exec()</strong> When a process calls <code>exec(program)</code>, the kernel starts program, replacing the current process.</li></ul><p><strong>Other than init, all user processes on a Linux system start as a result of <code>fork()</code></strong>, and most of the time, you also run <code>exec()</code> to start a new program instead of running a copy of an existing process. A very simple example is any program that you run at the command line, such as the <code>ls</code> command to show the contents of a directory. When you enter <code>ls</code> into a terminal window, the shell that’s running inside the terminal window calls <code>fork()</code> to create a copy of the shell, and then the new copy of the shell calls <code>exec(ls)</code> to run <code>ls</code>. The process shows as follow:</p><p><img src="https://sherlockblaze.com/resources/img/profession/linux/how-linux-works/starting-a-new-process.png" alt="start a new process"></p><p>The kernel also supports user processes with features other than traditional system calls, the most common of which are <strong><em>pseudodevices</em></strong>. Pseudo-devices look like devices to user processes, but they’re implemented purely in software. As such, they don’t technically need to be in the kernel, but they are usually there for practical reasons. For example, the kernel random number generator device(<code>/dev/random</code>) would be difficult to implement securely with a user process.</p><p>Technically, a user process that accesses a pseudodevice still has to use a system call to open the device, so processes can’t entirely avoid system calls.</p><h2 id="User-Space"><a href="#User-Space" class="headerlink" title="User Space"></a>User Space</h2><p>The main memory that the kernel allocates user processes is called <strong><em>user space</em></strong>. Because a process is simply a state(or image) in memory, user space also refers to the memory for the entire collection of running processes.</p><p>Most of the real action on a Linux system happens in user space. Although all processes are essentially equal from the kernel’s point of view, they perform different tasks for user. There is a rudimentary service level (or layer) structure to the kinds of system components that user processes represent. The following picture shows how an example set of components fit together and interact on a Linux system. Basic services are at the bottom level(closest to the kernel), utility services are in the middle, and applications that users touch are at the top. What in the picture is a greatly simplified diagram because only six components are shown, but you can see that the components at the top are closest to the user; the components in the middle level has a mail server that the web browser uses; and there are several smaller components at the bottom.</p><p><img src="https://sherlockblaze.com/resources/img/profession/linux/how-linux-works/process-types-and-interactions.png" alt="Process types and interactions"></p><p>The bottom level tends to consist of small components that perform single, uncomplicated tasks. The middle level has larger components such as mail, print, and database services. Finally, components at the top level perform complicated tasks that the user often controls directly. Components also use other components. Generally, if one component wants to use another, the second component is either at the same service level or below.</p><p>However, the above picture is only an approximation of the arrangement of user space. In reality, there are no rules in user space. For example, most applications and services write diagnostic messages known as logs. Most programs use the standard syslog service to write log messages, but some prefer to do all of the logging themselves.</p><p>In addition, it’s difficult to categorize some user-space components. Server components such as web and database servers can be considered very high-level applications because their tasks are often complicated, so you might place these at the top level in the above picture. However, user applications may depend on these servers to perform tasks that they’d rather not do themselves, so you could also make a case for placing them at the middle level.</p><h2 id="Users"><a href="#Users" class="headerlink" title="Users"></a>Users</h2><p>The Linux kernel supports the traditional concept of a Unix user. A <strong><em>user</em></strong> is an entity that can run processes and own files. A user is associated with a <strong><em>username</em></strong>. </p><p><strong>The kernel does not manage the usernames, instead, it identifies users by simple numeric identifiers called <code>userids</code></strong></p><p><strong>Users exist primarily to support permissions and boundaries.</strong> Every user-space process has a user <strong><em>owner</em></strong>, and processes are said to run as the owner. A user may terminate or modify the behavior of its own processes(within certain limits), but it cannot interfere with other users’ processes. In addition, users may own files and choose whether they share them with other users.</p><p>The most important user to know about is <strong><em>root</em></strong>. The root user is an exception to the preceding rules because root may terminate and alter another user’s processes and read any file on the local system. For this reason, root is known as the <strong>superuser</strong>. A person who can operate as root is said to have root access and is an administrator on a traditional Unix system.</p><p><strong>Groups</strong> are sets of users. The primary purpose of groups is to allow a user to share file access to other users in a group.</p><blockquote><p>Operating as root can be dangerous. It can be difficult to identify and correct mistakes because the system will let you do anything, even if what you’re doing is harmful to the system. For this reason, system designers constantly try to make root access as unnecessary as possible, for example, by not requiring root access to switch between wireless networks on a notebook. In addition, as powerful as the root user is, it still runs in the operating system’s user mode, not kernel mode.</p></blockquote><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>User processes make up the environment that you directly interact with, the kernel manages processes and hardware. Both the kernel and processes reside in memory.</p><h2 id="Recommended-Reading"><a href="#Recommended-Reading" class="headerlink" title="Recommended Reading"></a>Recommended Reading</h2><ul><li>Operating System Concepts, 9th edition, by Abraham Silberschatz, Peter B. Galvin, and Greg Gagne (Wiley, 2012)</li><li>Modern Operating Systems, 4th edition, by Andrew S. Tanenbaum and Herbert Bos (Prentice Hall, 2014).</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reverse Print List</title>
      <link href="/2019/01/24/algorithms/combat/reverse-print-list/"/>
      <url>/2019/01/24/algorithms/combat/reverse-print-list/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>There is a single linkedlist that prints out the values of each node from end to head.</p><h2 id="Thought"><a href="#Thought" class="headerlink" title="Thought"></a>Thought</h2><p>I don’t think it’s a difficult problem, we just need use a stack, store the values and print them.<br>We do like this:</p><p>We got a list and a stack.</p><p><img src="https://sherlockblaze.com/resources/img/cs/reverse_print_list/step1.png" alt="Step1"></p><p>We push the values of list into the stack one by one.</p><p><img src="https://sherlockblaze.com/resources/img/cs/reverse_print_list/step2.png" alt="Step2"></p><p>And we already know about how stack works. If you don’t know about it clearly, go <a href="../../../data_structures/doc/lists/Stack.md#Stack">here</a> to read more.</p><p><img src="https://sherlockblaze.com/resources/img/cs/reverse_print_list/step3.png" alt="Step3"></p><p>At the last, we can get result by popping the elements from the stack.</p><p><img src="https://sherlockblaze.com/resources/img/cs/reverse_print_list/step4.png" alt="Step4"></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>We use the <a href="https://sherlockblaze.com/2019/01/21/computer_science/data_structures/LinkedList/">linkedlist</a> and <a href="https://sherlockblaze.com/2019/01/21/computer_science/data_structures/Stack/">stack</a> implemented before to implement it. Just read the code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Waiting...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Search In Two Dimensional Array</title>
      <link href="/2019/01/24/algorithms/combat/search-in-two-dimensional-array/"/>
      <url>/2019/01/24/algorithms/combat/search-in-two-dimensional-array/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>In a two-dimensional array, each row is arranged in increasing order from left to right, and each column is arranged in increasing order from top to bottom. Please write a function, enter a two-dimensional array of this type and an integer to determine if the array contains the integer.</p><p>For example, there’s a two-dimensional array.</p><table><thead><tr><th>1</th><th>2</th><th>8</th><th>9</th></tr></thead><tbody><tr><td><strong>2</strong></td><td><strong>4</strong></td><td><strong>9</strong></td><td><strong>12</strong></td></tr><tr><td><strong>4</strong></td><td><strong>7</strong></td><td><strong>10</strong></td><td><strong>13</strong></td></tr><tr><td><strong>6</strong></td><td><strong>8</strong></td><td><strong>11</strong></td><td><strong>15</strong></td></tr></tbody></table><p>If we search for number 7, return true, because there’s a number equals 7 in this two-dimensional array. But if we search for number 5, it’s return false.</p><h2 id="Thought"><a href="#Thought" class="headerlink" title="Thought"></a>Thought</h2><p>Let’s continue talk about this problem by using the example above. OK, because we want to know a number whether in this array or not, we should compare with the value in this array, if we get a number in the array equals to the number, it’s true, or not.</p><p>Then if we start with the first value of the array, means start with arr[0][0], if the number is bigger than the arr[0][0], we’ll know the if the number is in this array, it must at the <strong>right</strong> of arr[0][0], or in the <strong>below</strong> of it. But which direction we should choose to continue to compare. Maybe we can choose both, but it will be complicate. It costs too much.</p><p>Fortunately, we get a better way. we can start with element in the upper right corner. That’s be better. Let’s see more about it.</p><p>If we start with the element in the upper right corner, we can know, for example, number 7, a two-dimensional array above, if we start with number 9, we’ll know, number 7 is smaller than number 9, and the numbers in below of number 9 all bigger than number 9, so if number is in this array, it can’t be under the number 9, so we can exclude the column where the number 9 is located. If we get a number bigger than number 9, what we should do, just exclude the row where the number 9 is located, pretty easy. Let’s move on, because we exclude the column where the number 9 is located, the element in the upper right corner now is number 8, we can exclude this column in a same way, then the number in the upper right corner turn to 2, and so on. we finally can get a number equals to number 7, the return value of the function is true.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>In the code, I simulated a two-dimensional array with a one-dimensional array, see specific calculations from the code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _SEARCH_IN_TWO_DIMENSIONAL_ARRAY_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SEARCH_IN_TWO_DIMENSIONAL_ARRAY_H_</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsExist</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> rows, <span class="keyword">int</span> columns, <span class="keyword">int</span> value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/*_SEARCH_IN_TWO_DIMENSIONAL_ARRAY_H_*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">IsExist(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> rows, <span class="keyword">int</span> columns, <span class="keyword">int</span> value)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = columns - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> index, number;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows;)</span><br><span class="line">&#123;</span><br><span class="line">index = i * columns + j;</span><br><span class="line">number = <span class="built_in">array</span>[index];</span><br><span class="line"><span class="keyword">if</span> (number == value)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (number &gt; value)</span><br><span class="line">--j;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">++i;</span><br><span class="line"><span class="keyword">if</span> (j &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">Test()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">if</span> (IsExist(<span class="built_in">array</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">14</span>))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"true\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"false\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (IsExist(<span class="built_in">array</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">8</span>))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"true\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"false\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Growth Of Function</title>
      <link href="/2019/01/24/algorithms/rules/growth-of-function/"/>
      <url>/2019/01/24/algorithms/rules/growth-of-function/</url>
      
        <content type="html"><![CDATA[<p>You can read the MindNode first.</p><p><img src="https://sherlockblaze.com/resources/img/cs/rules/GrowthOfFunctions.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Loop Invariants</title>
      <link href="/2019/01/24/algorithms/rules/loop-invariants/"/>
      <url>/2019/01/24/algorithms/rules/loop-invariants/</url>
      
        <content type="html"><![CDATA[<h2 id="What-is-Loop-Invariants"><a href="#What-is-Loop-Invariants" class="headerlink" title="What is Loop Invariants"></a>What is Loop Invariants</h2><blockquote><p>At the start of each iteration of the <strong><em>for</em></strong> loop, the subarray A[i..j-1] consists of the elements originally in A[1..j-1], but in sorted order.<br><strong><em>We use loop invariants to help us understand why an algorithms is correct.</em></strong></p></blockquote><p>We must show three things about a loop invariants.</p><ol><li><strong><em>Initialization:</em></strong> It is true prior to the first iteration of the loop.</li><li><strong><em>Maintenance:</em></strong> If it is true before an iteration of the loop, it remains true before the next iteration.</li><li><strong><em>Termination:</em></strong> When the loop terminates, the invariant gives us a useful property that helps show that the algorithm is correct.</li></ol><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Now Let’s learn more about Invariants by talking about <a href="https://sherlockblaze.com/2019/01/24/computer_science/algorithms_classic/InsertionSort/">Insertion-Sort</a> from three things we talk about:</p><ol><li><strong><em>Initialization:</em></strong> Before the first loop, we got the A[1]. Moreover, <strong><em>this subarray is sorted, which shows that the loop invariant holds prior to the first iteration of the loop.</em></strong></li><li><strong><em>Maintenance:</em></strong> here, we should talk about the second property: showing that each iteration maintains the loop invariant. That’s pretty easy. If you got A[1..2], and you must know the subarray consists of the elements originally in A[1…2], and it gets sorted. Moreover, you can know about A[1…3], A[1…4] and so on. So it’s true before an iteration of the loop, it remains true before the next iteration. It’s Maintenance.</li><li><strong><em>Termination:</em></strong> We already know that the subarray is sorted, so when we finished the loop, we got a subarray has already been sorted. You know even A[0…A.length] is a subarray of A.</li></ol><p><strong><em>So that, we can know the algorithms is correct by check the loop invariants. It’s a bit like mathematical induction. But we stop the “induction” when loop terminates.</em></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Add Two Numbers</title>
      <link href="/2019/01/24/algorithms/combat/add-two-numbers/"/>
      <url>/2019/01/24/algorithms/combat/add-two-numbers/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p>Example:</p><p>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>Output: 7 -&gt; 0 -&gt; 8<br>Explanation: 342 + 465 = 807</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><blockquote><p>Now we can use our data structures to solve some algorithms problems, view <a href="https://sherlockblaze.com/2019/01/21/computer_science/data_structures/LinkedList/">LinkedList</a>. This one is the first. Here’s code(View All Code About Notes <a href="https://github.com/sherlockblaze/all_knowledge_review" target="_blank" rel="noopener">Here</a>):</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../data_structures/lists/linkedlist.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _ADD_TWO_NUMBERS_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ADD_TWO_NUMBERS_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElementType int</span></span><br><span class="line"></span><br><span class="line"><span class="function">List <span class="title">addTwoNumbers</span><span class="params">(List l1, List l2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TraverseList</span><span class="params">(List L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/*_ADD_TWO_NUMBERS_H_*/</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List</span><br><span class="line">addTwoNumbers(List l1, List l2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> overflow = <span class="number">0</span>;</span><br><span class="line">List result = NewList();</span><br><span class="line">Position l1_node, l2_node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l1 != <span class="literal">NULL</span>)</span><br><span class="line">l1_node = l1-&gt;Next;</span><br><span class="line"><span class="keyword">if</span> (l2 != <span class="literal">NULL</span>)</span><br><span class="line">l2_node = l2-&gt;Next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (l1_node != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">overflow += l1_node-&gt;Value;</span><br><span class="line">l1_node = l1_node-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (l2_node != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">overflow += l2_node-&gt;Value;</span><br><span class="line">l2_node = l2_node-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line">InsertAt(result, <span class="number">0</span>, overflow % <span class="number">10</span>);</span><br><span class="line">overflow /= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (l1_node == <span class="literal">NULL</span> &amp;&amp; l2_node == <span class="literal">NULL</span> &amp;&amp; overflow == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">TraverseList(List L)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (L == <span class="literal">NULL</span>)</span><br><span class="line">FatalError(<span class="string">"No such linkedlist"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"There're %d elements:\n"</span>, L-&gt;Value);</span><br><span class="line">Position TmpPointer = L-&gt;Next;</span><br><span class="line"><span class="keyword">while</span>(TmpPointer != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, TmpPointer-&gt;Value);</span><br><span class="line">TmpPointer = TmpPointer-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">test()</span><br><span class="line">&#123;</span><br><span class="line">List l1 = NewList();</span><br><span class="line">List l2 = NewList();</span><br><span class="line"><span class="keyword">int</span> num1[] = &#123;<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> num2[] = &#123;<span class="number">5</span>&#125;;</span><br><span class="line">InsertArray(l1, num1, <span class="number">1</span>);</span><br><span class="line">InsertArray(l2, num2, <span class="number">1</span>);</span><br><span class="line">TraverseList(l1);</span><br><span class="line">TraverseList(l2);</span><br><span class="line">List result = addTwoNumbers(l1, l2);</span><br><span class="line">TraverseList(result);</span><br><span class="line">DeleteList(l1);</span><br><span class="line">DeleteList(l2);</span><br><span class="line">DeleteList(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Two Sum</title>
      <link href="/2019/01/24/algorithms/combat/two-sum/"/>
      <url>/2019/01/24/algorithms/combat/two-sum/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p><p>Example:</p><p>Given nums = [2, 7, 11, 15], target = 9,</p><p>Because nums[0] + nums[1] = 2 + 7 = 9,</p><p>return [0, 1].</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>It’s easy to finish, so just read the code, And I wrote some comments in there.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _TWOSUM_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _TWOSUM_H_</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">twoSum</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> target)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">betterOne</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> target)</span></span>;</span><br><span class="line"><span class="comment">/*We'll implement this one when we get hashmap*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">bestOne</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> target)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twoSumTest</span><span class="params">(<span class="keyword">int</span> *nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> target)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/*_TWOSUM_H_*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// O(n^2)</span></span><br><span class="line"><span class="keyword">int</span>*</span><br><span class="line">twoSum(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> target)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">int</span>* result = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (; i &lt; numsSize; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> remain = target - *(nums + i);</span><br><span class="line"><span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; numsSize; ++j)</span><br><span class="line"><span class="keyword">if</span> (*(nums + j) == remain)</span><br><span class="line">&#123;</span><br><span class="line">result[<span class="number">0</span>] = i;</span><br><span class="line">                result[<span class="number">1</span>] = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Waste too much space, if we got [0, 1000, 1, 441, 1], we need almost 4.2M, if we got bigger number, it'll take much more. But the cost of space is O(n)</span></span><br><span class="line"><span class="comment">/*int* </span></span><br><span class="line"><span class="comment">betterOne(int* nums, int numsSize, int target) &#123;</span></span><br><span class="line"><span class="comment">int i, max, min;</span></span><br><span class="line"><span class="comment">max = min = nums[0];</span></span><br><span class="line"><span class="comment">for (i = 0; i &lt; numsSize; ++i)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if (nums[i] &gt; max) max = nums[i];</span></span><br><span class="line"><span class="comment">if (nums[i] &lt; min) min = nums[i];</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">int *map = (int*)calloc((max - min + 1), sizeof(int));</span></span><br><span class="line"><span class="comment">int *reval = (int*)malloc(sizeof(int) * 2);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for (i = 0; i &lt; numsSize; map[nums[i] - min] = ++i)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int lookfornum = target - nums[i];</span></span><br><span class="line"><span class="comment">if (lookfornum &lt; min || lookfornum &gt; max) continue;</span></span><br><span class="line"><span class="comment">int dis = lookfornum - min;</span></span><br><span class="line"><span class="comment">printf("mapdis= %d\n", map[dis]);</span></span><br><span class="line"><span class="comment">if (map[dis])</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">reval[0] = i;</span></span><br><span class="line"><span class="comment">reval[1] = map[dis] - 1;</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">free(map);</span></span><br><span class="line"><span class="comment">printf("in function: %d, %d\n", reval[0], reval[1]);</span></span><br><span class="line"><span class="comment">return reval;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">twoSumTest(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> target)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span>* resultOne = twoSum(nums, numsSize, target);</span><br><span class="line"><span class="comment">// int* resultTwo = betterOne(nums, numsSize, target);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"twoSum result: %d, %d\n"</span>, resultOne[<span class="number">0</span>], resultOne[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// printf("betterOne result: %d, %d\n", resultTwo[0], resultTwo[1]);</span></span><br><span class="line"><span class="built_in">free</span>(resultOne);</span><br><span class="line"><span class="comment">// free(resultTwo);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>We’ll try a better way when we finish the hash map.</em></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Replace All Spaces</title>
      <link href="/2019/01/24/algorithms/combat/replace-all-spaces/"/>
      <url>/2019/01/24/algorithms/combat/replace-all-spaces/</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Implement a function that replaces each space in the string with “%20”.<br>For example:</p><p><strong>Input</strong>: “Sherlock Blaze is the most handsome boy in this world”<br><strong>Output</strong>: “Sherlock%20Blaze%20is%20the%20most%20handsome%20boy%20in%20this%20world”</p><h2 id="Thought"><a href="#Thought" class="headerlink" title="Thought"></a>Thought</h2><p>Directly, the problem is very simple, if we encounter a space, delete it, and insert “%20” in its place. Like this:</p><p><strong>Sherlock Blaze is the</strong><br><strong>SherlockBlaze is the</strong><br><strong>Sherlock%20Blaze is the</strong></p><p>If we create a pointer points to the start of this string. We can achieve the goal step by step as mentioned above.</p><p>But it’s cost too much, O(n^2), because every time we delete or insert, we should move all the values after the space forward or backward.</p><p><strong>So, How to do better?</strong></p><p>What will happen if we don’t have to move the elements backwards frequently?</p><p>In fact, we can calculate the length of the modified string in advance, then let a pointer point to it – the end of our string growth, called J. The we let another pointer point to the end of the original string, called I.</p><p>The above string is too long, let us replace it with “a b c”. So it’s “a b c” now, we want “a%20b%20c”.</p><p>First we calculate new length of the string. we got “a b c”, its length is 6, we all know string in C saved like “a b c\0”. The ‘\0’ represents the end of the string. It looks like this.</p><p><img src="https://sherlockblaze.com/resources/img/cs/replace_all_space/origin_string.png" alt="Origin String"></p><p>Now We need to replace space with “%20”, so the new length of the string is 10.</p><p><img src="https://sherlockblaze.com/resources/img/cs/replace_all_space/new_string.png" alt="New String"></p><p>Then we copy the value be pointed by I to the index pointed by J one by one.</p><p><img src="https://sherlockblaze.com/resources/img/cs/replace_all_space/replace_step1.png" alt="Step 1"></p><p><img src="https://sherlockblaze.com/resources/img/cs/replace_all_space/replace_step2.png" alt="Step 2"></p><p>Here is a little different when our pointer I encounters a space.</p><p><img src="https://sherlockblaze.com/resources/img/cs/replace_all_space/replace_step3.png" alt="Step 3"><br><img src="https://sherlockblaze.com/resources/img/cs/replace_all_space/replace_step4.png" alt="Step 4"></p><p>We Insert “%20” one by one in reverse order.</p><p><img src="https://sherlockblaze.com/resources/img/cs/replace_all_space/replace_step5.png" alt="Step 5"></p><p>When it finished, pointer I move forward for next value.</p><p><img src="https://sherlockblaze.com/resources/img/cs/replace_all_space/replace_step6.png" alt="Step 6"></p><p><img src="https://sherlockblaze.com/resources/img/cs/replace_all_space/replace_step7.png" alt="Step 7"></p><p>And finally we achieve our goal.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>We use our own <a href="https://sherlockblaze.com/2019/01/21/computer_science/data_structures/ArrayList/">ArrayList</a> to store the data and implement the algorithm, just to experiment with whether our ArrayList is easy to use. There is a problem here, When you expand the size of the array, it will affect the value of the memory stored in the adjacent memory. You need to pay attention to it. Because I don’t have a lot of connection with the algorithm itself, I ignored this problem in the code.</p><p>See more by reading the code(View All Code About Notes <a href="https://github.com/sherlockblaze/all_knowledge_review" target="_blank" rel="noopener">Here</a>):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _REPLACE_ALL_SPACES_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _REPLACE_ALL_SPACES_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElementType char</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../../data_structures/lists/arraylist.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReplaceAllSpaces</span><span class="params">(List List)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TraverseList</span><span class="params">(List L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/*_REPLACE_ALL_SPACES_H_*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">ReplaceAllSpaces(List List)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> Replace[] = &#123;<span class="string">'0'</span>, <span class="string">'2'</span>, <span class="string">'%'</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> SpaceCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> Size = List-&gt;Size;</span><br><span class="line">Array Array = List-&gt;ArrayList;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; List-&gt;Size; ++i)</span><br><span class="line"><span class="keyword">if</span> (*(Array + i) == <span class="string">' '</span>)</span><br><span class="line">++SpaceCount;</span><br><span class="line"><span class="keyword">int</span> NewSize = Size + <span class="number">2</span> * SpaceCount;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = Size, j = NewSize; i &gt; <span class="number">-1</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> Value = *(Array + i);</span><br><span class="line"><span class="keyword">if</span> (Value != <span class="string">' '</span>)</span><br><span class="line">&#123;</span><br><span class="line">*(Array + j) = Value;</span><br><span class="line">--j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; ++k, --j)</span><br><span class="line">*(Array + j) = Replace[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">List-&gt;Size = NewSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">TraverseList(List L)</span><br><span class="line">&#123;</span><br><span class="line">Array <span class="built_in">array</span> = L-&gt;ArrayList;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L-&gt;Size; ++i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\t"</span>, *(<span class="built_in">array</span>+i));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">test()</span><br><span class="line">&#123;</span><br><span class="line">List List = NewList();</span><br><span class="line"><span class="keyword">char</span> origin[] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">' '</span>, <span class="string">'c'</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">'d'</span>&#125;;</span><br><span class="line">InsertArray(List, origin, <span class="number">7</span>);</span><br><span class="line">TraverseList(List);</span><br><span class="line">ReplaceAllSpaces(List);</span><br><span class="line">TraverseList(List);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Insertion-Sort</title>
      <link href="/2019/01/24/algorithms/classic/insertion-sort/"/>
      <url>/2019/01/24/algorithms/classic/insertion-sort/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Know about it by writing CODE.</p></blockquote><blockquote><p><strong><em>Because it’s really easy!!!!</em></strong></p></blockquote><h2 id="Pseudocode"><a href="#Pseudocode" class="headerlink" title="Pseudocode"></a>Pseudocode</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j = <span class="number">2</span> to A.length</span><br><span class="line">key = A[j]</span><br><span class="line"><span class="comment">// Insert A[j] into the sorted sequence A[1...j-1]</span></span><br><span class="line"><span class="selector-tag">i</span> = j - <span class="number">1</span></span><br><span class="line">while <span class="selector-tag">i</span> &gt; <span class="number">0</span> and A[i] &gt; key</span><br><span class="line">A[i+<span class="number">1</span>] = A[i]</span><br><span class="line"><span class="selector-tag">i</span> = <span class="selector-tag">i</span> - <span class="number">1</span></span><br><span class="line">A[<span class="selector-tag">i</span> + <span class="number">1</span>] = key</span><br></pre></td></tr></table></figure><blockquote><p>Know more by reading the complete code:</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _INSERT_SORT_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _INSERT_SORT_H_</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> length)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort_test</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/*_INSERT_SORT_H_*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">insert_sort(<span class="keyword">int</span> *p, <span class="keyword">int</span> length)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> key = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// start from the second element</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; ++i)</span><br><span class="line">&#123;</span><br><span class="line">key = p[i];</span><br><span class="line"><span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; p[j] &gt; key)</span><br><span class="line">&#123;</span><br><span class="line">p[j + <span class="number">1</span>] = p[j];</span><br><span class="line">j = j - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">p[j + <span class="number">1</span>] = key;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">insert_sort_test()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">15</span>, <span class="number">1</span>, <span class="number">51</span>, <span class="number">6</span>, <span class="number">13</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"before sorted!\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, a[i]);</span><br><span class="line">insert_sort(a, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nafter sorted\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\t"</span>, a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><p>In order to help people who don’t know about insertion-sort before. I made this. Let’s check.</p><p><img src="https://sherlockblaze.com/resources/img/cs/insertion-sort/step1.png" alt="step1"></p><p>As we know, we start from the second element. We call it i, the value of i is between 0 and the size of this array or some structure else, the total number of elements. Then we get a key, the value of key is A[i].</p><p><img src="https://sherlockblaze.com/resources/img/cs/insertion-sort/step2.png" alt="step2"></p><p>Then we put the second pointer points to the element just before i, we call it j, j start from i - 1, end with 0.</p><p><img src="https://sherlockblaze.com/resources/img/cs/insertion-sort/step3.png" alt="step3"></p><p>If the element is pointed by j is bigger than the pointer i points, they exchange their values.</p><p><img src="https://sherlockblaze.com/resources/img/cs/insertion-sort/step4.png" alt="step4"></p><p>when j got the end, i plus one, new loop start.</p><p><img src="https://sherlockblaze.com/resources/img/cs/insertion-sort/step5.png" alt="step5"></p><p><strong><em>And so on….</em></strong></p><p><img src="https://sherlockblaze.com/resources/img/cs/insertion-sort/step6.png" alt="step6"></p><p><img src="https://sherlockblaze.com/resources/img/cs/insertion-sort/step7.png" alt="step7"></p><p><img src="https://sherlockblaze.com/resources/img/cs/insertion-sort/step8.png" alt="step8"></p><p><img src="https://sherlockblaze.com/resources/img/cs/insertion-sort/step9.png" alt="step9"></p><p><img src="https://sherlockblaze.com/resources/img/cs/insertion-sort/step10.png" alt="step10"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Algorithms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Queue</title>
      <link href="/2019/01/21/data-structure/lists/queue/"/>
      <url>/2019/01/21/data-structure/lists/queue/</url>
      
        <content type="html"><![CDATA[<p>Extracted from the book. <strong>Like stacks, queue are lists. With a queue, however, insertion is done at one end, whereas deletion is performed at the other end.</strong> Just like people are waiting in line.</p><p>Still from books. <strong>The basic operations on a queue are <em>Enqueue</em>, which inserts and element at the end of the list(called the rear),and <em>Dequeue</em>, which deletes (and returns) the element at the start of the list(known as the front).</strong></p><p>It’s look like this:</p><p><img src="https://sherlockblaze.com/resources/img/cs/queue/queue.png" alt="Queue"></p><h2 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h2><p>We already know about queue and it’s basic operations above. That’s pretty easy. So we are not going to talk more here.</p><p>We know stack run like <strong>LIFO</strong>(last in first out), queue is different, it’s first in first out – <strong>FIFO</strong>, just like people are waiting in line, remember?</p><p>And In my version, because the <strong>Dequeue</strong> operation is performed at the <strong>front</strong> of the queue , if we use arraylist, it cost O(n), we don’t want it happen. So, we choose linkedlist to implement it, but the <strong>Enqueue</strong> operation is performed at the <strong>rear</strong> of the queue. If we just use a simple linkedlist, it’s will cost O(n) to find the node at the end, so we modify the linkedlist, create a pointer points to the end of the linkedlist. we do it at <a href="../../lists/linkedlist_with_tail_pointer.h">here</a>.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Now let’s take a look at the complete code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _QUEUE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _QUEUE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"./linkedlist_with_tail_pointer.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> List Queue;</span><br><span class="line"><span class="function">List <span class="title">NewQueue</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Enqueue</span><span class="params">(Queue Queue, ElementType Value)</span></span>;</span><br><span class="line"><span class="function">ElementType <span class="title">Dequeue</span><span class="params">(Queue Queue)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/*_QUEUE_H_*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Queue</span><br><span class="line">NewQueue()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> NewList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">Enqueue(Queue Queue, ElementType Value)</span><br><span class="line">&#123;</span><br><span class="line">    Insert(Queue, Value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ElementType</span><br><span class="line">Dequeue(Queue Queue)</span><br><span class="line">&#123;</span><br><span class="line">    ElementType Value;</span><br><span class="line">    Value = Queue-&gt;Head-&gt;Value;</span><br><span class="line">    DeleteAt(Queue, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> Value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stack</title>
      <link href="/2019/01/21/data-structure/lists/stack/"/>
      <url>/2019/01/21/data-structure/lists/stack/</url>
      
        <content type="html"><![CDATA[<p>A stack is a list with the restriction that insertions and deletions can be performed in only one position. We call this behavior last in first out(<strong>LIFO</strong>), and the position, we call it <strong>top</strong>, top of a stack.</p><p>Those Pictures shows a stack can be.</p><p>It can be …</p><p><img src="https://sherlockblaze.com/resources/img/cs/stack/stack_1.png" alt="ArrayList Stack"></p><p>or It can be …</p><p><img src="https://sherlockblaze.com/resources/img/cs/stack/stack_2.png" alt="LinkedList Stack"></p><p>As we can see, The most recently inserted element can be examined prior to performing a Pop by use of Top routine.</p><h2 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a>Operation</h2><ul><li><a href="#Push">Push</a></li><li><a href="#Pop">Pop</a></li><li><a href="#Implemention">Implementation</a></li></ul><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><p>It easy to understand how to push a value into a stack.</p><p><img src="https://sherlockblaze.com/resources/img/cs/stack/stack_push.png" alt="Push"></p><h3 id="Pop"><a href="#Pop" class="headerlink" title="Pop"></a>Pop</h3><p>It also easy to understand how to pop a value into a stack.</p><p><img src="https://sherlockblaze.com/resources/img/cs/stack/stack_pop.png" alt="Pop"></p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>Actually, stack still is a list, whatever a linkelist or arraylist, all of them can be the data structure of a stack.<br>In my version, I use the linkedlist as the data structure of it.</p><p><img src="https://sherlockblaze.com/resources/img/cs/stack/my_stack.png" alt="My Stack"></p><p>For better push of element, I make the head node points to the <strong>Top</strong>, and the last node of this linkedlist called <strong>Bottom</strong>. If we always insert or delete node at the index 0, we can get a stack.</p><p><img src="https://sherlockblaze.com/resources/img/cs/stack/my_stack_more.png" alt="More about My Stack"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Doubly LinkedList</title>
      <link href="/2019/01/21/data-structure/lists/doubly-linkedList/"/>
      <url>/2019/01/21/data-structure/lists/doubly-linkedList/</url>
      
        <content type="html"><![CDATA[<p>Sometimes it’s convenient to traverse lists backwards. We just add an extra field to the data structure, containing a pointer to the previous node.</p><p>Here is what Doubly LinkedList looks like.</p><p><img src="https://sherlockblaze.com/resources/img/cs/doublylinkedlist/doublylinkedlist.png" alt="Doubly LinkedList"></p><p>In my version, there’s still has a head node of the list, and it’s value equals the total number of valid nodes.</p><p><img src="https://sherlockblaze.com/resources/img/cs/doublylinkedlist/doublylinkedlist_with_head.png" alt="Doubly LinkedList With Head Node"></p><p>Now we can see the basic operations of doubly linkedlist.</p><h2 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h2><ul><li><a href="#Insert">Insert</a></li><li><a href="#Delete">Delete</a></li></ul><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><p><img src="https://sherlockblaze.com/resources/img/cs/doublylinkedlist/insert_step1.png" alt="Insert Step1"></p><p>First Step, we get a new node called NewNode, and get it ready for insertion. Then we let the Next Pointer of NewNode equals the Next pointer of previous node.</p><p><img src="https://sherlockblaze.com/resources/img/cs/doublylinkedlist/insert_step2.png" alt="Insert Step2"></p><p>Then we need to let the Previous pointer of the node that the Next pointer of previous node points to points to the NewNode.</p><p><img src="https://sherlockblaze.com/resources/img/cs/doublylinkedlist/insert_step3.png" alt="Insert Step3"></p><p>Let the Next pointer of Previous node points to NewNode</p><p><img src="https://sherlockblaze.com/resources/img/cs/doublylinkedlist/insert_step4.png" alt="Insert Step4"></p><p>Now we can let the Previous pointer of NewNode points to the Previous node.</p><p><strong>And then we finished the insertion. Insert at the end of the list is similar to this.</strong></p><p><img src="https://sherlockblaze.com/resources/img/cs/doublylinkedlist/insert_successed.png" alt="Insert Succeed"></p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>First, we call the node we want to delete TargetNode.</p><p><img src="https://sherlockblaze.com/resources/img/cs/doublylinkedlist/delete_step1.png" alt="Delete Step1"></p><p>As the picture shows, we should let the previous pointer of the next node of the TargetNode points to the previous node of the TargetNode.</p><p><img src="https://sherlockblaze.com/resources/img/cs/doublylinkedlist/delete_step2.png" alt="Delete Step2"></p><p>Then we let the Next pointer of previous node points to the next node of the TargetNode.</p><p><strong>Finished!! Just don’t forget to free the space of TargetNode.</strong></p><p><img src="https://sherlockblaze.com/resources/img/cs/doublylinkedlist/delete_successed.png" alt="Delete Succeed"></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The cost of insertion or deletion still O(1).<br>It’s just as same as <a href="https//sherlockblaze.com/2019/01/20/LinkedList">linkedlist</a> – The standard implementation.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList</title>
      <link href="/2019/01/21/data-structure/lists/arraylist/"/>
      <url>/2019/01/21/data-structure/lists/arraylist/</url>
      
        <content type="html"><![CDATA[<p>Now let’s talk about arraylist, we know it costs O(n) when you want access a value at the index you give by using a linkedlist, if you want make it faster to finish, you should use arraylist, it cost O(1) when you wanna access the index you want. Because the underlying is an array. So you can access any value at the index you give in one step, just arr[index]. It’s pretty cool. Now let me show you what the arraylist look like.</p><p><img src="https://sherlockblaze.com/resources/img/cs/arraylist/arraylist.png" alt="ArrayList"></p><p>And in my version, there’s still head node here which save the total number of values in the arraylist, the pointer points to the arraylist and the capacity of the arraylist.Let’s meet it first.</p><p><img src="https://sherlockblaze.com/resources/img/cs/arraylist/arraylist_with_head_node.png" alt="Arraylist With HeadNode"></p><p><strong><em>Let’s be clear:</em></strong></p><blockquote><p><strong>Size</strong>: The total number of values saved in the arraylist<br><strong>Capacity</strong>: The capacity of the arraylist, means how many values can be saved in this arraylist now.<br><strong>ArrayList</strong>: The pointer points to the first address of the Array we save values.</p></blockquote><p>Now let’s review the basic operations of arraylist.</p><h2 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h2><ul><li><a href="#Insert">Insert</a></li><li><a href="#Delete">Delete</a></li></ul><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><p>If we wanna insert a value into a arraylist at the tail, that’ll be easy, just <strong><em>arr[L-&gt;Size] = Value</em></strong> , but if we want to do more about insertion, we should do like this.</p><p>In this example, we want to insert value 9 at index 2 of the array.<br>First step, we should move all the values between index 2 and the end of array one step backward.</p><p><img src="https://sherlockblaze.com/resources/img/cs/arraylist/insert_step1.png" alt="Insert Step1"></p><p>Second step, we just need to do like this. <code>array[2] = 9</code></p><p><img src="https://sherlockblaze.com/resources/img/cs/arraylist/insert_step2.png" alt="Insert Step2"></p><p>It’s finished. Pretty Easy. And it costs O(n). Don’t forget to change the value of <strong>Size</strong>, it’s supposed to plus one after doing this.</p><p><img src="https://sherlockblaze.com/resources/img/cs/arraylist/insert_successed.png" alt="Insert Successed"></p><p><strong>But what happens when you insert an element when you have insufficient capacity?</strong></p><p>Here is the answer.</p><p>First step, we get a new capacity called NewCapacity, and <code>NewCapacity = OldCapacity / 2 * 3 + OldCapacity</code> in my version, you can modify it to your perferred value. Then we get a new array with capacity <strong>NewCapacity</strong>.</p><p><img src="https://sherlockblaze.com/resources/img/cs/arraylist/insert_without_enough_room_step1.png" alt="Insert Without Enough Room Step1"></p><p>Second step we copy the elements of the old array to the new array in order.</p><p><img src="https://sherlockblaze.com/resources/img/cs/arraylist/insert_without_enough_room_step2.png" alt="Insert Without Enough Room Step2"></p><p>Then we can do like inserting with enough room.</p><p><img src="https://sherlockblaze.com/resources/img/cs/arraylist/insert_without_enough_room_step3.png" alt="Insert Without Enough Room Step3"></p><p><img src="https://sherlockblaze.com/resources/img/cs/arraylist/insert_without_enough_room_successed.png" alt="Insert Without Enough Room Success"></p><p>Let’s take a look at the code.</p><ul><li>Insert at the tail</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">Insert(List L, ElementType value)</span><br><span class="line">&#123;</span><br><span class="line">    Array <span class="built_in">array</span>;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;Size &gt;= L-&gt;Capacity)</span><br><span class="line">        IncreaseCapacity(L);</span><br><span class="line">    <span class="built_in">array</span> = L-&gt;ArrayList;</span><br><span class="line">    *(<span class="built_in">array</span> + L-&gt;Size) = value;</span><br><span class="line">    L-&gt;Size += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ Insert at given index</span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">InsertAt(List L, <span class="keyword">int</span> index, ElementType value)</span><br><span class="line">&#123;</span><br><span class="line">    Array <span class="built_in">array</span>;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; L-&gt;Size)</span><br><span class="line">        FatalError(<span class="string">"Insert Failed. Illegal index."</span>);</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;Size + <span class="number">1</span> &gt; L-&gt;Capacity)</span><br><span class="line">        IncreaseCapacity(L);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">array</span> = L-&gt;ArrayList;</span><br><span class="line">    <span class="keyword">if</span> (index == L-&gt;Size)</span><br><span class="line">        Insert(L, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        MoveTheValuesBackwards(L, index);</span><br><span class="line">        *(<span class="built_in">array</span> +  index) = value;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;Size += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Capacity expansion</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> </span><br><span class="line">IncreaseCapacity(List L)</span><br><span class="line">&#123;</span><br><span class="line">    Array <span class="built_in">array</span>;</span><br><span class="line">    <span class="keyword">int</span> Capacity = L-&gt;Capacity;</span><br><span class="line">    <span class="keyword">int</span> NewCapacity = Capacity / <span class="number">2</span> * <span class="number">3</span> + Capacity;</span><br><span class="line">    <span class="built_in">array</span> = (ElementType *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElementType) * NewCapacity);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span> == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"No Enough Room!!"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L-&gt;Size; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        *(<span class="built_in">array</span> + i) = *(L-&gt;ArrayList + i);</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;ArrayList = <span class="built_in">array</span>;</span><br><span class="line">    L-&gt;Capacity = NewCapacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>Then let’s talk about deletion of arraylist. Same with insert at the tail, if you wanna delete the value at the tail, it’s will be easy too, we just let the <strong>Size</strong> be smaller like this. <code>L-&gt;Size -= 1</code>. But if you wanna do more?? We should be like this.</p><p>First Step. Move all the values between index 2 and the end of array one step forward, like this.</p><p><img src="https://sherlockblaze.com/resources/img/cs/arraylist/delete_step1.png" alt="Delete Step1"></p><p>Then we just do like this. <code>L-&gt;Size -= 1</code>. Finished. Easy too, but it’s cost O(n) too;</p><p><img src="https://sherlockblaze.com/resources/img/cs/arraylist/delete_step2.png" alt="Delete Step2"></p><p><strong>Delete Succeed!!!</strong></p><p><img src="https://sherlockblaze.com/resources/img/cs/arraylist/delete_successed.png" alt="Delete Succeed"></p><p>We also take a look at the deletion code too.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">Delete(List L)</span><br><span class="line">&#123;</span><br><span class="line">    L-&gt;Size -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">DeleteAt(List L, <span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; L-&gt;Size)</span><br><span class="line">        FatalError(<span class="string">"Delete Failed. Illegal index."</span>);</span><br><span class="line">    <span class="keyword">if</span> (index + <span class="number">1</span> == L-&gt;Size)</span><br><span class="line">        Delete(L);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        MoveTheValuesForWard(L, index);</span><br><span class="line">        L-&gt;Size -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>And we’re supposed to remember the cost of insertion and deletion by using linkedlist, it O(1), now we can see the differences between arraylist and linkedlist.</p><p><strong>Here, we just talk about the operations.</strong></p><table><thead><tr><th>Implementation</th><th>Delete At Tail</th><th>Insert At Tail</th><th>Delete At</th><th>Insert At</th><th>Access At</th><th>Access Specified Value</th></tr></thead><tbody><tr><td>LinkedList</td><td>O(1)</td><td>O(1)</td><td>O(1)</td><td>O(1)</td><td>O(n)</td><td>O(n)</td></tr><tr><td>ArrayList</td><td>O(1)</td><td>O(1)</td><td>O(n)</td><td>O(n)</td><td>O(1)</td><td>O(n)</td></tr></tbody></table><p>So, just choose the right way to save your data. And if you wanna read all code about arraylist, try go to my <a href="https://github.com/sherlockblaze/all_knowledge_review/blob/master/Data_Structures/lists/arraylist.h" target="_blank" rel="noopener">repo</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkedList</title>
      <link href="/2019/01/21/data-structure/lists/linkedlist/"/>
      <url>/2019/01/21/data-structure/lists/linkedlist/</url>
      
        <content type="html"><![CDATA[<p>Here is the linked list. It looks like this.</p><p><img src="https://sherlockblaze.com/resources/img/cs/linkedlist/linkedlist.png" alt="LinkedList"></p><blockquote><p>In order to avoid the linear cost of insertion and deletion, we need to ensure that the list is not stored contiguously. By using this kind of list, we can make the cost of insertion and deletion be O(1).<br>The linked list consists of a series of structures, which are not necessarily adjacent in memory.</p></blockquote><p>Each node contains the element and a pointer points to the next node, we call it Next pointer, And the last node’s Next pointer points to NULL. And ANSI C specifies that NULL is zero.</p><p>In my version, I put a head node to save the length of the linked list.</p><p><img src="https://sherlockblaze.com/resources/img/cs/linkedlist/linkedlist_with_head_node.png" alt="With Head Node"></p><p>Now we can see the operations of LinkedList.</p><h2 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h2><ul><li><a href="#Insert">Insert</a></li><li><a href="#Delete">Delete</a></li></ul><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><p><img src="https://sherlockblaze.com/resources/img/cs/linkedlist/insert_step1.png" alt="Insert Step1"></p><p>It’s the first step of the insert operation.</p><p>As we can see, we got Node A, B, C, and the C is the newest node we wanna insert into this list. First we make the Next pointer of C equals Next pointer of A, then the C node’s Next Pointer points to node B.</p><p>second step, we let the A’s Next pointer points to our new node C.</p><p><img src="https://sherlockblaze.com/resources/img/cs/linkedlist/insert_step2.png" alt="Insert Step2"></p><p>Finally, we finished it.</p><p><strong><em>Insert Succeed!!</em></strong></p><p><img src="https://sherlockblaze.com/resources/img/cs/linkedlist/insert_successed.png" alt="Insert Succeed"></p><p>Let’s take a look at the code.</p><ul><li>Insert at the tail</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Insert a value after all elements</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">Insert(List L, ElementType value)</span><br><span class="line">&#123;</span><br><span class="line">Position NewNode, LastNode;</span><br><span class="line">NewNode = (struct Node *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (struct Node));</span><br><span class="line"><span class="keyword">if</span> (NewNode == <span class="literal">NULL</span>)</span><br><span class="line">FatalError(<span class="string">"Insert failed. No enough room!!"</span>);</span><br><span class="line">LastNode = L-&gt;Head;</span><br><span class="line">NewNode-&gt;Value = value;</span><br><span class="line">NewNode-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (LastNode == <span class="literal">NULL</span>)</span><br><span class="line">L-&gt;Head = NewNode;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(LastNode-&gt;Next != <span class="literal">NULL</span>)</span><br><span class="line">LastNode = LastNode-&gt;Next;</span><br><span class="line">LastNode-&gt;Next = NewNode;</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;Size += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Insert at given index</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Insert a Value at the index you give</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">InsertAt(List L, <span class="keyword">int</span> index, ElementType value)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (index &gt; L-&gt;Size || index &lt; <span class="number">0</span>)</span><br><span class="line">FatalError(<span class="string">"Illegal index"</span>); </span><br><span class="line"><span class="keyword">if</span> (index == L-&gt;Size)</span><br><span class="line">Insert(L, value);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">PtrToNode NewNode = (struct Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line"><span class="keyword">if</span> (NewNode == <span class="literal">NULL</span>)</span><br><span class="line">FatalError(<span class="string">"No Enough room!"</span>);</span><br><span class="line">NewNode-&gt;Value = value;</span><br><span class="line">Position TmpPointer;</span><br><span class="line">TmpPointer = L-&gt;Head;</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">NewNode-&gt;Next = L-&gt;Head;</span><br><span class="line">L-&gt;Head = NewNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (++i &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">TmpPointer = TmpPointer-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line">NewNode-&gt;Next = TmpPointer-&gt;Next;</span><br><span class="line">TmpPointer-&gt;Next = NewNode;</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;Size += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>We’ll show two steps of delete operation.</p><p>First step, we let the node A’s Next pointer equals the Next pointer of node C.</p><p><img src="https://sherlockblaze.com/resources/img/cs/linkedlist/delete_step1.png" alt="Delete Step1"></p><p>Because we just get one Next pointer for each node, so, it just make no pointer points to node C.</p><p><img src="https://sherlockblaze.com/resources/img/cs/linkedlist/delete_step2.png" alt="Delete Step2"></p><p><strong>So delete Succeed!!</strong></p><p><img src="https://sherlockblaze.com/resources/img/cs/linkedlist/delete_successed.png" alt="Delete Succeed"></p><ul><li>Delete at the tail</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Delete the last node of list L</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">Delete(List L)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (L == <span class="literal">NULL</span> || L-&gt;Size == <span class="number">0</span>)</span><br><span class="line">FatalError(<span class="string">"Delete failed. Please try to create a list and insert some nodes into it."</span>);</span><br><span class="line">Position P, Previous;</span><br><span class="line">P = L-&gt;Head;</span><br><span class="line"><span class="keyword">if</span> (L-&gt;Size == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">L-&gt;Head = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (P-&gt;Next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">Previous = P;</span><br><span class="line">P = P-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line">Previous-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">L-&gt;Size -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(P);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Delete at the given index</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Delete the node at the index you give</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">DeleteAt(List L, <span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (index &gt; L-&gt;Size - <span class="number">1</span>)</span><br><span class="line">FatalError(<span class="string">"Illegal index"</span>);</span><br><span class="line">Position P, NewNext;</span><br><span class="line">P = L-&gt;Head;</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">NewNext = P-&gt;Next;</span><br><span class="line">L-&gt;Head = NewNext;</span><br><span class="line"><span class="built_in">free</span>(P);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (++i &lt; index)</span><br><span class="line">P = P-&gt;Next;</span><br><span class="line">NewNext = P-&gt;Next-&gt;Next;</span><br><span class="line"><span class="built_in">free</span>(P-&gt;Next);</span><br><span class="line">P-&gt;Next = NewNext;</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;Size -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>We know that if you just calculate the cost of insertion or deletion, you’ll find T(n) = O(1).<br>But you know if we wanna insert or delete a value with specify index, it’ll cost O(n) in whole operation. But the cost of insertion or deletion still is O(1). Here, we just talk about the cost of insertion or deletion.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 多线程深入一些</title>
      <link href="/2018/08/16/python/more-about-multithread/"/>
      <url>/2018/08/16/python/more-about-multithread/</url>
      
        <content type="html"><![CDATA[<p>python提供了两个模块，用于完成多线程，_thread以及threading。关于两位的关系，官方文档中是如下的描述的：</p><blockquote><p>The threading module provides an easier to use and high-level threading API built on top of the _thread module</p></blockquote><p><a href="https://docs.python.org/3/library/_thread.html" target="_blank" rel="noopener">_thread</a> 是 threading 的底层建筑，threading 是 _thread的高级封装。这里我们主要讲一下 _thread</p><h2 id="threading"><a href="#threading" class="headerlink" title="threading"></a><a href="https://docs.python.org/3/library/threading.html#module-threading" target="_blank" rel="noopener">threading</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_a</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'thread %s is running...'</span> % threading.current_thread().name)</span><br><span class="line">    print(<span class="string">'solve task a'</span>)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">5</span>:</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">        print(<span class="string">'thread %s &gt;&gt;&gt; %s'</span> % (threading.current_thread().name, n))</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'thread %s ended.'</span> % threading.current_thread().name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_b</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'thread %s is running...'</span> % threading.current_thread().name)</span><br><span class="line">    print(<span class="string">'solve task b'</span>)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">5</span>:</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">        print(<span class="string">'thread %s &gt;&gt;&gt; %s'</span> % (threading.current_thread().name, n))</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'thread %s ended.'</span> % threading.current_thread().name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'thread %s is running...'</span> % threading.current_thread().name)</span><br><span class="line">t1 = threading.Thread(target=task_a, name=<span class="string">'taskAThread'</span>)</span><br><span class="line">t2 = threading.Thread(target=task_b, name=<span class="string">'taskBThread'</span>)</span><br><span class="line"></span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">print(<span class="string">'thread %s ended.'</span> % threading.current_thread().name)</span><br></pre></td></tr></table></figure><blockquote><p>我们可以看到python中启动一个线程的方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threading.Thread(target=task_a, name=<span class="string">'thread_name'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>target是在该线程中执行的代码块，name也就是线程的名字。我们可以通过以下代码获取当前线程的名字。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">treading.current_thread().name</span><br></pre></td></tr></table></figure><blockquote><p>在创建出一个线程后，需要调用start方法来启动它。</p></blockquote><p>以上就是启动一个线程的过程。<br>我没有对t2调用join方法，是为了想表现出来，即使主线程结束了，子线程还是会继续执行。大家需要分清楚，进程与线程以及线程与线程这两种关系。</p><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><blockquote><p>涉及到多线程的问题，就一定会讨论到同步加锁的问题。因为线程和进程不一样，进程中所有的资源都是复制了独一份，自己独享，线程生存在进程之下，进程中的资源在多线程中是被共享的。所以需要被同步，使用加锁的方式可以解决。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    count += n</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    count -= n</span><br><span class="line">    print(count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threading.Thread(target=add, name=<span class="string">'ThreadA'</span>, args=(<span class="number">1</span>,)).start()</span><br><span class="line">threading.Thread(target=add, name=<span class="string">'ThreadB'</span>, args=(<span class="number">2</span>,)).start()</span><br><span class="line">在这里，当执行次数足够多的时候，打印出来的count值可能不是<span class="number">0</span>，因为现代计算机代码执行速度较快，以上代码是很难看出效果的。但是上面的代码看出问题的时间可能会比较长，我们可以使用个小技巧，来加快暴露问题的速度。</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    count += n</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    count -= n</span><br><span class="line">    print(count)</span><br><span class="line">        </span><br><span class="line">threading.Thread(target=add, name=<span class="string">'ThreadA'</span>, args=(<span class="number">1</span>,)).start()</span><br><span class="line">threading.Thread(target=add, name=<span class="string">'ThreadB'</span>, args=(<span class="number">2</span>,)),start()</span><br></pre></td></tr></table></figure><p>因为add方法是未同步的，所以导致问题的抛出，为了避免这个问题，我们需要对此这段代码加锁。加锁的方式很简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">lock = thrading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        count += n</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        count -= n</span><br><span class="line">        print(count)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line">threading.Thread(target=add, name=<span class="string">'ThreadA'</span>, args=(<span class="number">1</span>,)).start()</span><br><span class="line">threading.Thread(target=add, name=<span class="string">'ThreadB'</span>, args=(<span class="number">2</span>,)),start()</span><br></pre></td></tr></table></figure><p>通过上面的代码，我们可以很清楚的看到加锁的方式。</p><h2 id="GIL-global-interpreter-lock"><a href="#GIL-global-interpreter-lock" class="headerlink" title="GIL(global interpreter lock)"></a>GIL(global interpreter lock)</h2><blockquote><p>在Python中，有一个称为GIL的东西，在每个线程执行前，必须要获取GIL锁，然后执行100个字节后，再自动释放，然后让别的线程得到执行。<br>这样做就涉及到一个问题，现在的计算机大多为多核，这种情况下，Python多线程领域，多核的优势当然无存，因为GIL锁的存在，使得多核无法被充分利用。就算是10核的计算机，有10个线程在跑，它实际上也只相当于在一个核心上运行。因为线程必须要获得GIL锁才能够运行。<br>当然，Python中如果想利用到多核心，可以通过多进程的方式来控制，每个进程都一个单独的GIL锁。</p></blockquote><h2 id="ThreadLocal的使用"><a href="#ThreadLocal的使用" class="headerlink" title="ThreadLocal的使用"></a>ThreadLocal的使用</h2><p>使用多线程时，我们一定要考虑线程安全性问题。使用全局变量肯定是没有使用线程独有的局部变量来的好，使用全局变量意味着需要加锁、同步，这样必然会导致性能的下降。但是如果使用局部变量，也会有一定的问题，比如有一个线程，按照这样的顺序执行：A-&gt;B-&gt;C-&gt;D。意思是：步骤A到步骤B然后类推。这个时候，如果有个变量s，需要被每个步骤使用，我们就需要不断的做传递，这样一层层的传，一是，增加我们的调用栈内容，二是代码上也不够美观。</p><p>我们可以通过一个全局的dict，然后用线程的唯一标识作为dict的key，绑定对应的变量，这样会更加方便一些。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    man = Man()</span><br><span class="line">    dict[threading.current_thread()] = man</span><br><span class="line">    doA()</span><br><span class="line">    doB()</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doA</span><span class="params">()</span>:</span></span><br><span class="line">    man = dict[threading.current_thread()]</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doB</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><blockquote><p>通过上述代码，我们声明了一个全局字典，然后将与线程对应的数据绑定起来，存放到dict中，后续再使用时，根据相应的条件直接获取即可。</p></blockquote><p>这样的设计是绝对可行的，是个很好的方法，就是每次都要从dict中获取相应数据，在代码上不够美观，<strong>于是一个利用了这种方式的更高级的表示方式出现了：ThreadLocal</strong></p><p>我们来看上面的例子用ThreadLocal是怎么来写的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">global_var = threading.local()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(man, woman)</span>:</span></span><br><span class="line">    global_val.man = man</span><br><span class="line">    global_val.woman = woman</span><br><span class="line">    doA()</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doA</span><span class="params">()</span>:</span></span><br><span class="line">    man = global_val.man</span><br><span class="line">    woman = global_val.woman</span><br><span class="line">    man.run()</span><br><span class="line">    woman.run()</span><br><span class="line">    </span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>通过上述代码中的 global_var = threading.local() 我们成功声明了一个ThreadLocal变量。后续的使用就很清晰了。</p></blockquote><p>那么与使用dict，ThreadLocal有什么先进之处呢？</p><blockquote><p>由于dict中key值是唯一的，所以一个线程仅仅只能存放一个线程独享的变量，但是ThreadLocal不一样，它可以存放很多个，如上述代码所示，存放了man,woman。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 面向对象</title>
      <link href="/2018/08/16/python/object-oriented/"/>
      <url>/2018/08/16/python/object-oriented/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">humanbeing</span><span class="params">(object)</span>:</span></span><br><span class="line">    love = <span class="string">'forever'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, sex, age)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__sex = sex</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printInfo</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'name is %s, sex is %s, I\'m %d years old'</span> % (self.__name, self.__sex, self.age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">male</span><span class="params">(humanbeing)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printInfo</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'i\'m a male, i\'m %d years old'</span> % self.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">female</span><span class="params">(humanbeing)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printInfo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># print('my name is %s, I\'m %d years old, and I\'m a female' % (self.__name, self.age))</span></span><br><span class="line">        print(<span class="string">'i\'m a femal, i\'m %d years old'</span> % self.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printInfo</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'I\'m a monster!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printInfo</span><span class="params">(humanbeing)</span>:</span></span><br><span class="line">    humanbeing.printInfo()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    human = humanbeing(<span class="string">'sherlock blaze'</span>, <span class="string">'male'</span>, <span class="number">19</span>)</span><br><span class="line">    <span class="comment"># human = humanbeing('sherlock blaze')</span></span><br><span class="line">    man = male(<span class="string">'sherlock blaze'</span>, <span class="string">'male'</span>, <span class="number">19</span>)</span><br><span class="line">    woman = female(<span class="string">'yifei liu'</span>, <span class="string">'female'</span>, <span class="number">28</span>)</span><br><span class="line">    printInfo(human)</span><br><span class="line">    printInfo(man)</span><br><span class="line">    printInfo(woman)</span><br><span class="line">    printInfo(animal())</span><br><span class="line">    print(isinstance(man, humanbeing))</span><br><span class="line">    print(type(woman))</span><br><span class="line">    print(type(human) == humanbeing)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> types</span><br><span class="line">    print(type(humanbeing) == types.FunctionType)</span><br><span class="line">    print(type(printInfo) == types.FunctionType)</span><br><span class="line">    print(dir(man))</span><br><span class="line">    print(hasattr(man, <span class="string">'__name'</span>))</span><br><span class="line">    <span class="keyword">if</span> hasattr(man, <span class="string">'__name'</span>):</span><br><span class="line">        print(getattr(man, <span class="string">'__name'</span>))</span><br><span class="line">        print(setattr(man, <span class="string">'__name'</span>, <span class="string">'blaze'</span>))</span><br><span class="line">        print(getattr(man, <span class="string">'__name'</span>))</span><br><span class="line">    print(getattr(man, <span class="string">'age'</span>))</span><br><span class="line">    setattr(man, <span class="string">'age'</span>, <span class="number">23</span>)</span><br><span class="line">    print(getattr(man, <span class="string">'age'</span>))</span><br><span class="line"></span><br><span class="line">    print(humanbeing.love)</span><br><span class="line"></span><br><span class="line">    man.length = <span class="number">18</span></span><br><span class="line">    print(man.length)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">del</span> man.length</span><br><span class="line">    <span class="comment"># print(man.length)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><blockquote><p>根据上述代码，我们做以下总结：</p></blockquote><ol><li><strong> init </strong> 中定义了实例所必须具有的属性</li><li>class A(object)括号中为该类的父类</li><li>通过a = A()的方式声明一个实例，同时必须要传入 <strong> init </strong> 声明的属性</li><li>你可以通过a.xixi = ‘x’ 的方式给该对象添加属性，然后通过del a.xixi的方式删除掉它</li><li><strong> name前面用 </strong> 修饰的属性名为私有的，无法从外部进行访问。</li><li>love 是类变量，跟 <strong> name不一样， </strong> name是实例变量，专属于一个实例</li><li>父类和子类都拥有同一个方法，调用时会调用子类的方法。</li><li>animal类并不是humanbeing的子类，但是拥有跟humanbeing类一样的方法，所以同样可以传入printInfo方法中，并输出结果。这是由于python的鸭子类型，意思就是你不必的确是鸭子，只要你的行为看起来是鸭子，你就可以是一只鸭子。</li><li>isinstance(a, A)可以判断a是否是类A的实例</li><li>type(a)用于输出a的类型</li><li>getattr/setattr/hasattr 用于直接对a的属性进行操作</li><li>dir(a) 可以输出一个实例所有的属性及相关的操作，用在类上也是一样的，dir(A)，会输出类A所有的属性及具有的操作。</li></ol><h2 id="更多内容"><a href="#更多内容" class="headerlink" title="更多内容"></a>更多内容</h2><h3 id="动态地添加属性-方法"><a href="#动态地添加属性-方法" class="headerlink" title="动态地添加属性/方法"></a>动态地添加属性/方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">a = A()</span><br><span class="line">a.name = <span class="string">'Blaze'</span></span><br><span class="line">print(a.name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_age</span><span class="params">(self, age)</span>:</span></span><br><span class="line">    self.age = age</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</span><br><span class="line">a.set_age = MethodType(set_age, a)</span><br><span class="line">a.set_age(<span class="number">12</span>)</span><br><span class="line">print(a.age)</span><br><span class="line"></span><br><span class="line">A.set_age = set_age</span><br><span class="line">a1 = A()</span><br><span class="line">a1.set_age(<span class="number">18</span>)</span><br><span class="line">print(a1.age)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_favourite</span><span class="params">(self, sport)</span>:</span></span><br><span class="line">    self.sport = sport</span><br><span class="line"></span><br><span class="line">A.set_favourite = MethodType(set_favourite, A)</span><br><span class="line">a2 = A()</span><br><span class="line">a2.set_favourite(<span class="string">'basketball'</span>)</span><br><span class="line">print(a2.sport)</span><br></pre></td></tr></table></figure><h3 id="slots"><a href="#slots" class="headerlink" title=" slots "></a><strong> slots </strong></h3><p>上面看到，对于对象a，我们可以通过a.xixixi来添加一个属性，但是我们如果不想让这样的事情发生呢？不允许增加新的属性。<br>针对上面的代码，我们需要这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">humanbeing</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">'name'</span>, <span class="string">'sex'</span>, <span class="string">'age'</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><blockquote><p>通过上面的方式，除了等式右边切片内的属性，将无法给实例添加任何属性。</p></blockquote><h3 id="property"><a href="#property" class="headerlink" title="property"></a>property</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self._name = value</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    a = A(<span class="string">'blaze'</span>, <span class="number">23</span>)</span><br><span class="line">    a.name = <span class="string">'sherlock blaze'</span></span><br><span class="line">    print(a.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><blockquote><p>通过@property 和 @name.setter让属性name成为了可读且可修改的属性，而age属性仅为可读属性。通过这个方式，我们可以像调用属性一样调用方法。</p></blockquote><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">electronics</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">smartphone</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">iphoneX</span><span class="params">(electornics, smarphone)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>按照上面的操作即可实现多重继承，这种设计通常称之为MixIn</p></blockquote><h3 id="str"><a href="#str" class="headerlink" title=" str "></a><strong> str </strong></h3><p>类似于Java的toString</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 函数式编程(一)</title>
      <link href="/2018/08/16/python/functional-programming/"/>
      <url>/2018/08/16/python/functional-programming/</url>
      
        <content type="html"><![CDATA[<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f = abs</span><br><span class="line">print(f(<span class="number">-10</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showtime</span><span class="params">(x, f)</span>:</span></span><br><span class="line">    print(f(x))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    showtime(<span class="number">-20</span>, abs)</span><br><span class="line">    </span><br><span class="line">main()</span><br></pre></td></tr></table></figure><blockquote><p>通过以上的代码，我们发现函数名，就是一个指向函数的指针。如果熟悉C语言，我们其实可以知道以f()方式来调用函数仅仅是一个语法糖，实际上也是通过指针来访问的。</p></blockquote><h2 id="map-reduce"><a href="#map-reduce" class="headerlink" title="map/reduce"></a>map/reduce</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line">r = map(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">rlist = list(r)</span><br><span class="line">print(rlist)</span><br></pre></td></tr></table></figure><blockquote><p>上面的代码可以看到，map接收两个参数，一个是一个函数，一个是iterable。可以对元素进行同样的处理。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line">    </span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">result = reduce(add, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">print(result)</span><br><span class="line">reduce 函数的参数同样是两个，一个是函数，一个是序列。可以把要做的操作迭代在每个元素上，上面的语句等同于:</span><br><span class="line">f(f(f(f(<span class="number">1</span>, <span class="number">2</span>), <span class="number">3</span>), <span class="number">4</span>), <span class="number">5</span>)</span><br><span class="line">filter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">list = list(filter(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]))</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><blockquote><p>通过上面的代码，我们可以观察到，filter同样传入一个函数，和一个序列。上述代码输出后，我们可以得到这样的结论：对于filter函数，它是把序列中的元素，根据传入函数返回值为True/False来进行筛选。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_odd_list</span><span class="params">()</span>:</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        n = n + <span class="number">2</span></span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_no_division</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x % n &gt; <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primes</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    it = _odd_list()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        n = next(it)</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        it = filter(_no_division(n), it)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> primes():</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">1000</span>:</span><br><span class="line">        print(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h2><p>python可以把函数作为返回值返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_later</span><span class="params">(*arg)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span>:</span></span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> arg:</span><br><span class="line">            sum += element</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">f = do_later(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">print(f())</span><br></pre></td></tr></table></figure><blockquote><p>上面的代码，把sum函数作为返回值返回给调用者，这个方式，导致调用do_later方法时不是立马进行计算，而是在实际执行f()方法的时候，才会进行计算。这样的方式叫做闭包。</p></blockquote><p>这个方式用起来很酷，但是同时要注意可能存在的问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_later</span><span class="params">()</span>:</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">return</span> i * i</span><br><span class="line">        fs.append(multiply)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line">    </span><br><span class="line">f1, f2, f3 = do_later()</span><br><span class="line">print(f1())</span><br><span class="line">print(f2())</span><br><span class="line">print(f3())</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4</span><br><span class="line">4</span><br></pre></td></tr></table></figure><blockquote><p>通过上面的例子，我们可以看到里面存在的问题。也很好理解，函数也是存在内存中的一段指令，里面所用到的参数值，也是通过同样的方式来保存的。在上面，f1/f2/f3都利用了i这个参数，但是随着迭代，i的值发生了变化，所以在真正调用执行函数的时候，输出的结果都是4。</p></blockquote><h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><blockquote><p>通过lambda关键字，我们可以声明匿名函数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x: x * x</span><br><span class="line">print(f)</span><br><span class="line">print(f(<span class="number">4</span>))</span><br><span class="line">f = <span class="keyword">lambda</span> x, y: x * y</span><br><span class="line">print(f)</span><br><span class="line">print(f(<span class="number">4</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><blockquote><p>通过上面的代码，我们总结如下结论:</p></blockquote><ol><li>lambda后的标识符为函数的参数</li><li>不需要提供return语句，后面的表达式即为返回的内容。</li></ol><h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">print(int(<span class="string">'3421'</span>, base=<span class="number">16</span>))</span><br><span class="line">print(int(<span class="string">'3421'</span>, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line">int16 = functools.partial(int, base=<span class="number">16</span>)</span><br><span class="line">print(int16(<span class="string">'3421'</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line">    </span><br><span class="line">multiply10 = functools.partial(multiply, y = <span class="number">10</span>)</span><br><span class="line">multiply2 = functools.partial(multiply, x = <span class="number">2</span>)</span><br><span class="line">print(multiply10(<span class="number">10</span>))</span><br><span class="line">print(multiply2(y=<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会报错</span></span><br><span class="line">print(multiply2(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><blockquote><p>通过上面的代码，我们通过functools.partial，将某个函数的参数设置为一个固定值，这样可以满足对某些特定意义的函数要求，很方便的进行调用。会报错的语句是因为赋值是按照顺序来的，multiply2的时候，x已经有固定值为2，按照顺序，调用语句会再给x做一次赋值，这一次是4，导致<strong><em>TypeError: multiply() got multiple values for argument ‘x’</em></strong></p></blockquote><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printname</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Sherlock Blaze'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>有上述函数定义，当我们想在输出Sherlock Blaze 之前，输出一些日志，比如先输出，who’s the most handsome man。但是又不想修改printname函数的定义，这个时候，我们可以通过装饰器来包装一下这个函数，达到我们想要的效果。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*arg, **kw)</span>:</span></span><br><span class="line">        print(<span class="string">'who\'s the most handsome man.'</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*arg, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printname</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Sherlock Blaze'</span>)</span><br><span class="line">    </span><br><span class="line">printname()</span><br></pre></td></tr></table></figure><blockquote><p>通过上面的代码，我们可以观察到装饰器大概的用法。可以有好几层，比如：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*arg, **kw)</span>:</span></span><br><span class="line">            print(<span class="string">'who\'s the most handsome man.'</span>)</span><br><span class="line">            <span class="keyword">return</span> func(*arg, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line">    </span><br><span class="line"><span class="meta">@log('xixixi')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printname</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Sherlock Blaze'</span>)</span><br><span class="line">    </span><br><span class="line">printname()</span><br></pre></td></tr></table></figure><blockquote><p>注意一下装饰器中func参数的位置</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 多线程基础</title>
      <link href="/2018/08/16/python/basic-multithread/"/>
      <url>/2018/08/16/python/basic-multithread/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-Unix下的多进程"><a href="#Linux-Unix下的多进程" class="headerlink" title="Linux/Unix下的多进程"></a>Linux/Unix下的多进程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">Python多进程</span><br><span class="line">print(<span class="string">'1\t%d'</span> % os.getpid())</span><br><span class="line"></span><br><span class="line">pid = os.fork()</span><br><span class="line"><span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'2\ti\'m son %d, my father is %d'</span> % (os.getpid(), os.getppid()))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'3\ti %d just create a son %d.'</span> % (os.getpid(), pid))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'4\t%d'</span> % os.getppid())</span><br></pre></td></tr></table></figure><blockquote><p>我们通过上述代码的输出来讨论这个问题：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1   23714</span><br><span class="line">3   i 23714 just create a son 23721.</span><br><span class="line">4   5408</span><br><span class="line">2   i<span class="string">'m son 23721, my father is 23714</span></span><br><span class="line"><span class="string">4   23714</span></span><br></pre></td></tr></table></figure><blockquote><p>通过上述代码和对应输出，我们做一下总结：</p></blockquote><p>首先我们了解一下fork()，fork是unix/linux系统提供的一种系统调用，但是windows没有，也就是说<strong>上述代码在windows下没有效果。</strong><br>接下来讨论一下fork做的工作，fork把父进程复制了一次，生成一个子进程，然后在父进程和子进程中分别返回一次，也就是返回两次。</p><p>根据上面的输出结果，我们可以看到，进程23714调用了一次os.fork，这个时候父进程收到返回，继续向下走，走到输出3的位置，并打印出刚刚创建的子进程的pid，在走到4，输出父进程是5408</p><p>同时，子进程也做了一次返回，这时候按照子进程的流程往下走，会输出2的语句，打印出父进程，可以看到，是23714。<br>到这里，以上的情形也就大致清楚了。</p><p>其中父进程会记录子进程的pid</p><h2 id="跨平台的多进程"><a href="#跨平台的多进程" class="headerlink" title="跨平台的多进程"></a>跨平台的多进程</h2><p>我们已经知道，通过os.fork是没法在windows下进行多进程的，所幸，Python提供了可跨平台的多进程启动方式，通过multiprocess中的Process我们可以轻松启动一个子进程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'task %s'</span> % name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mission</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        print(<span class="string">'task %s'</span> % i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">no_task</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'just for fun'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p1 = Process(target=task, args=(<span class="string">'A'</span>,))</span><br><span class="line">    p2 = Process(target=mission, args=(<span class="string">'B'</span>, <span class="string">'C'</span>))</span><br><span class="line">    p3 = Process(target=no_task)</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    p3.join()</span><br><span class="line">    print(<span class="string">'Over'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>上述代码，我们可以看到创建一个进程的方式。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p1 = Process(target=task, args(<span class="string">'A'</span>))</span><br></pre></td></tr></table></figure><blockquote><p>通过提供要启动的方法，以及传递的参数，再调用start()方法，就可以轻松启动一个进程。</p></blockquote><h2 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h2><p>有时候，我们需要对进程的启用有所限制，不然不断地增加进程，会逐渐消耗完系统的资源。这个时候，我们需要使用线程池，来对线程的启用做一些限制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_time_task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Run task %s (%s)...'</span> % (name, os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">'Task %s runs %0.2f seconds.'</span> % (name, (end - start)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'Parent process %s.'</span> % os.getpid())</span><br><span class="line">    p = Pool(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        p.apply_async(long_time_task, args=(i,))</span><br><span class="line">    print(<span class="string">'Waiting for all subprocesses done...'</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">'All subprocesses done.'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>代码输出如下：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Parent process 7240.</span><br><span class="line">Waiting <span class="keyword">for</span> all subprocesses <span class="keyword">done</span>...</span><br><span class="line">Run task 0 (7247)...</span><br><span class="line">Run task 1 (7248)...</span><br><span class="line">Run task 2 (7249)...</span><br><span class="line">Run task 3 (7250)...</span><br><span class="line">Task 3 runs 0.11 seconds.</span><br><span class="line">Run task 4 (7250)...</span><br><span class="line">Task 4 runs 0.74 seconds.</span><br><span class="line">Task 0 runs 1.11 seconds.</span><br><span class="line">Task 1 runs 2.14 seconds.</span><br><span class="line">Task 2 runs 2.25 seconds.</span><br><span class="line">All subprocesses <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><blockquote><p>我们可以看到在执行任务0、1、2、3的时候没有提示任务4的执行，因为我们的进程池最多只能容纳4个进程执行。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = Pool(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><blockquote><p>所以只有当有进程执行完成返回后，才有机会载入执行。</p></blockquote><p>其中，<strong>Pool()的默认值是计算机的核数</strong></p><h2 id="进程中通信"><a href="#进程中通信" class="headerlink" title="进程中通信"></a>进程中通信</h2><p>进程之间是需要通信的，python的multiprocessing封装了一些系统底层的东西，并且提供了Pipe/Queue多种方式来帮助交换数据。</p><p><strong><em>Waiting…</em></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 基础语法</title>
      <link href="/2018/08/16/python/basic-grammar/"/>
      <url>/2018/08/16/python/basic-grammar/</url>
      
        <content type="html"><![CDATA[<h2 id="List-Tuple"><a href="#List-Tuple" class="headerlink" title="List/Tuple"></a>List/Tuple</h2><blockquote><p>List和Tuple都是有序的列表，区别是List中的元素可以改变，而Tuple中的元素无法改变</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明一个列表</span></span><br><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># 列表中的元素可以是不同类型</span></span><br><span class="line">list = [<span class="number">1</span>, <span class="keyword">True</span>, <span class="string">'Sherlock Blaze'</span>]</span><br><span class="line"><span class="comment"># 可以通过类似访问数组的方式访问Python中的列表，比如</span></span><br><span class="line"><span class="comment"># list[0]、list[1]、list[2]分别得到 1、2、3</span></span><br><span class="line"><span class="comment"># 弹出最后一位的元素</span></span><br><span class="line">list.pop()</span><br><span class="line"><span class="comment"># 弹出指定位置的元素</span></span><br><span class="line">list.pop(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 在结尾添加元素</span></span><br><span class="line">list.append(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 在指定位置插入元素</span></span><br><span class="line">list.insert(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明一个元组</span></span><br><span class="line">tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 因为元组中的元素一旦生成就无法修改，所以没有其他操作</span></span><br><span class="line"><span class="comment"># 声明一个空元组</span></span><br><span class="line">tuple = ()</span><br><span class="line"><span class="comment"># 声明只有一个元素的元组</span></span><br><span class="line">tuple = (<span class="number">1</span>,)</span><br></pre></td></tr></table></figure><p><strong>Attention</strong></p><blockquote><p>观察到上面声明一个元素元组的时候才用的语法为 tuple = (1,)，而不是 tuple = (1) 理由是，在第二种情况下，python解释器将()当做小括号处理，所以其实声明的tuple为数字 1。即 tuple = 1 </p></blockquote><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">happy = <span class="keyword">True</span></span><br><span class="line"><span class="keyword">if</span> happy:</span><br><span class="line">    print(<span class="string">'xixixi'</span>)</span><br><span class="line">    print(<span class="string">'hahaha'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'wuwuwu'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，这里的条件判断语句之后，有一个: ， 并且接在下面的语句都是通过缩进来控制代码域的。</p></blockquote><h2 id="循环-for-while"><a href="#循环-for-while" class="headerlink" title="循环 for/while"></a>循环 for/while</h2><p>通过代码来看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>):</span><br><span class="line">    sum += i</span><br><span class="line">这里 (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) 是一个tuple，通过 <span class="keyword">in</span> tuple 这个语法，可以让 i 遍历到tuple中的所有元素。</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    sum += i</span><br><span class="line">在这里，我们通过 range 函数，产生一个小于数字 <span class="number">5</span> 的序列，也就是 [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num &lt; <span class="number">10</span>:</span><br><span class="line">    print(num)</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><blockquote><p>简单解释：在 num 小于 10时，执行循环下的语句，通过 break 语句，在 num 大于 7 时，退出循环，又通过 continue 语句，使得在 num 等于7时，直接重新从头开始执行循环体下的语句。所以以上代码输出结果为：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td></tr></table></figure><h2 id="dict-set"><a href="#dict-set" class="headerlink" title="dict/set"></a>dict/set</h2><p>依然通过直接的代码来看<br>dict = {‘J’: 23, 343: ‘T’}<br>以上是Python中声明一个字典的方式，所谓字典，类似于其他语言中的map，也就是键值对。可以观察到，python中声明字典的方式，跟直接写一个json没有区别。同时我们可以看到，dict中，所有key/value的数据类型不一定是要全部相同的。<br>用来做key的数据必须是不可变数据，在python中，字符串和整型数据都是不可变数据，所以都可以用来做key。<br>那么，何为不可变数据类型？<br>对于字符串类型的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'sherlock'</span></span><br><span class="line">b = a.replace(<span class="string">'s'</span>, <span class="string">'S'</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sherlock</span><br><span class="line">Sherlock</span><br></pre></td></tr></table></figure><blockquote><p>通过上述代码，我们可以看到虽然用replace代码把a中的小写s替换成了大写S，但是a的字符串值并没有发生改变，是另外生成了一个字符串来存储。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setA = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">setB = set([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">print(setA)</span><br><span class="line">print(setB)</span><br><span class="line">setB.add(<span class="number">3</span>)</span><br><span class="line">setA.remove(<span class="number">2</span>)</span><br><span class="line">setC = setA &amp; setB</span><br><span class="line">setD = setA | setB</span><br><span class="line">print(setC)</span><br><span class="line">print(setD)</span><br></pre></td></tr></table></figure><blockquote><p>通过上述代码，知道了声明一个set的方式，&amp; 是求两个set的交集， | 是求两个set的并集。</p></blockquote><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayhi</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHello</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">5</span>, x * <span class="number">6</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showDefaultArg</span><span class="params">(x, y=<span class="number">1</span>)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showAlterableArg</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        print(i)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showKeywordArg</span><span class="params">(**kw)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'age'</span> <span class="keyword">in</span> kw:</span><br><span class="line">        print(kw[<span class="string">'age'</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showAssignArg</span><span class="params">(*, name, age)</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line">    print(age)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    sayhi()</span><br><span class="line">    print(sayHello(<span class="number">3</span>))</span><br><span class="line">    a, b = sayHello(<span class="number">5</span>)</span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    showDefaultArg(<span class="number">56</span>)</span><br><span class="line">    showAlterableArg(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    showAlterableArg(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">    showKeywordArg(name=<span class="string">'sherlock'</span>, age=<span class="number">34</span>)</span><br><span class="line">    showAssignArg(name=<span class="string">'blaze'</span>, age=<span class="number">45</span>, face=<span class="string">'handsome'</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>程序输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(15, 18)</span><br><span class="line">25</span><br><span class="line">30</span><br></pre></td></tr></table></figure><blockquote><p>通过上述的代码可以观察到</p></blockquote><ol><li>python定义函数的方式，</li><li>pass关键字，这个关键字可以看做是一个占位符，代表什么都不做</li><li>python 调用函数的方式</li><li>python 的函数可以返回多个值，但是通过print(sayHello(3))语句的输出 (15, 18)，我们可以观察到，返回的其实仍然是一个值，是一个tuple，只是在拿回值之后通过声明的顺序依次进行了赋值而已。</li><li>可以设置默认参数值</li><li>可以设置可变长度的参数值</li><li>可以设置关键字参数值</li><li>可以设置指定参数<br>在上述代码中，showAssignArg(name=’blaze’, age=45, face=’handsome’)语句执行时，程序会报错，因为face不是showAssignArg指定的参数值</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 高级特性</title>
      <link href="/2018/08/16/python/advanced-features/"/>
      <url>/2018/08/16/python/advanced-features/</url>
      
        <content type="html"><![CDATA[<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 0-99 的列表</span></span><br><span class="line">L = list(range(<span class="number">100</span>))</span><br><span class="line">print(L[:])</span><br><span class="line">print(L[<span class="number">1</span>:<span class="number">10</span>])</span><br><span class="line">print(L[<span class="number">-10</span>:])</span><br><span class="line">print(L[::<span class="number">2</span>])</span><br></pre></td></tr></table></figure><blockquote><p>通过上述代码，运行输出后，我们可以得到如下的结论：</p><ol><li>复制了一个列表</li><li>截取了L列表从index为1到index为9的元素</li><li>截取了L列表倒数第10个元素到最后一个元素</li><li>所有的元素，每隔两个元素取一个</li></ol></blockquote><p><strong><em>不仅可以对列表做如上的操作，对tuple也可以。</em></strong></p><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">'ABC'</span>:</span><br><span class="line">    print(ch)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]):</span><br><span class="line">    print(index, value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line">isinstance(<span class="string">'abc'</span>, Iterable)</span><br><span class="line">isinstance(<span class="number">123</span>, Iterable)</span><br></pre></td></tr></table></figure><blockquote><p>通过上述代码，运行输出后，我们可以得到如下的结论：</p><ol><li>字符串可以被迭代</li><li>可以通过enumerate方法，将一个list变成一个 index - value 键值对，然后进行迭代</li><li>可以通过isinstance方法判断一个对象是否可以被迭代，要先从collections中导入Iterable</li></ol></blockquote><p><strong>注</strong>：enumerate对tuple也有效</p><h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">list = [m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'XYZ'</span>]</span><br></pre></td></tr></table></figure><h2 id="生成式"><a href="#生成式" class="headerlink" title="生成式"></a>生成式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成式的用法</span></span><br><span class="line">list = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> list:</span><br><span class="line">    print(next(list))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># yield的用法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; max:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'done'</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    f = fib(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> f:</span><br><span class="line">        print(n)</span><br><span class="line">    </span><br><span class="line">main()</span><br></pre></td></tr></table></figure><blockquote><p>先看生成式的用法，通过上面的用法，可以知道通过(<strong><em>生成式</em></strong>)的格式，我们可以得到一个generator，generator保存的不是整个列表，而是保存了所需列表下一个元素的计算方法。当程序运行到yield语句时，程序会返回，等到调用next()的时候，程序再从yield下面的语句开始执行。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateNum</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    print(<span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    print(<span class="string">'b'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    print(<span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    g = generateNum()</span><br><span class="line">    print(next(g))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><blockquote><p>上面的代码体现了yield的执行方式</p></blockquote><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it = iter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = next(it)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><blockquote><p>通过iter()方法可以获得一个iterator，然后通过next()方法获取下一个元素。<br>iterator的运行是惰性的，我们无法将很多的元素一次性存储在内存中，通过这个方式，我们可以得到更多的数据。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 文件操作（一年后新版）</title>
      <link href="/2018/08/16/python/more-about-file-operations/"/>
      <url>/2018/08/16/python/more-about-file-operations/</url>
      
        <content type="html"><![CDATA[<h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = open(filepath, mode)</span><br></pre></td></tr></table></figure><blockquote><p>通过上述代码，可以打开一个文件</p></blockquote><p>以下是mode的种类：</p><table><thead><tr><th>mode</th><th>写法</th></tr></thead><tbody><tr><td>读取模式</td><td>r</td></tr><tr><td>写入模式</td><td>w</td></tr><tr><td>读取二进制模式</td><td>rb</td></tr><tr><td>写入二进制模式</td><td>wb</td></tr><tr><td>追加模式</td><td>a</td></tr><tr><td>以读写模式打开文件</td><td>r+/w+/a+</td></tr><tr><td>以二进制读写模式打开</td><td>rb+/wb+/ab+</td></tr></tbody></table><p><strong>注意</strong> </p><p>当在windows下通过绝对路径来打开文件的时候，需要注意以下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">r"d:\pythonworkspace\Test.txt"</span>,<span class="string">"r"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>通过添加一个r，来表示这个字符串是一个行字符串，这样可以让python解释器将文件中的反斜线理解成字面意义上的反斜线。</p></blockquote><p>或者不想加r，就需要这样来写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"d:\\pythonworkspace\\Test.txt"</span>,<span class="string">"r"</span>)</span><br></pre></td></tr></table></figure><h2 id="文件相关的方法"><a href="#文件相关的方法" class="headerlink" title="文件相关的方法"></a>文件相关的方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/Users/sherlockblaze/Desktop/stu.txt'</span>, <span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'the most handsome guy'</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        print(line)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'/Users/sherlockblaze/Desktop/stu.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">    print(<span class="string">'---------'</span>)</span><br><span class="line">    print(f.readline())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'/Users/sherlockblaze/Desktop/stu.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">    print(<span class="string">'---------'</span>)</span><br><span class="line">    print(f.read())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'/Users/sherlockblaze/Desktop/stu.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">    print(<span class="string">'---------'</span>)</span><br><span class="line">    print(f.read(<span class="number">4</span>))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'/Users/sherlockblaze/Desktop/stu.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>)</span><br><span class="line">    print(<span class="string">'---------'</span>)</span><br><span class="line">    print(f.read())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><blockquote><p>通过上述代码，我们总结如下：</p></blockquote><ol><li>with 语句的操作后，无需再手动关闭文件</li><li>readlines方法是读取所有行，并返回一个列表</li><li>read方法是读取所有内容，可以在read方法中指定需要读取的字节数，防止内容过多，爆掉内存，readline是读取一行内容</li><li>打开的文件操作完成后记得手动close掉(除with语句的操作方式外)</li></ol><h2 id="StringIO-BytesIO"><a href="#StringIO-BytesIO" class="headerlink" title="StringIO/BytesIO"></a>StringIO/BytesIO</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">StringIO</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"></span><br><span class="line">s = StringIO()</span><br><span class="line">s.write(<span class="string">'sherlock'</span>)</span><br><span class="line">print(s.getvalue())</span><br><span class="line"></span><br><span class="line">s.write(<span class="string">' blaze'</span>)</span><br><span class="line"><span class="comment"># print(s.read())</span></span><br><span class="line">print(s.getvalue())</span><br><span class="line"></span><br><span class="line">s = StringIO(<span class="string">'sherlock blaze is the most handsome man in this world'</span>)</span><br><span class="line">print(s.getvalue())</span><br><span class="line">print(s.read())</span><br><span class="line"><span class="comment"># print(s.readline())</span></span><br><span class="line"><span class="comment"># print(s.readlines())</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">b = BytesIO()</span><br><span class="line">b.write(<span class="string">'帅气的夏洛克'</span>.encode(<span class="string">'UTF-8'</span>))</span><br><span class="line">print(b.getvalue())</span><br><span class="line"></span><br><span class="line">b = BytesIO(b.getvalue())</span><br><span class="line">print(b.read())</span><br></pre></td></tr></table></figure><blockquote><p>有时候读取不一定要从文件中，还可以从内存中，StringIO可以让你生成一个字符串，然后获取，BytesIO主要就是用于字节。注意的是，<strong>只有在声明时做了赋值，才可以通过类似于操作文件的read方法等进行读取，否则只能用getvalue。</strong></p></blockquote><h2 id="更多操作"><a href="#更多操作" class="headerlink" title="更多操作"></a>更多操作</h2><p><strong><em>os模块，通过导入os模块可以进行更多操作</em></strong></p><blockquote><p>导入os模块</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure><blockquote><p>获取环境变量以及获取指定的环境变量</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">os.environ</span><br><span class="line">os.environ.get(<span class="string">'JAVA_HOME'</span>)</span><br><span class="line">os.mkdir(<span class="string">'/Users/sherlockblaze/Desktop/xixi'</span>)</span><br><span class="line">os.rmdir(<span class="string">'/Users/sherlockblaze/Desktop/xixi'</span>)</span><br></pre></td></tr></table></figure><h2 id="创建和删除目录"><a href="#创建和删除目录" class="headerlink" title="创建和删除目录"></a>创建和删除目录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.path.split(<span class="string">'/Users/sherlockblaze/Desktop/xixi.txt'</span>)</span><br><span class="line">os.path.splitext(<span class="string">'/Users/sherlockblaze/Desktop/xixi.txt'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>第一个是把文件名和路径分隔开，第二个是拿到文件的扩展名</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.rename(<span class="string">'xixi.txt'</span>, <span class="string">'hxihxi.txt'</span>)</span><br><span class="line">os.remove(<span class="string">'hxihxi.txt'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>文件重命名及删除文件</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 简单文件操作</title>
      <link href="/2017/06/17/python/file-operations/"/>
      <url>/2017/06/17/python/file-operations/</url>
      
        <content type="html"><![CDATA[<blockquote><p>首先介绍一下什么叫做相对路径和绝对路径，我们程序狗家族想必都是懂这个的，但是难免会有童鞋忘记。所以码出来供大家快速回忆一下。</p></blockquote><p>相对路径</p><blockquote><p>相对路径是相对于文件当前的工作路径而言的</p></blockquote><p>绝对路径</p><blockquote><p>绝对路径是由文件名和它的完整路径以及驱动器字母组成的，如果是Windows系统，那么某一个文件的绝对路径可能是:<br>c:\pythonworkspace\firstpy.py<br>在Unix平台上，文件的绝对路径可能是: /home/sherlockblaze/Documents/pythonworkspace/firstpy.py</p></blockquote><h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><blockquote><p>文件大概可以分为文本文件和二进制文件。在不同操作系统下，可以用文本编辑器编辑的文件，都称为文本文件，那么其他的文件就属于二进制文件。而二进制文件相比与文本文件的优势在于二进制文件的处理效率更高一些。</p></blockquote><h2 id="读取文件的开始"><a href="#读取文件的开始" class="headerlink" title="读取文件的开始"></a>读取文件的开始</h2><blockquote><p>读取一个文件的思路永远都是相同的，第一步自然就是打开一个文件。在python中我们通过如下代码使用open函数来打开一个文件。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input = open(filepath,mode)</span><br></pre></td></tr></table></figure><p>我们的mode主要由以下几种方式。</p><table><thead><tr><th>模式</th><th>作用</th></tr></thead><tbody><tr><td>r</td><td>读取模式</td></tr><tr><td>w</td><td>写入模式</td></tr><tr><td>a</td><td>追加模式</td></tr><tr><td>rb</td><td>读取二进制数据模式打开文件</td></tr><tr><td>wb</td><td>写入二进制数据模式打开文件</td></tr></tbody></table><p>同样我们有两种途径来打开文件。</p><ul><li>通过绝对路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input = open(<span class="string">"/Users/sherlockblaze/Documents/pythonworkspace/Test.txt"</span>,<span class="string">"r"</span>)</span><br></pre></td></tr></table></figure><ul><li>通过相对路径（需要注意的是，我们通过相对路径是可以打开当前工作目录下的文件的，也就是说如果我的.py文件存在 ／User/sherlock/Documents 下的话，我们通过相对路径打开的文件也同样存在当前路径下）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input = open(<span class="string">"Test.txt"</span>,<span class="string">"r"</span>)</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>在Windows下我们通过绝对路径来打开文件的时候，我们需要在绝对文件名前加上一个 r 前缀，来表示这个字符串是一个行字符串，这样可以让python解释器将文件中的反斜线理解成字面意义上的反斜线。例如：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input = open(<span class="string">r"d:\pythonworkspace\Test.txt"</span>,<span class="string">"r"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>如果我们不添加 r 作为前缀，则需要用转义字符把上面的语句修改成如下所示：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input = open(<span class="string">"d:\\pythonworkspace\\Test.txt"</span>,<span class="string">"r"</span>)</span><br></pre></td></tr></table></figure><h2 id="向文件中写入数据"><a href="#向文件中写入数据" class="headerlink" title="向文件中写入数据"></a>向文件中写入数据</h2><blockquote><p>我们首先通过写入的方式打开文件，然后通过调用write方法，向文件中写入数据。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    input = open(<span class="string">"Test.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line">    input.write(<span class="string">"SherlockBlaze"</span>)</span><br><span class="line">    input.write(<span class="string">"\t is the most handsome guy!\n"</span>)</span><br><span class="line">    input.close()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><blockquote><p>通过这种方式，我们往当前目录下的 Test.txt 文件中写入了 SherlockBlaze is the most handsome guy! 这句话，并且需要注意的是，我们在写完文件后，调用close()方法关闭了文件流。</p></blockquote><p>常见小特性</p><blockquote><p>当使用w模式打开一个文件时，如果文件不存在，open函数就会创建一个新文件，如果该文件存在，那么这个文件里的内容会被心的内容覆盖。当我们用读／写模式打开文件的时候，文件内部会添加一个叫做文件指针的特殊标记，文件的读写操作都发生在指针当前位置上。</p></blockquote><p>判断文件是否存在</p><blockquote><p>为了避免误操作，我们可以通过os.path模块中的isFile函数来判断一个文件是否存在。即：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">is</span> os.paht.isfile(<span class="string">"Test.txt"</span>):</span><br><span class="line">    print(<span class="string">"Test.txt exists"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Test.txt doesn't exists"</span>)</span><br></pre></td></tr></table></figure><h2 id="简单小程序"><a href="#简单小程序" class="headerlink" title="简单小程序"></a>简单小程序</h2><ul><li>输入文件路径，并且从中计算各个字母出现的次数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    filename = input(<span class="string">"Enter a filename: "</span>).strip()</span><br><span class="line">    infile = open(filename,<span class="string">"r"</span>)</span><br><span class="line"></span><br><span class="line">    counts = <span class="number">26</span> * [<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> infile:</span><br><span class="line">        countLetters(line.lower(),counts)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(counts)):</span><br><span class="line">        <span class="keyword">if</span> counts[i] != <span class="number">0</span>:</span><br><span class="line">            print(chr(ord(<span class="string">'a'</span>) + i) + <span class="string">"appears "</span> + str(counts[i])</span><br><span class="line">            + (<span class="string">" time"</span> <span class="keyword">if</span> counts[i] == <span class="number">1</span> <span class="keyword">else</span> <span class="string">" times"</span>))</span><br><span class="line"></span><br><span class="line">    infile.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countLetters</span><span class="params">(line,counts)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> line:</span><br><span class="line">        <span class="keyword">if</span> ch.isalpha():</span><br><span class="line">            counts[ord(ch) - ord(<span class="string">'a'</span>)] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><blockquote><p>思路简单叙述：首先创建数组，每当读取到一个字符，对对应位置的数字进行加一，最后在进行遍历得到输出。</p></blockquote><ul><li>下载网站源代码，然后写入目的文件中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(url,num_retries = <span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Downloading:'</span>,url)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = urllib.request.urlopen(url).read()</span><br><span class="line">    <span class="keyword">except</span> urllib.URLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'Download error:'</span>,e.reason)</span><br><span class="line">        html = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> num_retries &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> hasattr(e,<span class="string">'code'</span>) <span class="keyword">and</span> <span class="number">500</span> &lt;= e.code &lt;<span class="number">600</span>:</span><br><span class="line">                <span class="keyword">return</span> download(url,num_retries<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    url = input(<span class="string">"Enter a url:\n"</span>).strip()</span><br><span class="line">    f2 = input(<span class="string">"Enter a target file:\n"</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(f2):</span><br><span class="line">        print(f2 + <span class="string">" already exists"</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    html = download(url)</span><br><span class="line">    target = open(f2,<span class="string">"w"</span>)</span><br><span class="line"></span><br><span class="line">    content = html.decode(encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">    target.write(content)</span><br><span class="line">    target.close()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><blockquote><p>比如我输入网址 <code>http://www.game2.cn/</code>，在输入目的文件：game2.txt。即可进行下载并把对应html输入到当前工作目录的game2.txt文件中。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
